%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed,
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's
% default settings. Three flags below control this separately for no
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of
% screen angles and frequencies for printing process separations, which are
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600
0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456
47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667
50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107
53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651
71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349
18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false
false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683
63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0
60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528
63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651
71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349
18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true
false   ] def
/PatFreq     [ 10.5833 10.0     9.4055  10.5833 10.0   10.5833
10.0    9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt
  {1 sub dup mul exch 1 sub dup mul add 1 sub }
  {dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add
%  sqrt 1 exch sub } def
%
%
/FMversion (5.0) def
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
 fMLevel1 {
  false
  /colorimage where {pop pop true} if
 } {
  true
 } ifelse
def
/FrameDict 400 dict def
systemdict /errordict known not {/errordict 10 dict def
  errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put
errordict /rangecheck {FrameDict /bug true put} put
FrameDict /bug false put
mark
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark
errordict /rangecheck FrameDict /tmprangecheck get put
FrameDict /bug get {
 /readline {
  /gstring exch def
  /gfile exch def
  /gindex 0 def
  {
   gfile read pop
   dup 10 eq {exit} if
   dup 13 eq {exit} if
   gstring exch gindex exch put
   /gindex gindex 1 add def
  } loop
  pop
  gstring 0 gindex getinterval true
  } bind def
 } if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE {
 dup = flush
 FMshowpage
 /Helvetica findfont 12 scalefont setfont
 72 200 moveto show
 72 220 moveto show
 FMshowpage
 FMquit
 } def
/FMVERSION {
 FMversion ne {
  (Frame product version does not match ps_prolog!  Check
installation;)
  (also check ~/fminit and ./fminit for old versions) FMFAILURE
  } if
 } def
/FMBADEPSF {
 (Adobe's PostScript Language Reference Manual, 2nd Edition, section
H.2.4)
 (says your EPS file is not valid, as it calls X              )
 dup dup (X) search pop exch pop exch pop length
 5 -1 roll
 putinterval
 FMFAILURE
 } def
/fmConcatProcs
 {
 /proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2
length add array def
 newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval
newproc cvx
}def
FrameDict begin [
 /ALDsave
 /FMdicttop
 /FMoptop
 /FMpointsize
 /FMsaveobject
 /b
 /bitmapsave
 /blut
 /bpside
 /bs
 /bstring
 /bwidth
 /c
 /cf
 /cs
 /cynu
 /depth
 /edown
 /fh
 /fillvals
 /fw
 /fx
 /fy
 /g
 /gfile
 /gindex
 /grnt
 /gryt
 /gstring
 /height
 /hh
 /i
 /im
 /indx
 /is
 /k
 /kk
 /landscape
 /lb
 /len
 /llx
 /lly
 /m
 /magu
 /manualfeed
 /n
 /offbits
 /onbits
 /organgle
 /orgbangle
 /orgbfreq
 /orgbproc
 /orgbxfer
 /orgfreq
 /orggangle
 /orggfreq
 /orggproc
 /orggxfer
 /orgmatrix
 /orgproc
 /orgrangle
 /orgrfreq
 /orgrproc
 /orgrxfer
 /orgxfer
 /pagesave
 /paperheight
 /papersizedict
 /paperwidth
 /pos
 /pwid
 /r
 /rad
 /redt
 /sl
 /str
 /tran
 /u
 /urx
 /ury
 /val
 /width
 /width
 /ws
 /ww
 /x
 /x1
 /x2
 /xindex
 /xpoint
 /xscale
 /xx
 /y
 /y1
 /y2
 /yelu
 /yindex
 /ypoint
 /yscale
 /yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
 /fMAcrobat true def

 /FmPD /pdfmark load def


 /FmPT /show load def


 currentdistillerparams /CoreDistVersion get 2000 ge {


  /FmPD2 /pdfmark load def





  /FmPA { mark exch /Dest exch 5 3 roll
    /View [ /XYZ null 6 -2 roll FmDC exch pop null]
/DEST FmPD
  }FmBD
 } {

  /FmPD2 /cleartomark load def
  /FmPA {pop pop pop}FmBD
 } ifelse
} {

 /fMAcrobat false def
 /FmPD /cleartomark load def
 /FmPD2 /cleartomark load def
 /FmPT /pop load def
 /FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
 transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
 dup 3 index lt {3 1 roll exch} if
 1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def
/FrameSepIs FMnone def
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def
/FrameColorEpsilon .001 def
/eqepsilon {
 sub dup 0 lt {neg} if
 FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK {
 2 copy 0 get exch 0 get eqepsilon {
  2 copy 1 get exch 1 get eqepsilon {
   2 copy 2 get exch 2 get eqepsilon {
    3 get exch 3 get eqepsilon
   } {pop pop false} ifelse
  }{pop pop false} ifelse
 } {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB {
 2 copy 4 get exch 0 get eqepsilon {
  2 copy 5 get exch 1 get eqepsilon {
   6 get exch 2 get eqepsilon
  }{pop pop false} ifelse
 } {pop pop false} ifelse
} bind def
/RGBtoCMYK {
 1 exch sub
 3 1 roll
 1 exch sub
 3 1 roll
 1 exch sub
 3 1 roll
 3 copy
 2 copy
 le { pop } { exch pop } ifelse
 2 copy
 le { pop } { exch pop } ifelse
 dup dup dup
 6 1 roll
 4 1 roll
 7 1 roll
 sub
 6 1 roll
 sub
 5 1 roll
 sub
 4 1 roll
} bind def
/CMYKtoRGB {
 dup dup 4 -1 roll add
 5 1 roll 3 -1 roll add

 4 1 roll add

 1 exch sub dup 0 lt {pop 0} if 3 1 roll
 1 exch sub dup 0 lt {pop 0} if exch
 1 exch sub dup 0 lt {pop 0} if exch
} bind def
/FrameSepInit {
 1.0 RealSetgray
} bind def
/FrameSetSepColor {
 /FrameSepBlue exch def
 /FrameSepGreen exch def
 /FrameSepRed exch def
 /FrameSepBlack exch def
 /FrameSepYellow exch def
 /FrameSepMagenta exch def
 /FrameSepCyan exch def
 /FrameSepIs FMcustom def
 setCurrentScreen
} bind def
/FrameSetCyan {
 /FrameSepBlue 1.0 def
 /FrameSepGreen 1.0 def
 /FrameSepRed 0.0 def
 /FrameSepBlack 0.0 def
 /FrameSepYellow 0.0 def
 /FrameSepMagenta 0.0 def
 /FrameSepCyan 1.0 def
 /FrameSepIs FMcyan def
 setCurrentScreen
} bind def

/FrameSetMagenta {
 /FrameSepBlue 1.0 def
 /FrameSepGreen 0.0 def
 /FrameSepRed 1.0 def
 /FrameSepBlack 0.0 def
 /FrameSepYellow 0.0 def
 /FrameSepMagenta 1.0 def
 /FrameSepCyan 0.0 def
 /FrameSepIs FMmagenta def
 setCurrentScreen
} bind def

/FrameSetYellow {
 /FrameSepBlue 0.0 def
 /FrameSepGreen 1.0 def
 /FrameSepRed 1.0 def
 /FrameSepBlack 0.0 def
 /FrameSepYellow 1.0 def
 /FrameSepMagenta 0.0 def
 /FrameSepCyan 0.0 def
 /FrameSepIs FMyellow def
 setCurrentScreen
} bind def

/FrameSetBlack {
 /FrameSepBlue 0.0 def
 /FrameSepGreen 0.0 def
 /FrameSepRed 0.0 def
 /FrameSepBlack 1.0 def
 /FrameSepYellow 0.0 def
 /FrameSepMagenta 0.0 def
 /FrameSepCyan 0.0 def
 /FrameSepIs FMblack def
 setCurrentScreen
} bind def

/FrameNoSep {
 /FrameSepIs FMnone def
 setCurrentScreen
} bind def
/FrameSetSepColors {
 FrameDict begin
 [ exch 1 add 1 roll ]
 /FrameSepColors
 exch def end
 } bind def
/FrameColorInSepListCMYK {
 FrameSepColors {
         exch dup 3 -1 roll
         FrameCmpColorsCMYK
         { pop true exit } if
     } forall
 dup true ne {pop false} if
 } bind def
/FrameColorInSepListRGB {
 FrameSepColors {
         exch dup 3 -1 roll
         FrameCmpColorsRGB
         { pop true exit } if
     } forall
 dup true ne {pop false} if
 } bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end
/setgray {
 FrameDict begin
 FrameSepIs FMnone eq
  { RealSetgray }
  {
  FrameSepIs FMblack eq
   { RealSetgray }
   { FrameSepIs FMcustom eq
     FrameSepRed 0 eq and
     FrameSepGreen 0 eq and
     FrameSepBlue 0 eq and {
      RealSetgray
     } {
    1 RealSetgray pop
     } ifelse
   } ifelse
  } ifelse
 end
} bind def
/setrgbcolor {
 FrameDict begin
 FrameSepIs FMnone eq
 {  RealSetrgbcolor }
 {
  3 copy [ 4 1 roll ]
  FrameColorInSepListRGB
  {
    FrameSepBlue eq exch
     FrameSepGreen eq and exch
     FrameSepRed eq and
     { 0 } { 1 } ifelse
  }
  {
   FMPColor {
    RealSetrgbcolor
    currentcmykcolor
   } {
    RGBtoCMYK
   } ifelse
   FrameSepIs FMblack eq
   {1.0 exch sub 4 1 roll pop pop pop} {
   FrameSepIs FMyellow eq
   {pop 1.0 exch sub 3 1 roll pop pop} {
   FrameSepIs FMmagenta eq
   {pop pop 1.0 exch sub exch pop } {
   FrameSepIs FMcyan eq
   {pop pop pop 1.0 exch sub }
   {pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse
  } ifelse
  RealSetgray
 }
 ifelse
 end
} bind def
/sethsbcolor {
 FrameDict begin
 FrameSepIs FMnone eq
 { RealSethsbcolor }
 {
  RealSethsbcolor
  currentrgbcolor
  setrgbcolor
 }
 ifelse
 end
} bind def
FrameDict begin
/setcmykcolor where {
 pop /RealSetcmykcolor /setcmykcolor load def
} {
 /RealSetcmykcolor {
  4 1 roll
  3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat
  RealSetrgbcolor pop
 } bind def
} ifelse
userdict /setcmykcolor {
  FrameDict begin
  FrameSepIs FMnone eq
  { RealSetcmykcolor }
  {
   4 copy [ 5 1 roll ]
   FrameColorInSepListCMYK
   {
    FrameSepBlack eq exch
    FrameSepYellow eq and exch
    FrameSepMagenta eq and exch
    FrameSepCyan eq and
    { 0 } { 1 } ifelse
   }
   {
    FrameSepIs FMblack eq
    {1.0 exch sub 4 1 roll pop pop pop} {
    FrameSepIs FMyellow eq
    {pop 1.0 exch sub 3 1 roll pop pop} {
    FrameSepIs FMmagenta eq
    {pop pop 1.0 exch sub exch pop } {
    FrameSepIs FMcyan eq
    {pop pop pop 1.0 exch sub }
    {pop pop pop pop 1} ifelse } ifelse } ifelse }
ifelse
   } ifelse
   RealSetgray
  }
  ifelse
  end
 } bind put
fMLevel1 {



 /patScreenDict 7 dict dup begin
  <0f1e3c78f0e1c387> [ 45  { pop } {exch pop}
  .5   2 sqrt] FmBD
  <0f87c3e1f0783c1e> [ 135 { pop } {exch
pop}   .5   2 sqrt] FmBD
  <cccccccccccccccc> [ 0   { pop }
dup    .5   2    ] FmBD
  <ffff0000ffff0000> [ 90  { pop } dup    .5   2    ] FmBD
  <8142241818244281> [ 45  { 2 copy lt {exch} if pop} dup
.75  2 sqrt] FmBD
  <03060c183060c081> [ 45  { pop } {exch
pop}   .875 2 sqrt] FmBD
  <8040201008040201> [ 135 { pop } {exch
pop}   .875 2 sqrt] FmBD
 end def
} {

 /patProcDict 5 dict dup begin
  <0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto
stroke
           4
-4 moveto 12 4 lineto stroke
           -4
4 moveto 4 12 lineto stroke} bind def
  <0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto
stroke
           -4 4 moveto 4 -4
lineto stroke
           4
12 moveto 12 4 lineto stroke} bind def
  <8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto
stroke
           -1
-1 moveto 9 9 lineto stroke } bind def
  <03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke
           4
-4 moveto 12 4 lineto stroke
           -4
4 moveto 4 12 lineto stroke} bind def
  <8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto
stroke
           -4
4 moveto 4 -4 lineto stroke
           4
12 moveto 12 4 lineto stroke} bind def
 end def
 /patDict 15 dict dup begin
  /PatternType 1 def
  /PaintType 2 def
  /TilingType 3 def
  /BBox [ 0 0 8 8 ] def
  /XStep 8 def
  /YStep 8 def
  /PaintProc {
   begin
   patProcDict bstring known {
    patProcDict bstring get exec
   } {

    8 8 true [1 0 0 -1 0 8] bstring imagemask
   } ifelse
   end
  } bind def
 end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
 {
  graymode fMLevel1 or not {

   [/Pattern [/DeviceCMYK]] setcolorspace
   FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
  } {
   FrameCurColors 3 get 1.0 ge {
    FrameCurGray RealSetgray
   } {
    fMAcrobat not FMPColor graymode and and {
     0 1 3 {
      FrameCurColors exch get
      1 FrameCurGray sub mul
     } for
     RealSetcmykcolor
    } {
     4 1 6 {
      FrameCurColors exch get
      graymode {
       1 exch sub 1
FrameCurGray sub mul 1 exch sub
      } {
       1.0 lt {FrameCurGray}
{1} ifelse
      } ifelse
     } for
     RealSetrgbcolor
    } ifelse
   } ifelse
  } ifelse
 } {
  FrameCurColors 0 4 getinterval aload
  FrameColorInSepListCMYK {
   FrameSepBlack eq exch
   FrameSepYellow eq and exch
   FrameSepMagenta eq and exch
   FrameSepCyan eq and
   FrameSepIs FMcustom eq and
   { FrameCurGray } { 1 } ifelse
  } {
   FrameSepIs FMblack eq
   {FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll
pop pop pop} {
   FrameSepIs FMyellow eq
   {pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1
roll pop pop} {
   FrameSepIs FMmagenta eq
   {pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
   FrameSepIs FMcyan eq
   {pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub
}
   {pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse
  } ifelse
  graymode fMLevel1 or not {

   [/Pattern [/DeviceGray]] setcolorspace
   FrameCurPat setcolor
  } {
   graymode not fMLevel1 and {

    dup 1 lt {pop FrameCurGray} if
   } if
   RealSetgray
  } ifelse
 } ifelse
} bind def
/savematrix {
 orgmatrix currentmatrix pop
 } bind def
/restorematrix {
 orgmatrix setmatrix
 } bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def

/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
 sangle fMatrix2 rotate
 fMDefaultMatrix fMatrix2 concatmatrix
 dup 0 get /sflipx exch def
     3 get /sflipy exch def
/screenIndex {
 0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit}
{pop} ifelse } for
} bind def
/getCyanScreen {
 FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles
CMLowFreqs} ifelse
  screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
 FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs}
ifelse
  screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
 FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs
} ifelse
  screenIndex dup 3 1 roll get 3 1 roll get { 3 div
   {2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
   FMSpotFunction } } {/FMSpotFunction load } ifelse
   0.0 exch
} bind def
/getBlackScreen  {
 FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
  screenIndex get 45.0 /FMSpotFunction load
} bind def
/getSpotScreen {
 getBlackScreen
} bind def
/getCompositeScreen {
 getBlackScreen
} bind def
/FMSetScreen
 fMLevel1 { /setscreen load
 }{ {
  8 dict begin
  /HalftoneType 1 def
  /SpotFunction exch def
  /Angle exch def
  /Frequency exch def
  /AccurateScreens FMUseAcccurateScreens def
  currentdict end sethalftone
 } bind } ifelse
def
/setDefaultScreen {
 FMPColor {
  orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx
setcolortransfer
 }
 {
  orgxfer cvx settransfer
 } ifelse
 orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
 FrameSepIs FMnone eq {
  FMUseDefaultNoSeparationScreen {
   setDefaultScreen
  } {
   getCompositeScreen FMSetScreen
  } ifelse
 } {
  FrameSepIs FMcustom eq {
   FMUseDefaultSpotSeparationScreen {
    setDefaultScreen
   } {
    getSpotScreen FMSetScreen
   } ifelse
  } {
   FMUseDefaultProcessSeparationScreen {
    setDefaultScreen
   } {
    FrameSepIs FMcyan eq {
     getCyanScreen FMSetScreen
    } {
     FrameSepIs FMmagenta eq {
      getMagentaScreen FMSetScreen
     } {
      FrameSepIs FMyellow eq {
       getYellowScreen
FMSetScreen
      } {
       getBlackScreen
FMSetScreen
      } ifelse
     } ifelse
    } ifelse
   } ifelse
  } ifelse
 } ifelse
} bind def
end

/FMDOCUMENT {
 array /FMfonts exch def
 /#copies exch def
 FrameDict begin
 0 ne /manualfeed exch def
 /paperheight exch def
 /paperwidth exch def
 0 ne /fMNegative exch def
 0 ne /edown exch def
 /yscale exch def
 /xscale exch def
 fMLevel1 {
  manualfeed {setmanualfeed} if
  /FMdicttop countdictstack 1 add def
  /FMoptop count def
  setpapername
  manualfeed {true} {papersize} ifelse
  {manualpapersize} {false} ifelse
  {desperatepapersize} {false} ifelse
  {papersizefailure} if
  count -1 FMoptop {pop pop} for
  countdictstack -1 FMdicttop {pop end} for
  }
  {2 dict
   dup /PageSize [paperwidth paperheight] put
   manualfeed {dup /ManualFeed manualfeed put} if
   {setpagedevice} stopped {papersizefailure} if
  }
 ifelse

 FMPColor {
  currentcolorscreen
   cvlit /orgproc exch def
      /organgle exch def
      /orgfreq exch def
   cvlit /orgbproc exch def
      /orgbangle exch def
      /orgbfreq exch def
   cvlit /orggproc exch def
      /orggangle exch def
      /orggfreq exch def
   cvlit /orgrproc exch def
      /orgrangle exch def
      /orgrfreq exch def
   currentcolortransfer
   fMNegative {
    1 1 4 {
     pop { 1 exch sub } fmConcatProcs 4 1
roll
    } for
    4 copy
    setcolortransfer
   } if
   cvlit /orgxfer exch def
   cvlit /orgbxfer exch def
   cvlit /orggxfer exch def
   cvlit /orgrxfer exch def
 } {
  currentscreen
   cvlit /orgproc exch def
      /organgle exch def
      /orgfreq exch def

  currenttransfer
  fMNegative {
   { 1 exch sub } fmConcatProcs
   dup settransfer
  } if
  cvlit /orgxfer exch def
 } ifelse
 end
} def
/FMBEGINPAGE {
 FrameDict begin
 /pagesave save def
 3.86 setmiterlimit
 /landscape exch 0 ne def
 landscape {
  90 rotate 0 exch dup /pwid exch def neg translate pop
 }{
  pop /pwid exch def
 } ifelse
 edown { [-1 0 0 1 pwid 0] concat } if
 0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto
 0 paperheight lineto 0 0 lineto 1 setgray fill
 xscale yscale scale
 /orgmatrix matrix def
 gsave
} def
/FMENDPAGE {
 grestore
 pagesave restore
 end
 showpage
 } def
/FMFONTDEFINE {
 FrameDict begin
 findfont
 ReEncode
 1 index exch
 definefont
 FMfonts 3 1 roll
 put
 end
 } def
/FMFILLS {
 FrameDict begin dup
 array /fillvals exch def
 dict /patCache exch def
 end
 } def
/FMFILL {
 FrameDict begin
  fillvals 3 1 roll put
 end
 } def
/FMNORMALIZEGRAPHICS {
 newpath
 1 setlinewidth
 0 setlinecap
 0 0 0 sethsbcolor
 0 setgray
 } bind def
/FMBEGINEPSF {
 end
 /FMEPSF save def
 /showpage {} def
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
 /banddevice {(banddevice) FMBADEPSF} def
 /clear {(clear) FMBADEPSF} def
 /cleardictstack {(cleardictstack) FMBADEPSF} def
 /copypage {(copypage) FMBADEPSF} def
 /erasepage {(erasepage) FMBADEPSF} def
 /exitserver {(exitserver) FMBADEPSF} def
 /framedevice {(framedevice) FMBADEPSF} def
 /grestoreall {(grestoreall) FMBADEPSF} def
 /initclip {(initclip) FMBADEPSF} def
 /initgraphics {(initgraphics) FMBADEPSF} def
 /quit {(quit) FMBADEPSF} def
 /renderbands {(renderbands) FMBADEPSF} def
 /setglobal {(setglobal) FMBADEPSF} def
 /setpagedevice {(setpagedevice) FMBADEPSF} def
 /setshared {(setshared) FMBADEPSF} def
 /startjob {(startjob) FMBADEPSF} def
 /lettertray {(lettertray) FMBADEPSF} def
 /letter {(letter) FMBADEPSF} def
 /lettersmall {(lettersmall) FMBADEPSF} def
 /11x17tray {(11x17tray) FMBADEPSF} def
 /11x17 {(11x17) FMBADEPSF} def
 /ledgertray {(ledgertray) FMBADEPSF} def
 /ledger {(ledger) FMBADEPSF} def
 /legaltray {(legaltray) FMBADEPSF} def
 /legal {(legal) FMBADEPSF} def
 /statementtray {(statementtray) FMBADEPSF} def
 /statement {(statement) FMBADEPSF} def
 /executivetray {(executivetray) FMBADEPSF} def
 /executive {(executive) FMBADEPSF} def
 /a3tray {(a3tray) FMBADEPSF} def
 /a3 {(a3) FMBADEPSF} def
 /a4tray {(a4tray) FMBADEPSF} def
 /a4 {(a4) FMBADEPSF} def
 /a4small {(a4small) FMBADEPSF} def
 /b4tray {(b4tray) FMBADEPSF} def
 /b4 {(b4) FMBADEPSF} def
 /b5tray {(b5tray) FMBADEPSF} def
 /b5 {(b5) FMBADEPSF} def
 FMNORMALIZEGRAPHICS
 [/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall
 fx fw 2 div add fy fh 2 div add  translate
 rotate
 fw 2 div neg fh 2 div neg translate
 fw urx llx sub div fh ury lly sub div scale
 llx neg lly neg translate
 /FMdicttop countdictstack 1 add def
 /FMoptop count def
 } bind def
/FMENDEPSF {
 count -1 FMoptop {pop pop} for
 countdictstack -1 FMdicttop {pop end} for
 FMEPSF restore
 FrameDict begin
 } bind def
FrameDict begin
/setmanualfeed {
%%BeginFeature *ManualFeed True
  statusdict /manualfeed true put
%%EndFeature
 } bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen {
 paperheight sub abs 16 lt exch
 paperwidth sub abs 16 lt and
 {/papername exch def} {pop} ifelse
 } bind def
/setpapername {
 /papersizedict 14 dict def
 papersizedict begin
 /papername /unknown def
  /Letter 8.5 inch 11.0 inch pagedimen
  /LetterSmall 7.68 inch 10.16 inch pagedimen
  /Tabloid 11.0 inch 17.0 inch pagedimen
  /Ledger 17.0 inch 11.0 inch pagedimen
  /Legal 8.5 inch 14.0 inch pagedimen
  /Statement 5.5 inch 8.5 inch pagedimen
  /Executive 7.5 inch 10.0 inch pagedimen
  /A3 11.69 inch 16.5 inch pagedimen
  /A4 8.26 inch 11.69 inch pagedimen
  /A4Small 7.47 inch 10.85 inch pagedimen
  /B4 10.125 inch 14.33 inch pagedimen
  /B5 7.16 inch 10.125 inch pagedimen
 end
 } bind def
/papersize {
 papersizedict begin
  /Letter {letter} def
  /LetterSmall {lettertray lettersmall} def
  /Tabloid {11x17tray 11x17} def
  /Ledger {ledgertray ledger} def
  /Legal {legaltray legal} def
  /Statement {statementtray statement} def
  /Executive {executivetray executive} def
  /A3 {a3tray a3} def
  /A4 {a4tray a4} def
  /A4Small {a4tray a4small} def
  /B4 {b4tray b4} def
  /B5 {b5tray b5} def
  /unknown {unknown} def
 papersizedict dup papername known {papername} {/unknown} ifelse get
 end
 statusdict begin stopped end
 } bind def
/manualpapersize {
 papersizedict begin
  /Letter {letter} def
  /LetterSmall {lettersmall} def
  /Tabloid {11x17} def
  /Ledger {ledger} def
  /Legal {legal} def
  /Statement {statement} def
  /Executive {executive} def
  /A3 {a3} def
  /A4 {a4} def
  /A4Small {a4small} def
  /B4 {b4} def
  /B5 {b5} def
  /unknown {unknown} def
 papersizedict dup papername known {papername} {/unknown} ifelse get
 end
 stopped
 } bind def
/desperatepapersize {
 statusdict /setpageparams known
  {
  paperwidth paperheight 0 1
  statusdict begin
  {setpageparams} stopped
  end
  } {true} ifelse
 } bind def
/papersizefailure {
 FMAllowPaperSizeMismatch not
  {
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
   FMFAILURE } if
 } def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode {
 dup
 length
 dict begin
 {
 1 index /FID ne
  {def}
  {pop pop} ifelse
 } forall
 0 eq {/Encoding DiacriticEncoding def} if
 currentdict
 end
 } bind def
FMPColor

 {
 /BEGINBITMAPCOLOR {
  BITMAPCOLOR} def
 /BEGINBITMAPCOLORc {
  BITMAPCOLORc} def
 /BEGINBITMAPTRUECOLOR {
  BITMAPTRUECOLOR } def
 /BEGINBITMAPTRUECOLORc {
  BITMAPTRUECOLORc } def
 /BEGINBITMAPCMYK {
  BITMAPCMYK } def
 /BEGINBITMAPCMYKc {
  BITMAPCMYKc } def
 }

 {
 /BEGINBITMAPCOLOR {
  BITMAPGRAY} def
 /BEGINBITMAPCOLORc {
  BITMAPGRAYc} def
 /BEGINBITMAPTRUECOLOR {
  BITMAPTRUEGRAY } def
 /BEGINBITMAPTRUECOLORc {
  BITMAPTRUEGRAYc } def
 /BEGINBITMAPCMYK {
  BITMAPCMYKGRAY } def
 /BEGINBITMAPCMYKc {
  BITMAPCMYKGRAYc } def
 }
ifelse
/K {
 FMPrintAllColorsAsBlack {
  dup 1 eq 2 index 1 eq and 3 index 1 eq and not
   {7 {pop} repeat 0 0 0 1 0 0 0} if
 } if
 FrameCurColors astore
 pop combineColor
} bind def
/graymode true def
fMLevel1 {
 /fmGetFlip {
  fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
 } FmBD
} if
/setPatternMode {
 fMLevel1 {
  2 index patScreenDict exch known {
   pop pop
   patScreenDict exch get aload pop
   freq

   mul
   5 2
roll
   fMatrix2 currentmatrix 1 get 0 ne {
    3 -1 roll 90 add 3 1 roll
    sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
   } {

    sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul
   } ifelse
   0 lt {exch pop} {pop} ifelse
   fMNegative {
    {neg} fmConcatProcs
   } if
   bind



   systemdict /setscreen get exec
   /FrameCurGray exch def
  } {
   /bwidth  exch def
   /bpside  exch def
   /bstring exch def
   /onbits 0 def  /offbits 0 def
   freq sangle landscape {90 add} if
    {/ypoint exch def
     /xpoint exch def
     /xindex xpoint 1 add 2 div bpside mul cvi def
     /yindex ypoint 1 add 2 div bpside mul cvi def
     bstring yindex bwidth mul xindex 8 idiv add get
     1 7 xindex 8 mod sub bitshift and 0 ne
fMNegative {not} if
     {/onbits  onbits  1 add def 1}
     {/offbits offbits 1 add def 0}
     ifelse
    }
    setscreen
   offbits offbits onbits add div fMNegative {1.0 exch
sub} if
   /FrameCurGray exch def
  } ifelse
 } {
  pop pop
  dup patCache exch known {
   patCache exch get
  } {
   dup
   patDict /bstring 3 -1 roll put
   patDict
   9 PatFreq screenIndex get div dup matrix scale
   makepattern
   dup
   patCache 4 -1 roll 3 -1 roll put
  } ifelse
  /FrameCurGray 0 def
  /FrameCurPat exch def
 } ifelse
 /graymode false def
 combineColor
} bind def
/setGrayScaleMode {
 graymode not {
  /graymode true def
  fMLevel1 {
   setCurrentScreen
  } if
 } if
 /FrameCurGray exch def
 combineColor
} bind def
/normalize {
 transform round exch round exch itransform
 } bind def
/dnormalize {
 dtransform round exch round exch idtransform
 } bind def
/lnormalize {
 0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
 } bind def
/H {
 lnormalize setlinewidth
 } bind def
/Z {
 setlinecap
 } bind def

/PFill {
 graymode fMLevel1 or not {
  gsave 1 setgray eofill grestore
 } if
} bind def
/PStroke {
 graymode fMLevel1 or not {
  gsave 1 setgray stroke grestore
 } if
 stroke
} bind def
/X {
 fillvals exch get
 dup type /stringtype eq
 {8 1 setPatternMode}
 {setGrayScaleMode}
 ifelse
 } bind def
/V {
 PFill gsave eofill grestore
 } bind def
/Vclip {
 clip
 } bind def
/Vstrk {
 currentlinewidth exch setlinewidth PStroke setlinewidth
 } bind def
/N {
 PStroke
 } bind def
/Nclip {
 strokepath clip newpath
 } bind def
/Nstrk {
 currentlinewidth exch setlinewidth PStroke setlinewidth
 } bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L {
  /n exch def
 newpath
 normalize
 moveto
 2 1 n {pop normalize lineto} for
 } bind def
/Y {
 L
 closepath
 } bind def
/R {
 /y2 exch def
 /x2 exch def
 /y1 exch def
 /x1 exch def
 x1 y1
 x2 y1
 x2 y2
 x1 y2
 4 Y
 } bind def
/rarc
 {rad
  arcto
 } bind def
/RR {
 /rad exch def
 normalize
 /y2 exch def
 /x2 exch def
 normalize
 /y1 exch def
 /x1 exch def
 mark
 newpath
 {
 x1 y1 rad add moveto
 x1 y2 x2 y2 rarc
 x2 y2 x2 y1 rarc
 x2 y1 x1 y1 rarc
 x1 y1 x1 y2 rarc
 closepath
 } stopped {x1 y1 x2 y2 R} if
 cleartomark
 } bind def
/RRR {
 /rad exch def
 normalize /y4 exch def /x4 exch def
 normalize /y3 exch def /x3 exch def
 normalize /y2 exch def /x2 exch def
 normalize /y1 exch def /x1 exch def
 newpath
 normalize moveto
 mark
 {
 x2 y2 x3 y3 rarc
 x3 y3 x4 y4 rarc
 x4 y4 x1 y1 rarc
 x1 y1 x2 y2 rarc
 closepath
 } stopped
  {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto
closepath} if
 cleartomark
 } bind def
/C {
 grestore
 gsave
 R
 clip
 setCurrentScreen
} bind def
/CP {
 grestore
 gsave
 Y
 clip
 setCurrentScreen
} bind def
/F {
 FMfonts exch get
 FMpointsize scalefont
 setfont
 } bind def
/Q {
 /FMpointsize exch def
 F
 } bind def
/T {
 moveto show
 } bind def
/RF {
 rotate
 0 ne {-1 1 scale} if
 } bind def
/TF {
 gsave
 moveto
 RF
 show
 grestore
 } bind def
/P {
 moveto
 0 32 3 2 roll widthshow
 } bind def
/PF {
 gsave
 moveto
 RF
 0 32 3 2 roll widthshow
 grestore
 } bind def
/S {
 moveto
 0 exch ashow
 } bind def
/SF {
 gsave
 moveto
 RF
 0 exch ashow
 grestore
 } bind def
/B {
 moveto
 0 32 4 2 roll 0 exch awidthshow
 } bind def
/BF {
 gsave
 moveto
 RF
 0 32 4 2 roll 0 exch awidthshow
 grestore
 } bind def
/G {
 gsave
 newpath
 normalize translate 0.0 0.0 moveto
 dnormalize scale
 0.0 0.0 1.0 5 3 roll arc
 closepath
 PFill fill
 grestore
 } bind def
/Gstrk {
 savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch
    normalize 2 index 2 div sub exch 3 index 2 div add exch
    translate
    scale
    0.0 0.0 1.0 5 3 roll arc
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip {
 newpath
 savematrix
 normalize translate 0.0 0.0 moveto
 dnormalize scale
 0.0 0.0 1.0 5 3 roll arc
 closepath
 clip newpath
 restorematrix
 } bind def
/GG {
 gsave
 newpath
 normalize translate 0.0 0.0 moveto
 rotate
 dnormalize scale
 0.0 0.0 1.0 5 3 roll arc
 closepath
 PFill
 fill
 grestore
 } bind def
/GGclip {
 savematrix
 newpath
    normalize translate 0.0 0.0 moveto
    rotate
    dnormalize scale
    0.0 0.0 1.0 5 3 roll arc
    closepath
 clip newpath
 restorematrix
 } bind def
/GGstrk {
 savematrix
    newpath
    normalize translate 0.0 0.0 moveto
    rotate
    dnormalize scale
    0.0 0.0 1.0 5 3 roll arc
    closepath
 restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
 } bind def
/A {
 gsave
 savematrix
 newpath
 2 index 2 div add exch 3 index 2 div sub exch
 normalize 2 index 2 div sub exch 3 index 2 div add exch
 translate
 scale
 0.0 0.0 1.0 5 3 roll arc
 restorematrix
 PStroke
 grestore
 } bind def
/Aclip {
 newpath
 savematrix
 normalize translate 0.0 0.0 moveto
 dnormalize scale
 0.0 0.0 1.0 5 3 roll arc
 closepath
 strokepath clip newpath
 restorematrix
} bind def
/Astrk {
 Gstrk
} bind def
/AA {
 gsave
 savematrix
 newpath

 3 index 2 div add exch 4 index 2 div sub exch

 normalize 3 index 2 div sub exch 4 index 2 div add exch
 translate
 rotate
 scale
 0.0 0.0 1.0 5 3 roll arc
 restorematrix
 PStroke
 grestore
 } bind def
/AAclip {
 savematrix
 newpath
    normalize translate 0.0 0.0 moveto
    rotate
    dnormalize scale
    0.0 0.0 1.0 5 3 roll arc
    closepath
 strokepath clip newpath
 restorematrix
} bind def
/AAstrk {
 GGstrk
} bind def
/BEGINPRINTCODE {
 /FMdicttop countdictstack 1 add def
 /FMoptop count 7 sub def
 /FMsaveobject save def
 userdict begin
 /showpage {} def
 FMNORMALIZEGRAPHICS
 3 index neg 3 index neg translate
 } bind def
/ENDPRINTCODE {
 count -1 FMoptop {pop pop} for
 countdictstack -1 FMdicttop {pop end} for
 FMsaveobject restore
 } bind def
/gn {
 0
 { 46 mul
  cf read pop
  32 sub
  dup 46 lt {exit} if
  46 sub add
  } loop
 add
 } bind def
/cfs {
 /str sl string def
 0 1 sl 1 sub {str exch val put} for
 str def
 } bind def
/ic [
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
 0
 {0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
 {10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
 {19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
 {13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
 {4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
 {13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
 {7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
 {0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
 {10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
 ] def
/ms {
 /sl exch def
 /val 255 def
 /ws cfs
 /im cfs
 /val 0 def
 /bs cfs
 /cs cfs
 } bind def
400 ms
/ip {
 is
 0
 cf cs readline pop
 { ic exch get exec
  add
  } forall
 pop

 } bind def
/rip {


   bis ris copy pop
      is
      0
      cf cs readline pop
      {       ic exch get exec
              add
              } forall
   pop pop
   ris gis copy pop
   dup is exch

      cf cs readline pop
      {       ic exch get exec
              add
              } forall
   pop pop
   gis bis copy pop
   dup add is exch

      cf cs readline pop
      {       ic exch get exec
              add
              } forall
      pop

      } bind def
/rip4 {


   kis cis copy pop
      is
      0
      cf cs readline pop
      {       ic exch get exec
              add
              } forall
   pop pop
   cis mis copy pop
   dup is exch

      cf cs readline pop
      {       ic exch get exec
              add
              } forall
   pop pop
   mis yis copy pop
   dup dup add is exch

      cf cs readline pop
      {       ic exch get exec
              add
              } forall
   pop pop
   yis kis copy pop
   3 mul is exch

      cf cs readline pop
      {       ic exch get exec
              add
              } forall
      pop

      } bind def
/wh {
 /len exch def
 /pos exch def
 ws 0 len getinterval im pos len getinterval copy pop
 pos len
 } bind def
/bl {
 /len exch def
 /pos exch def
 bs 0 len getinterval im pos len getinterval copy pop
 pos len
 } bind def
/s1 1 string def
/fl {
 /len exch def
 /pos exch def
 /val cf s1 readhexstring pop 0 get def
 pos 1 pos len add 1 sub {im exch val put} for
 pos len
 } bind def
/hx {
 3 copy getinterval
 cf exch readhexstring pop pop
 } bind def
/wbytes {
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
 } bind def
/BEGINBITMAPBWc {
 1 {} COMMONBITMAPc
 } bind def
/BEGINBITMAPGRAYc {
 8 {} COMMONBITMAPc
 } bind def
/BEGINBITMAP2BITc {
 2 {} COMMONBITMAPc
 } bind def
/COMMONBITMAPc {

 /cvtProc exch def
 /depth exch def
 gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /lb width depth wbytes def
 sl lb lt {lb ms} if
 /bitmapsave save def
 cvtProc
 /is im 0 lb getinterval def
 ws 0 lb getinterval is copy pop
 /cf currentfile def
 width height depth [width 0 0 height neg 0 height]
 {ip} image
 bitmapsave restore
 grestore
 } bind def
/BEGINBITMAPBW {
 1 {} COMMONBITMAP
 } bind def
/BEGINBITMAPGRAY {
 8 {} COMMONBITMAP
 } bind def
/BEGINBITMAP2BIT {
 2 {} COMMONBITMAP
 } bind def
/COMMONBITMAP {
 /cvtProc exch def
 /depth exch def
 gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /bitmapsave save def
 cvtProc
 /is width depth wbytes string def
 /cf currentfile def
 width height depth [width 0 0 height neg 0 height]
 {cf is readhexstring pop} image
 bitmapsave restore
 grestore
 } bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
 currentcolortransfer
 /gryt exch def
 /blut exch def
 /grnt exch def
 /redt exch def
 0 1 255 {
  /indx exch def
  /cynu 1 red indx get 255 div sub def
  /magu 1 green indx get 255 div sub def
  /yelu 1 blue indx get 255 div sub def
  /kk cynu magu min yelu min def
  /u kk currentundercolorremoval exec def
%  /u 0 def
  nredt indx 1 0 cynu u sub max sub redt exec put
  ngreent indx 1 0 magu u sub max sub grnt exec put
  nbluet indx 1 0 yelu u sub max sub blut exec put
  ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
 } for
 {255 mul cvi nredt exch get}
 {255 mul cvi ngreent exch get}
 {255 mul cvi nbluet exch get}
 {255 mul cvi ngrayt exch get}
 setcolortransfer
 {pop 0} setundercolorremoval
 {} setblackgeneration
 } bind def
}
{
/colorSetup2 {
 [ /Indexed /DeviceRGB 255
  {dup red exch get 255 div
   exch dup green exch get 255 div
   exch blue exch get 255 div}
 ] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
 /tran 256 string def
 0 1 255 {/indx exch def
  tran indx
  red indx get 77 mul
  green indx get 151 mul
  blue indx get 28 mul
  add add 256 idiv put} for
 currenttransfer
 {255 mul cvi tran exch get 255.0 div}
 exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR {
 /depth 8 def
 gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /bitmapsave save def
 fMLevel1 {
  colorsetup
  /is width depth wbytes string def
  /cf currentfile def
  width height depth [width 0 0 height neg 0 height]
  {cf is readhexstring pop} {is} {is} true 3 colorimage
 } {
  colorSetup2
  /is width depth wbytes string def
  /cf currentfile def
  7 dict dup begin
   /ImageType 1 def
   /Width width def
   /Height height def
   /ImageMatrix [width 0 0 height neg 0 height] def
   /DataSource {cf is readhexstring pop} bind def
   /BitsPerComponent depth def
   /Decode [0 255] def
  end image
 } ifelse
 bitmapsave restore
 grestore
 } bind def
/BITMAPCOLORc {
 /depth 8 def
 gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /lb width depth wbytes def
 sl lb lt {lb ms} if
 /bitmapsave save def
 fMLevel1 {
  colorsetup
  /is im 0 lb getinterval def
  ws 0 lb getinterval is copy pop
  /cf currentfile def
  width height depth [width 0 0 height neg 0 height]
  {ip} {is} {is} true 3 colorimage
 } {
  colorSetup2
  /is im 0 lb getinterval def
  ws 0 lb getinterval is copy pop
  /cf currentfile def
  7 dict dup begin
   /ImageType 1 def
   /Width width def
   /Height height def
   /ImageMatrix [width 0 0 height neg 0 height] def
   /DataSource {ip} bind def
   /BitsPerComponent depth def
   /Decode [0 255] def
  end image
 } ifelse
 bitmapsave restore
 grestore
 } bind def
/BITMAPTRUECOLORc {
 /depth 24 def
        gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /lb width depth wbytes def
 sl lb lt {lb ms} if
 /bitmapsave save def

 /is im 0 lb getinterval def
 /ris im 0 width getinterval def
 /gis im width width getinterval def
 /bis im width 2 mul width getinterval def

 ws 0 lb getinterval is copy pop
 /cf currentfile def
 width height 8 [width 0 0 height neg 0 height]
 {width rip pop ris} {gis} {bis} true 3 colorimage
 bitmapsave restore
 grestore
 } bind def
/BITMAPCMYKc {
 /depth 32 def
        gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /lb width depth wbytes def
 sl lb lt {lb ms} if
 /bitmapsave save def

 /is im 0 lb getinterval def
 /cis im 0 width getinterval def
 /mis im width width getinterval def
 /yis im width 2 mul width getinterval def
 /kis im width 3 mul width getinterval def

 ws 0 lb getinterval is copy pop
 /cf currentfile def
 width height 8 [width 0 0 height neg 0 height]
 {width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
 bitmapsave restore
 grestore
 } bind def
/BITMAPTRUECOLOR {
        gsave

  3 index 2 div add exch
  4 index 2 div add exch
  translate
  rotate
  1 index 2 div neg
  1 index 2 div neg
  translate
  scale
  /height exch def /width exch def
        /bitmapsave save def
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def
        width height 8 [width 0 0 height neg 0 height]
        { cf is readhexstring pop }
        { cf gis readhexstring pop }
        { cf bis readhexstring pop }
        true 3 colorimage
        bitmapsave restore
        grestore
        } bind def
/BITMAPCMYK {
        gsave

  3 index 2 div add exch
  4 index 2 div add exch
  translate
  rotate
  1 index 2 div neg
  1 index 2 div neg
  translate
  scale
  /height exch def /width exch def
        /bitmapsave save def
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def
        width height 8 [width 0 0 height neg 0 height]
        { cf is readhexstring pop }
        { cf mis readhexstring pop }
        { cf yis readhexstring pop }
        { cf kis readhexstring pop }
        true 4 colorimage
        bitmapsave restore
        grestore
        } bind def
/BITMAPTRUEGRAYc {
 /depth 24 def
        gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /lb width depth wbytes def
 sl lb lt {lb ms} if
        /bitmapsave save def

 /is im 0 lb getinterval def
 /ris im 0 width getinterval def
 /gis im width width getinterval def
 /bis im width 2 mul width getinterval def
        ws 0 lb getinterval is copy pop
        /cf currentfile def
        width height 8 [width 0 0 height neg 0 height]
        {width rip pop ris gis bis width gray} image
        bitmapsave restore
        grestore
        } bind def
/BITMAPCMYKGRAYc {
 /depth 32 def
        gsave

 3 index 2 div add exch
 4 index 2 div add exch
 translate
 rotate
 1 index 2 div neg
 1 index 2 div neg
 translate
 scale
 /height exch def /width exch def
 /lb width depth wbytes def
 sl lb lt {lb ms} if
        /bitmapsave save def

 /is im 0 lb getinterval def
 /cis im 0 width getinterval def
 /mis im width width getinterval def
 /yis im width 2 mul width getinterval def
 /kis im width 3 mul width getinterval def
        ws 0 lb getinterval is copy pop
        /cf currentfile def
        width height 8 [width 0 0 height neg 0 height]
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore
        grestore
        } bind def
/cgray {
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
    .144 mul 3 1 roll .587 mul 3 1 roll .299 mul
add add
    c i 3 -1 roll floor cvi put } for
        c
   } bind def
/gray {
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
   b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY {
        gsave

  3 index 2 div add exch
  4 index 2 div add exch
  translate
  rotate
  1 index 2 div neg
  1 index 2 div neg
  translate
  scale
  /height exch def /width exch def
        /bitmapsave save def
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def
        width height 8 [width 0 0 height neg 0 height]
        { cf is readhexstring pop
          cf gis readhexstring pop
          cf bis readhexstring pop width gray}  image
        bitmapsave restore
        grestore
        } bind def
/BITMAPCMYKGRAY {
        gsave

  3 index 2 div add exch
  4 index 2 div add exch
  translate
  rotate
  1 index 2 div neg
  1 index 2 div neg
  translate
  scale
  /height exch def /width exch def
        /bitmapsave save def
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def
        width height 8 [width 0 0 height neg 0 height]
        { cf is readhexstring pop
          cf mis readhexstring pop
          cf yis readhexstring pop
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore
        grestore
        } bind def
/BITMAPGRAY {
 8 {fakecolorsetup} COMMONBITMAP
 } bind def
/BITMAPGRAYc {
 8 {fakecolorsetup} COMMONBITMAPc
 } bind def
/ENDBITMAP {
 } bind def
end
 /ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
 /ALDsave save def
  savematrix
  ALDmatrix setmatrix
 } bind def
/InALD {
  restorematrix
 } bind def
/DoneALD {
  ALDsave restore
 } bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
0 0 0 1 0 0 0 K
(Dynamic Pr) 137.81 560 T
(obe Class Library \050DPCL\051:) 260.69 560 T
(T) 235.32 531 T
(utorial and Refer) 249.12 531 T
(ence Guide) 426 531 T
0 18 Q
(V) 454.81 463 T
(ersion 0.1) 466 463 T
1 12 Q
(June 30, 1998) 473 417 T
(Dr) 440.52 354 T
(. Douglas M. P) 452.52 354 T
(ase) 524.68 354 T
(email:pase@us.ibm.com) 421.62 333 T
(IBM Corporation) 456.34 291 T
(RS/6000 De) 430.81 270 T
(v) 489.52 270 T
(elopment) 495.34 270 T
(522 South Road, MS P-963) 407.65 249 T
(Poughk) 385.76 228 T
(eepsie, Ne) 422.32 228 T
(w Y) 472 228 T
(ork 12601) 491 228 T
0 F
(Copyright 1998 by IBM Cor) 385.12 186 T
(p.) 530.33 186 T
(Draft Document) 456.36 165 T
1 10 Q
(Special Notices) 88 722.08 T
-0.27 (IBM may ha) 88 698.08 P
-0.27 (v) 137.82 698.08 P
-0.27 (e patents or pending patent applications co) 142.67 698.08 P
-0.27 (v) 311.45 698.08 P
-0.27 (ering subject matter in this document. The furnishing of) 316.3 698.08 P
(this document does not gi) 88 686.08 T
(v) 190.53 686.08 T
(e you an) 195.38 686.08 T
(y license to these patents.) 229.11 686.08 T
(The information contained in this document is distrib) 88 662.08 T
(uted AS IS. Accordingly) 300.85 662.08 T
(, the use of this information or the) 399.08 662.08 T
-0.29 (implementation of an) 88 650.08 P
-0.29 (y techniques described herein or an) 172.83 650.08 P
-0.29 (y attempt to adapt these techniques to your o) 312.59 650.08 P
-0.29 (wn products) 488.91 650.08 P
(is done at your o) 88 638.08 T
(wn risk.) 154.41 638.08 T
(This document contains information relating to technology that is still under
de) 88 614.08 T
(v) 404.68 614.08 T
(elopment. IBM may or may not) 409.53 614.08 T
(decide to incorporate some or all of the information contained herein into
future IBM products.) 88 602.08 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
72 726.98 558 726.98 2 L
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
2 9 Q
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(pubsTOC.doc) 360.5 45.99 T
(iii) 550.49 45.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 87.98 558 686.02 R
7 X
V
0 18 Q
0 X
(T) 238.33 674.02 T
(able of Contents) 248.68 674.02 T
0 0 0 1 0 0 0 K
1 12 Q
(1.0 About DPCL) 54 642.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . .) 141 642.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 462 642.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   1.1 Why DPCL Is Interesting) 54 628.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . .) 207 628.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 462 628.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   1.2 DPCL Concepts and Components) 54 614.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249
614.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 462 614.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   1.3 DPCL Features) 54 600.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . .) 159 600.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 462 600.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.0 Introduction to DPCL Concepts) 54 586.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
228 586.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 456 586.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.1 Asynchronous Programming) 54 572.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
225 572.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 456 572.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.1.1 Callbacks) 54 558.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . .) 150 558.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 456 558.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.1.2 Event Recognition and Dispatch) 54 544.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 544.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 456 544.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.1.3 Asynchronous and Semi-Asynchronous Programming) 54 530.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . .) 363 530.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 456 530.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.2 Setting Up a Tool to Use DPCL) 54 516.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240
516.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 456 516.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.3 Application and Process Management) 54 502.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 502.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 456 502.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.3.1 Working with Single-Process Programs) 54 488.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 294 488.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 456 488.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.1.1 Create a Process Class Object) 54 474.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 264 474.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 456 474.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.1.2 Connect to a Running Process) 54 460.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 460.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 456 460.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.1.3 Disconnect from a Running Process) 54 446.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 294 446.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 456 446.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.3.2 Working with Multiple-Process Programs) 54 432.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . .) 303 432.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 456 432.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.2.1 Create an Application Class Object) 54 418.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291 418.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 456 418.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.2.2 Adding and Removing Processes from an Application Class
Object) 54 404.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. .) 444 404.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 456 404.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.2.3 Obtain a Parallel Application Process List) 54 390.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . .) 324 390.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 456 390.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.2.4 Connect to a Running Application) 54 376.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285 376.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 456 376.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.2.5 Disconnect from an Application) 54 362.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 276 362.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 456 362.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.3.3 Creating New Application Programs) 54 348.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 279 348.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 456 348.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.3.1 Create an Application) 54 334.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
228 334.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 456 334.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.3.2 Start a New Application) 54 320.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237
320.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 456 320.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.3.3 Restart an Application) 54 306.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
228 306.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 456 306.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.3.4 Application Control Functions) 54 292.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249
292.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 456 292.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.4.1 Suspend an Application) 54 278.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237
278.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 278.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.4.2 Resume an Application) 54 264.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234
264.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 264.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.4.3 Signal an Application) 54 250.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
225 250.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 250.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.4.4 Attach to an Existing Application) 54 236.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 282 236.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 236.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.4.5 Detach from an Application) 54 222.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 222.02
T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 222.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.4.6 Terminate an Application) 54 208.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246
208.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 208.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.3.5 Application Memory Functions) 54 194.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 194.02
T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 194.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.5.1 Read Application Memory) 54 180.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249
180.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 180.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.5.2 Write Application Memory) 54 166.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252
166.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 166.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.3.6 Application File Operations) 54 152.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237
152.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 152.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.6.1 Remote File Open) 54 138.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. .) 210 138.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 138.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.6.2 Remote File Close) 54 124.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. .) 210 124.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 124.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.6.3 Remote File Read) 54 110.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. .) 207 110.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 110.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.3.6.4 Remote File Write) 54 96.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. .) 210 96.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 96.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
540 726.98 54 726.98 2 L
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
2 9 Q
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(pubsTOC.doc) 360.5 45.99 T
(iv) 550.49 45.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 87.98 558 686.02 R
7 X
V
0 0 0 1 0 0 0 K
1 12 Q
0 X
(         2.3.6.5 Remote File Seek) 54 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. .) 207 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.4 Navigating Application Source Structure) 54 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 282 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.4.1 Obtaining the Program Source Object) 54 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 456 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.4.2 Expanding the Source Structure) 54 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 636.02
T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 456 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.4.3 Selecting and Identifying Instrumentation Points) 54 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . .) 336 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 456 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.4.4 Selecting Application Data) 54 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234
608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 456 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.5 Instrumentation in an Application\325s Instruction Stream) 54 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . .) 348 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 456 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.5.1 Creating a Probe Expression) 54 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240
580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 456 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.5.2 Installing a Probe Expression) 54 566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243
566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 456 566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.5.3 Activating a Probe Expression) 54 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249
552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 456 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.5.4 Deactivating a Probe Expression) 54 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 456 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.5.5 Removing a Probe Expression) 54 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249
524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 456 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.6 Probe Data) 54 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . .) 138 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 456 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.6.1 Persistent Data) 54 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . .) 177 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 456 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.6.2 Temporary Data) 54 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 183 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 456 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.6.3 Probe Data Types) 54 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . .) 189 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 456 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.6.3.1 Creating Data from Built-in Probe Data Types) 54 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . .) 345 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 456 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.7 Passing Messages from Probes to Tools) 54 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 276 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 456 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.7.1 Probe Message Send Function) 54 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249
426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 456 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.7.2 Probe Message Handles) 54 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.) 219 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 456 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.8 Probe Modules) 54 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . .) 159 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.8.1 Loading and Removing Probe Modules) 54 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 294 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.8.2 Probe Module Functions) 54 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
222 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.8.3 Probe Module Data) 54 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . .) 198 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.8.4 Probe Module Data Types) 54 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
231 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(         2.8.4.1 Creating Data from User-Defined Probe Data Types) 54 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . .) 372 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.8.5 Selecting Functions, Data and Data Types in a Module) 54 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . .) 366 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.9 Periodically Activated Instrumentation \050Phases\051) 54 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . .) 315 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.9.1 Phase Functions) 54 286.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 183 286.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 286.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.9.2 Phase Data) 54 272.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . .) 156 272.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 272.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.9.3 Application Signal Handlers) 54 258.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240
258.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 258.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.10 Single Execution Instrumentation \050IRPCs\051) 54 244.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 294 244.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 244.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   2.11 Security) 54 230.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .) 132 230.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 230.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.11.1 Unsecure Authentication) 54 216.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
228 216.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 216.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      2.11.2 DCE Authentication) 54 202.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. .) 207 202.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 456 202.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.0 DAIS for Dummies) 54 188.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . .) 171 188.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 188.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   3.1 Overview of DAIS Programming Tasks) 54 174.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 276 174.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 174.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   3.2 DAIS Programming Tasks) 54 160.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.) 213 160.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 160.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.1 Getting main Started) 54 146.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . .) 204 146.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 146.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.2 Setting Up Callbacks) 54 132.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . .) 204 132.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 132.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.3 Connecting to the Application Process) 54 118.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 288 118.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 118.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.4 Navigating the Source Structure) 54 104.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 104.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 104.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "v" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
72 726.98 558 726.98 2 L
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
2 9 Q
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(pubsTOC.doc) 360.5 45.99 T
(v) 552.99 45.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 87.98 558 686.02 R
7 X
V
0 0 0 1 0 0 0 K
1 12 Q
0 X
(      3.2.5 Selecting Instrumentation Points) 54 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.6 Writing a Simple Probe) 54 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.) 216 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.7 Selecting Application Data) 54 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234
650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.8 Probe Modules) 54 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . .) 177 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.9 Adding a Phase) 54 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . .) 180 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.10 Installing and Activating a Probe) 54 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.11 Gathering the Return Data) 54 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 5
94.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.12 De-activating and Removing a Probe) 54 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 288 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.13 Disconnecting from a Process) 54 566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252
566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.14 Cleaning Up Memory) 54 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.) 216 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.15 Error Handling) 54 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 183 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.2.16 The Complete Simple Program) 54 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   3.3 External Tasks) 54 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . .) 156 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.3.1 Compiling and Linking the Tool) 54 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 456 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.3.2 Compiling and Linking the Application) 54 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 294 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 456 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      3.3.3 Environment Variables) 54 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.) 216 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 456 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.0 Advanced DAIS Programming) 54 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
225 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.1 Asynchronous and Semi-Synchronous Programming) 54 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . .) 339 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.2 Getting main Started) 54 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 186 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.3 Setting Up Callbacks) 54 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 186 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.4 Connecting to the Application Process) 54 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 270 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.5 Navigating the Source Structure) 54 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240
384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.6 Selecting Instrumentation Points) 54 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243
370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.7 Probe Expressions) 54 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . .) 174 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.8 Probe Modules) 54 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . .) 159 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.9 Application Data and Functions) 54 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237
328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.10 Phases) 54 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .) 123 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.11 Installing and Activating a Probe) 54 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249
300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.12 Gathering the Return Data) 54 286.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.) 219 286.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 286.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.13 De-activating and Removing a Probe) 54 272.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 270 272.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 272.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.14 Disconnecting from a Process) 54 258.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234
258.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 258.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.15 Cleaning Up Memory) 54 244.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . .) 198 244.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 244.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.16 Error Handling) 54 230.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . .) 165 230.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 230.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      4.16.1 AisStatus) 54 216.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . .) 156 216.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 456 216.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      4.16.2 Return Codes) 54 202.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . .) 174 202.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 456 202.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      4.16.3 Exceptions) 54 188.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . .) 162 188.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 456 188.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      4.16.4 NLS) 54 174.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .) 132 174.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 456 174.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.17 Scaling and Intrusion) 54 160.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . .) 195 160.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 456 160.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.18 Environment Variables) 54 146.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . .) 204 146.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 456 146.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   4.19 Debug and Diagnostic Data) 54 132.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .)
225 132.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 456 132.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.0 Tool-Building Techniques) 54 118.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . .) 204 118.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 456 118.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   5.1 Tool Components) 54 104.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . .) 171 104.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 456 104.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "v" 5
%%Page: "vi" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
540 726.98 54 726.98 2 L
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
2 9 Q
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(pubsTOC.doc) 360.5 45.99 T
(vi) 550.49 45.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 87.98 558 686.02 R
7 X
V
0 0 0 1 0 0 0 K
1 12 Q
0 X
(      5.1.1 Simple Event Tracing) 54 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. .) 210 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 456 678.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.2 Simple Pass Counter) 54 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . .) 204 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 456 664.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.3 Timers) 54 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . .) 138 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 456 650.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.4 Multiple Uses of a Single Timer) 54 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 456 636.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.5 Multiple Timers) 54 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 183 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 456 622.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.6 Predicate Example) 54 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . .) 195 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 456 608.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.7 Argument Example) 54 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . .) 198 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 456 594.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.8 General Event Tracing with Parameters and Structures) 54 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . .) 366 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 456 580.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.9 Return Values) 54 566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . .) 171 566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 456 566.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      5.1.10 Gaining Access to Application Variables) 54 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . .) 306 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 456 552.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   5.2 Simple Tools) 54 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . .) 150 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 456 538.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.0 How DAIS Works) 54 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . .) 165 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 456 524.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   6.1 Process Connection and Control) 54 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240
510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 456 510.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   6.2 Source Structure and Instrumentation Points) 54 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 297 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 456 496.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   6.3 Instrumentation in an Application\325s Instruction Stream) 54 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . .) 348 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 456 482.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.3.1 Probe Data) 54 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . .) 156 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 456 468.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.3.2 Probe Data Types) 54 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . .) 189 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 456 454.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.3.3 Probe Expressions) 54 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . .) 192 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 456 440.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.3.4 Message Passing) 54 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 186 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 456 426.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.3.5 Probe Modules) 54 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . .) 177 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 456 412.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   6.4 Periodically Activated Instrumentation \050Phases\051) 54 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . .) 315 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 456 398.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.4.1 Phase Functions) 54 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . .) 183 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 456 384.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.4.2 Phase Data) 54 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . .) 156 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 456 370.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(      6.4.3 Application Signal Handlers) 54 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240
356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 456 356.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   6.5 Single Execution Instrumentation \050IRPCs\051) 54 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 288 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 456 342.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   6.6 Security) 54 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .) 126 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 456 328.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Glossary) 54 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .) 99 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 69) 453 314.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Index) 54 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . .) 84 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 73) 453 300.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vi" 6
%%Page: "1" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(1) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
54 666.99 558 670.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 670.02 486 670.02 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 16 Q
0 X
0 0 0 1 0 0 0 K
(1.0) 72 675.35 T
( About DPCL) 92 675.35 T
89.5 636.26 72 636.26 2 L
V
0.7 H
0 Z
N
89.5 648.87 72 648.87 2 L
V
N
0 14 Q
(1.1) 72 637.66 T
114.78 636.26 89.5 636.26 2 L
V
N
114.78 648.87 89.5 648.87 2 L
V
N
( Wh) 89.5 637.66 T
125.07 636.26 114.57 636.26 2 L
V
N
125.07 648.87 114.57 648.87 2 L
V
N
(y) 114.57 637.66 T
168.63 636.06 125.07 636.06 2 L
V
0.8 H
N
168.63 650.48 125.07 650.48 2 L
V
N
0 16 Q
(DPCL) 125.07 637.66 T
216.84 636.26 168.63 636.26 2 L
V
0.7 H
N
216.84 648.87 168.63 648.87 2 L
V
N
0 14 Q
( Is Inter) 168.63 637.66 T
251.59 636.26 216.59 636.26 2 L
V
N
251.59 648.87 216.59 648.87 2 L
V
N
(esting) 216.59 637.66 T
1 12 Q
(DPCL is an application program interf) 72 618.99 T
(ace \050API\051 for installing instrumentation into and remo) 256.86 618.99 T
(ving) 515.65 618.99 T
(instrumentation from a serial or parallel program as the program is running.
DPCL instrumentation) 72 604.99 T
-0.28 (may measure e) 72 590.99 P
-0.28 (x) 143.24 590.99 P
-0.28 (ecution time for performance tools, pass counts for test co) 149.06
590.99 P
-0.28 (v) 424.99 590.99 P
-0.28 (erage tools, report or mod-) 430.81 590.99 P
(ify the contents of v) 72 576.99 T
(ariables for deb) 167.69 576.99 T
(uggers, and man) 242.09 576.99 T
(y other things. Instrumentation is de\336ned by the) 320.89 576.99 T
(tool b) 72 562.99 T
(uilder and therefore has unlimited \337e) 99.43 562.99 T
(xibility) 276.89 562.99 T
(. Instrumentation is placed in the application) 310.79 562.99 T
(dynamically) 72 548.99 T
(, as it is needed, and remo) 130.55 548.99 T
(v) 255.01 548.99 T
(ed when it is no longer desirable. This k) 260.83 548.99 T
(eeps the cost of g) 453.02 548.99 T
(ath-) 536.28 548.99 T
(ering data quite lo) 72 534.99 T
(w) 158.69 534.99 T
(, e) 166.57 534.99 T
(v) 177.6 534.99 T
(en on long running and highly parallel jobs. DPCL is designed to:) 183.42
534.99 T
3 7 Q
(\267) 117 513.99 T
1 12 Q
(reduce the cost of de) 130.54 513.99 T
(v) 229.54 513.99 T
(eloping ne) 235.36 513.99 T
(w programming tools) 285.38 513.99 T
3 7 Q
(\267) 117 495.99 T
1 12 Q
(reduce the intrusion cost of instrumentation) 130.54 495.99 T
3 7 Q
(\267) 117 477.99 T
1 12 Q
(increase the \337e) 130.54 477.99 T
(xibility and usability of tools) 202.33 477.99 T
3 7 Q
(\267) 117 459.99 T
1 12 Q
(increase interoperability among tools) 130.54 459.99 T
3 7 Q
(\267) 117 441.99 T
1 12 Q
(increase inno) 130.54 441.99 T
(v) 194 441.99 T
(ation in tool de) 199.7 441.99 T
(v) 271.74 441.99 T
(elopment) 277.56 441.99 T
3 7 Q
(\267) 117 423.99 T
1 12 Q
(increase the number and v) 130.54 423.99 T
(ariety of a) 256.2 423.99 T
(v) 304.61 423.99 T
(ailable programming tools.) 310.31 423.99 T
3 7 Q
(\267) 117 405.99 T
1 12 Q
(pro) 130.54 405.99 T
(vide a mechanism for creating common tools across the industry) 146.35 405.99 T
(DPCL is designed to tak) 72 384.99 T
(e adv) 189.22 384.99 T
(antage of dynamic instrumentation technology originally de) 214.57 384.99 T
(v) 501.58 384.99 T
(eloped) 507.4 384.99 T
-0.26 (under Bart Miller at the Uni) 72 370.99 P
-0.26 (v) 204.69 370.99 P
-0.26 (ersity of W) 210.51 370.99 P
-0.26 (isconsin, Madison, by Jef) 263.49 370.99 P
-0.26 (f Hollingsw) 384.72 370.99 P
-0.26 (orth, who is currently at) 441.34 370.99 P
(the Uni) 72 356.99 T
(v) 107.36 356.99 T
(ersity of Maryland. The API allo) 113.18 356.99 T
(ws a tool b) 270.19 356.99 T
(uilt on DPCL to insert data, functions, and code) 322.28 356.99 T
(patches into a program while it is running. Code patches, or probes, can
collect and report perfor-) 72 342.99 T
(mance information, program state, or modify the program e) 72 328.99 T
(x) 357.77 328.99 T
(ecution.) 363.59 328.99 T
(The original moti) 72 307.99 T
(v) 155.7 307.99 T
(ation for DPCL came from the observ) 161.4 307.99 T
(ation that customers were often asking for) 343.07 307.99 T
(more application performance analysis tools than the v) 72 293.99 T
(arious tool suppliers had resources to b) 334.66 293.99 T
(uild.) 521.72 293.99 T
(High performance application de) 72 279.99 T
(v) 229.99 279.99 T
(elopers were asking for tools that w) 235.81 279.99 T
(ould pro) 406.99 279.99 T
(vide detailed, accurate) 447.14 279.99 T
(information about disk usage, cache and other memory usage, CPU and functional
unit usage, mes-) 72 265.99 T
(sage passing and synchronization, and operating system interference with
achie) 72 251.99 T
(ving high perfor-) 452.95 251.99 T
(mance. Furthermore, the) 72 237.99 T
(y were asking for application pro\336les to determine what problems were)
189.79 237.99 T
(occurring \050problem determination\051, and traces to determine what w) 72
223.99 T
(as causing observ) 394.14 223.99 T
(ed problems) 478.61 223.99 T
(\050root cause analysis\051.) 72 209.99 T
-0.25 (As DPCL de) 72 188.99 P
-0.25 (v) 132.53 188.99 P
-0.25 (elopment became better kno) 138.35 188.99 P
-0.25 (wn, other uses for this technology be) 272.93 188.99 P
-0.25 (g) 448.22 188.99 P
-0.25 (an to surf) 454.16 188.99 P
-0.25 (ace. In addi-) 498.86 188.99 P
-0.32 (tion to performance analysis tools, other potential tools were
identi\336ed as candidates for de) 72 174.99 P
-0.32 (v) 504.83 174.99 P
-0.32 (elopment) 510.65 174.99 P
(under DPCL. Among them are correctness deb) 72 160.99 T
(uggers, memory deb) 296.71 160.99 T
(uggers, relati) 394.79 160.99 T
(v) 457.14 160.99 T
(e deb) 462.96 160.99 T
(uggers, hard-) 488.38 160.99 T
(w) 72 146.99 T
(are performance monitors, test co) 80.54 146.99 T
(v) 241.32 146.99 T
(erage tools, Reliability/A) 247.14 146.99 T
(v) 367.25 146.99 T
(ailability/Serviceability support tools,) 372.95 146.99 T
(application steering tools, dynamic load balancing tools, and more.) 72 132.99
T
(One of the major costs of de) 72 111.99 T
(v) 207.67 111.99 T
(eloping ne) 213.49 111.99 T
(w tools is in de) 263.52 111.99 T
(v) 335.89 111.99 T
(eloping its instrumentation. Some e) 341.71 111.99 T
(xamples) 511.87 111.99 T
-0.19 (of the types of instrumentation are: manually inserted and compiler
generated instrumentation, instru-) 72 97.99 P
FMENDPAGE
%%EndPage: "1" 7
%%Page: "2" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(2) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(mentation of object \336les, instrumentation at load time, instrumented
libraries, and dynamic instru-) 72 678.02 T
-0.46 (mentation. The speci\336c cost of de) 72 664.02 P
-0.46 (v) 231.36 664.02 P
-0.46 (eloping the instrumentation depends on the type of instrumentation)
237.18 664.02 P
(chosen and has to be played ag) 72 650.02 T
(ainst the user ef) 220.57 650.02 T
(fort required to use the tool. Each dif) 295.92 650.02 T
(ferent type of) 472.92 650.02 T
-0.08 (instrumentation also carries its o) 72 636.02 P
-0.08 (wn impact on the accurac) 227.37 636.02 P
-0.08 (y and precision of g) 349.5 636.02 P
-0.08 (athered data, as well as) 444.43 636.02 P
(the \337e) 72 622.02 T
(xibility with which the data can be g) 101.48 622.02 T
(athered. Dynamic instrumentation allo) 276.41 622.02 T
(ws the greatest \337e) 460.75 622.02 T
(x-) 546.89 622.02 T
(ibility in g) 72 608.02 T
(athering data, which can be used to focus attention on speci\336c items of
interest, increase) 121.96 608.02 T
-0.13 (accurac) 72 594.02 P
-0.13 (y by reducing interference caused by g) 108.46 594.02 P
-0.13 (athering unw) 293.56 594.02 P
-0.13 (anted data, or increase con) 356.3 594.02 P
-0.13 (v) 482.92 594.02 P
-0.13 (enience to the) 488.74 594.02 P
(user by delaying the decision point for instrumentation until run-time.) 72
580.02 T
-0.21 (W) 72 559.02 P
-0.21 (ith dynamic instrumentation the instrumentation code need only reside in
the application as long as) 82.85 559.02 P
(it is needed to g) 72 545.02 T
(ather data. When a problem is suspected the instrumentation can be inserted
into the) 147.94 545.02 T
-0.05 (application to g) 72 531.02 P
-0.05 (ather data needed to v) 146.49 531.02 P
-0.05 (erify the problem. Once the problem is v) 251.39 531.02 P
-0.05 (eri\336ed the instrumenta-) 446.13 531.02 P
(tion can be replaced with more detailed instrumentation to establish the cause
of the problem. If the) 72 517.02 T
(initial guess turns out to be incorrect, the original instrumentation can be
replaced with ne) 72 503.02 T
(w instru-) 502.64 503.02 T
(mentation that e) 72 489.02 T
(xamines other possible causes.) 149.15 489.02 T
(Since the goal is to create a v) 72 468.02 T
(ariety of tools that are ine) 212 468.02 T
(xpensi) 334.8 468.02 T
(v) 365.83 468.02 T
(e as well as \337e) 371.65 468.02 T
(xible, it is important to) 441.46 468.02 T
-0.19 (address the cost of tool creation. The e) 72 454.02 P
-0.19 (xact fraction of the cost will v) 255.77 454.02 P
-0.19 (ary from one tool to the ne) 398.3 454.02 P
-0.19 (xt, b) 524.95 454.02 P
-0.19 (ut) 545.85 454.02 P
(in man) 72 440.02 T
(y cases the direct and indirect costs of writing instrumentation softw) 104.82
440.02 T
(are dominates the cost of) 432.66 440.02 T
(the tool. Whether the instrumentation is part of the compiler) 72 426.02 T
(, the link) 360.16 426.02 T
(er) 402.37 426.02 T
(, or a library of subroutines,) 411.22 426.02 T
(writing the instrumentation package often requires substantial communication,
coordination, and) 72 412.02 T
(cooperation across de) 72 398.02 T
(v) 175.67 398.02 T
(elopment groups, which can be e) 181.49 398.02 T
(xpensi) 339.28 398.02 T
(v) 370.31 398.02 T
(e. If a w) 376.13 398.02 T
(ay is pro) 415.32 398.02 T
(vided that allo) 456.47 398.02 T
(ws) 524.83 398.02 T
-0.34 (lar) 72 384.02 P
-0.34 (ge portions of the instrumentation system to be reused, the cost of
writing instrumentation could be) 84.44 384.02 P
(reduced.) 72 370.02 T
(DPCL pro) 72 349.02 T
(vides a general purpose infrastructure that \337e) 121.49 349.02 T
(xibly supports the generation of arbitrary) 337.92 349.02 T
(instrumentation. It is capable of instrumenting serial, shared memory) 72
335.02 T
(, and message passing applica-) 402.52 335.02 T
-0.24 (tions. Based on dynamic instrumentation it requires only the information
usually found in an) 72 321.02 P
4 F
-0.58 (a.out) 516.24 321.02 P
1 F
-0.24 (.) 552.24 321.02 P
(Once the infrastructure is in place, the cost of writing instrumentation for
an indi) 72 307.02 T
(vidual tool is a tin) 458.98 307.02 T
(y) 545.47 307.02 T
(fraction of the cost of writing tool instrumentation from scratch. Because the
infrastructure pro) 72 293.02 T
(vides) 526.4 293.02 T
(general programming f) 72 279.02 T
(acilities for writing instrumentation the system can be used for a wide v)
182.52 279.02 T
(ariety) 526.18 279.02 T
-0.09 (of tools and uses. DPCL is e) 72 265.02 P
-0.09 (xpected to be used for de) 207.58 265.02 P
-0.09 (v) 327.1 265.02 P
-0.09 (eloping se) 332.92 265.02 P
-0.09 (v) 381.52 265.02 P
-0.09 (eral application performance analy-) 387.35 265.02 P
-0.12 (sis tools, correctness deb) 72 251.02 P
-0.12 (uggers, memory deb) 190.71 251.02 P
-0.12 (uggers, application steering tools, and man) 288.53 251.02 P
-0.12 (y other types) 493.38 251.02 P
(of tools.) 72 237.02 T
-0.31 (DPCL is also important in a dif) 72 216.02 P
-0.31 (ferent sense -- it pro) 220.49 216.02 P
-0.31 (vides an abstract layer for tool de) 315.68 216.02 P
-0.31 (v) 473.45 216.02 P
-0.31 (elopment that is) 479.27 216.02 P
-0.39 (machine independent. This means DPCL can mak) 72 202.02 P
-0.39 (e it possible for tools to be truly a) 309.85 202.02 P
-0.39 (v) 467.82 202.02 P
-0.39 (ailable across the) 473.52 202.02 P
(industry) 72 188.02 T
(. Major ef) 110.56 188.02 T
(forts, such as the PT) 157.91 188.02 T
(ools F) 254.6 188.02 T
(orum and HPDF) 284.1 188.02 T
(, are under w) 362.47 188.02 T
(ay to standardize a) 424.99 188.02 T
(v) 514.39 188.02 T
(ailable) 520.09 188.02 T
(programming tools across the industry) 72 174.02 T
(. By de\336ning standard tools and interf) 255.88 174.02 T
(aces these or) 437.41 174.02 T
(g) 498.5 174.02 T
(anizations) 504.44 174.02 T
-0.22 (hope to mak) 72 160.02 P
-0.22 (e the transition from one v) 130.77 160.02 P
-0.22 (ender system to another easier for de) 256.47 160.02 P
-0.22 (v) 431.47 160.02 P
-0.22 (elopers, especially de) 437.29 160.02 P
-0.22 (v) 539.52 160.02 P
-0.22 (el-) 545.34 160.02 P
-0.44 (opers that must concurrently de) 72 146.02 P
-0.44 (v) 221.25 146.02 P
-0.44 (elop and maintain softw) 227.07 146.02 P
-0.44 (are for multiple v) 341.29 146.02 P
-0.44 (ender machines. Progress is) 423.45 146.02 P
-0.16 (slo) 72 132.02 P
-0.16 (w) 85.7 132.02 P
-0.16 (, ho) 93.59 132.02 P
-0.16 (we) 111.13 132.02 P
-0.16 (v) 124.82 132.02 P
-0.16 (er) 130.64 132.02 P
-0.16 (, in part because each v) 139.48 132.02 P
-0.16 (ender must pro) 250.46 132.02 P
-0.16 (vide their o) 321.94 132.02 P
-0.16 (wn implementation of the tool. These) 375.98 132.02 P
(ef) 72 118.02 T
(forts sho) 81.02 118.02 T
(w there is a strong desire within the industry) 122.39 118.02 T
(, among labs, customers and some hardw) 334.92 118.02 T
(are) 532.1 118.02 T
(v) 72 104.02 T
(enders themselv) 77.82 104.02 T
(es, to pro) 155.29 104.02 T
(vide a common set of tools across the industry) 199.44 104.02 T
(.) 421.31 104.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 8
%%Page: "3" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(3) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.36 (Making tools a) 72 678.02 P
-0.36 (v) 143.04 678.02 P
-0.36 (ailable across multiple platforms is generally a huge undertaking. The
use of standard) 148.74 678.02 P
(languages and graphic interf) 72 664.02 T
(ace libraries reduces the required ef) 208.18 664.02 T
(fort considerably) 378.8 664.02 T
(. Building the tools) 459.67 664.02 T
(on top of DPCL reduces that ef) 72 650.02 T
(fort further) 221.68 650.02 T
(. Once DPCL is a) 274 650.02 T
(v) 358.08 650.02 T
(ailable on a gi) 363.78 650.02 T
(v) 431.14 650.02 T
(en platform, completing) 436.96 650.02 T
(the port of instrumentation is relati) 72 636.02 T
(v) 238.69 636.02 T
(ely simple. The cost of porting DPCL to the ne) 244.51 636.02 T
(w machine can) 469.54 636.02 T
(also be amortized o) 72 622.02 T
(v) 165.47 622.02 T
(er man) 171.29 622.02 T
(y tools. Thus DPCL can pro) 204.1 622.02 T
(vide a lo) 338.58 622.02 T
(w cost means for making a wider) 379.61 622.02 T
(v) 72 608.02 T
(ariety of tools a) 77.7 608.02 T
(v) 152.45 608.02 T
(ailable across the industry) 158.15 608.02 T
(.) 282.35 608.02 T
-0.44 (Easy porting of tools to multiple platforms pro) 72 587.02 P
-0.44 (vides additional bene\336ts. When the cost is lo) 292.4 587.02 P
-0.44 (w to create) 503.68 587.02 P
(and maintain tools across multiple platforms, ISVs ha) 72 573.02 T
(v) 329.75 573.02 T
(e moti) 335.57 573.02 T
(v) 365.6 573.02 T
(ation to support a wider v) 371.3 573.02 T
(ariety of) 493.99 573.02 T
(de) 72 559.02 T
(v) 83.03 559.02 T
(elopment and support tools across those platforms. This reduces the de) 88.85
559.02 T
(v) 428.17 559.02 T
(elopment costs that must) 433.99 559.02 T
(be shouldered by hardw) 72 545.02 T
(are v) 186.85 545.02 T
(enders while simultaneously making the v) 210.32 545.02 T
(enders\325 machines more attrac-) 412.46 545.02 T
(ti) 72 531.02 T
(v) 78.37 531.02 T
(e.) 84.19 531.02 T
(The reduced cost of de) 72 510.02 T
(v) 181 510.02 T
(eloping tools also translates into greater inno) 186.82 510.02 T
(v) 401.95 510.02 T
(ation. The le) 407.65 510.02 T
(v) 467.68 510.02 T
(el of ef) 473.5 510.02 T
(fort and) 507.18 510.02 T
-0.09 (e) 72 496.02 P
-0.09 (xpertise is reduced, which allo) 77.15 496.02 P
-0.09 (ws uni) 222.78 496.02 P
-0.09 (v) 254.05 496.02 P
-0.09 (ersities and labs to e) 259.87 496.02 P
-0.09 (xperiment with more speculati) 356.64 496.02 P
-0.09 (v) 502.38 496.02 P
-0.09 (e analysis) 508.2 496.02 P
-0.21 (techniques and tools ideas while maintaining a limited b) 72 482.02 P
-0.21 (udget. Relati) 340.08 482.02 P
-0.21 (v) 400.9 482.02 P
-0.21 (ely small in) 406.72 482.02 P
-0.21 (v) 461.82 482.02 P
-0.21 (estment in a proof-) 467.64 482.02 P
(of-concept prototype is required to determine whether the idea has v) 72
468.02 T
(alidity before in) 399.62 468.02 T
(v) 475.8 468.02 T
(esting signi\336-) 481.62 468.02 T
(cant ef) 72 454.02 T
(fort in full scale tool de) 104.02 454.02 T
(v) 216.04 454.02 T
(elopment. When the cost of de) 221.86 454.02 T
(v) 368.2 454.02 T
(eloping instrumentation is high, the) 374.02 454.02 T
-0.07 (cost of trying out an uncertain idea may be too great. In other w) 72
440.02 P
-0.07 (ords, DPCL can be used as an engine) 376.92 440.02 P
(of inno) 72 426.02 T
(v) 106.15 426.02 T
(ation.) 111.85 426.02 T
89.5 391.28 72 391.28 2 L
V
0.7 H
0 Z
N
89.5 403.9 72 403.9 2 L
V
N
0 14 Q
(1.2) 72 392.68 T
294.84 391.28 89.5 391.28 2 L
V
N
294.84 403.9 89.5 403.9 2 L
V
N
( DPCL Concepts and Components) 89.5 392.68 T
1 12 Q
(Described brie\337y) 72 374.02 T
(, DPCL is implemented as a distrib) 154.2 374.02 T
(uted, asynchronous system, where the end-user) 322.3 374.02 T
(-) 548.34 374.02 T
(tool is a client process that requests services, through library calls, from
special daemons. Daemon) 72 360.02 T
(management is performed by the underlying system and not by the end-user) 72
346.02 T
(-tool. A tool calls mem-) 436.7 346.02 T
-0.42 (ber functions in the DPCL class library to request a desired service.
The library then forms the request) 72 332.02 P
(into a message that is sent to a daemon process. The results of a service
request can be an ackno) 72 318.02 T
(wl-) 532.26 318.02 T
(edgement or ne) 72 304.02 T
(g) 145.8 304.02 T
(ati) 151.74 304.02 T
(v) 163.44 304.02 T
(e ackno) 169.26 304.02 T
(wledgement that the request w) 205.94 304.02 T
(as performed. In some cases, such as) 352.46 304.02 T
(instrumentation \050probe\051 acti) 72 290.02 T
(v) 205.68 290.02 T
(ation, a service request may also result in a stream of data messages) 211.38
290.02 T
(being sent to the client.) 72 276.02 T
(In each case a message is recei) 72 255.02 T
(v) 219.64 255.02 T
(ed by the DPCL message system and transferred as an ar) 225.46 255.02 T
(gument to a) 497.84 255.02 T
-0.49 (callback function. Messages containing system information are processed
by DPCL system callbacks.) 72 241.02 P
(Messages containing positi) 72 227.02 T
(v) 201.7 227.02 T
(e or ne) 207.52 227.02 T
(g) 239.99 227.02 T
(ati) 245.93 227.02 T
(v) 257.63 227.02 T
(e ackno) 263.45 227.02 T
(wledgments are processed by user or system call-) 300.13 227.02 T
(backs, depending on ho) 72 213.02 T
(w the service w) 185.02 213.02 T
(as requested. Messages containing data sent by instrumenta-) 259.87 213.02 T
(tion probes are processed by user data callbacks.) 72 199.02 T
(Systems that rely on processing e) 72 178.02 T
(v) 232.02 178.02 T
(ents with callback functions are called) 237.84 178.02 T
5 F
(async) 424.46 178.02 T
(hr) 451.61 178.02 T
(onous systems.) 461.74 178.02 T
1 F
( In) 533.06 178.02 T
(DPCL the e) 72 164.02 T
(v) 128.36 164.02 T
(ents to be processed are messages recei) 134.18 164.02 T
(v) 322.49 164.02 T
(ed from a daemon. Asynchronous systems are) 328.31 164.02 T
(often used in client/serv) 72 150.02 T
(er applications. DPCL clients are the end-user) 186.8 150.02 T
(-tools b) 407.52 150.02 T
(uilt upon DPCL, while) 443.62 150.02 T
(the daemons are the service pro) 72 136.02 T
(viders or serv) 223.44 136.02 T
(ers. Daemon services include connecting to an applica-) 288.58 136.02 T
(tion process, installing and acti) 72 122.02 T
(v) 220.69 122.02 T
(ating instrumentation, deacti) 226.39 122.02 T
(v) 363.08 122.02 T
(ating and remo) 368.78 122.02 T
(ving instrumentation,) 440.59 122.02 T
(and a host of other services. Service requests may be asynchronous or
pseudo-synchronous. Asyn-) 72 108.02 T
(chronous service requests e) 72 94.02 T
(xplicitly pro) 203.45 94.02 T
(vide user callback functions to process ackno) 262.27 94.02 T
(wledgments.) 479.26 94.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 9
%%Page: "4" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(4) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.4 (The request function returns immediately upon issuing the request and
does not w) 72 678.02 P
-0.4 (ait for the request to) 460.36 678.02 P
(succeed or f) 72 664.02 T
(ail. Pseudo-synchronous service requests are called) 129.85 664.02 T
5 F
(bloc) 378.79 664.02 T
(king) 399.22 664.02 T
1 F
( requests or functions, and) 419.88 664.02 T
(dif) 72 650.02 T
(fer from purely synchronous requests in that the blocking requests do not
return control to the) 85.03 650.02 T
-0.3 (caller until the request has succeeded or f) 72 636.02 P
-0.3 (ailed, and therefore do not require a callback function to pro-) 268.07
636.02 P
(cess the ackno) 72 622.02 T
(wledgement, positi) 141.01 622.02 T
(v) 232.04 622.02 T
(e or ne) 237.86 622.02 T
(g) 270.34 622.02 T
(ati) 276.28 622.02 T
(v) 287.98 622.02 T
(e.) 293.8 622.02 T
(Instrumentation is de\336ned by the end-user) 72 601.02 T
(-tool using a combination of) 274.07 601.02 T
5 F
(pr) 413.06 601.02 T
(obe e) 423.19 601.02 T
(xpr) 448.61 601.02 T
(essions) 464.16 601.02 T
1 F
( and) 498.83 601.02 T
5 F
(pr) 522.16 601.02 T
(obe) 532.28 601.02 T
(modules) 72 587.02 T
1 F
(. Probe e) 112 587.02 T
(xpressions are) 154.14 587.02 T
5 F
(abstr) 225.46 587.02 T
(act syntax tr) 249.95 587.02 T
(ees) 308.83 587.02 T
1 F
( that represent inte) 324.16 587.02 T
(ger v) 412.96 587.02 T
(alues and v) 436.98 587.02 T
(ariables, con-) 490.67 587.02 T
-0.13 (nected by the usual arithmetic, logical, and bit-wise operators. A small
amount of conditional control) 72 573.02 P
(\337o) 72 559.02 T
(w is also supported, as are function calls and some pointer operations. Probe
modules are collec-) 84.37 559.02 T
(tions of functions, written in a standard language such as C and compiled into
object \336les, that are) 72 545.02 T
(loaded into an application and called from within a probe e) 72 531.02 T
(xpression.) 355.1 531.02 T
-0.23 (Source objects, also kno) 72 510.02 P
-0.23 (wn as source trees, are data structures that re\337ect, to some de)
187.65 510.02 P
-0.23 (gree of granular-) 477.84 510.02 P
(ity) 72 496.02 T
(, the structure of the original source code that w) 83.89 496.02 T
(as used to create the e) 313.06 496.02 T
(x) 417.84 496.02 T
(ecutable program. Informa-) 423.66 496.02 T
(tion to construct the source objects is g) 72 482.02 T
(athered from both the e) 258.92 482.02 T
(x) 370.72 482.02 T
(ecutable \336le and the e) 376.54 482.02 T
(x) 481 482.02 T
(ecuting) 486.82 482.02 T
(program image in memory) 72 468.02 T
(. Through the process of compilation, much of the information needed to)
199.54 468.02 T
(construct a detailed source representation is lost. This is especially true
when higher le) 72 454.02 T
(v) 486.96 454.02 T
(els of com-) 492.78 454.02 T
(piler optimization are used, because the) 72 440.02 T
(y use techniques that mo) 261.78 440.02 T
(v) 380.26 440.02 T
(e signi\336cant amounts of code) 386.08 440.02 T
(around. Examples of these techniques are common sub-e) 72 426.02 T
(xpression elimination, remo) 345.1 426.02 T
(v) 479.24 426.02 T
(al of in) 484.94 426.02 T
(v) 518.46 426.02 T
(ariant) 524.16 426.02 T
(code from loops, loop splitting, loop fusion and loop \336ssion.) 72 412.02 T
(Source objects are or) 72 391.02 T
(g) 172.75 391.02 T
(anized much as a compiler or link) 178.69 391.02 T
(er sees a program. The highest le) 341.21 391.02 T
(v) 499.2 391.02 T
(el in the) 505.02 391.02 T
(structure is the program itself. Beneath the program is a collection of
modules, that represent the) 72 377.02 T
(source \336les in the program. W) 72 363.02 T
(ithin each module is a collection of functions and data. The functions) 216.83
363.02 T
(contain data and v) 72 349.02 T
(arious forms of nested blocks and statements. Functions also contain) 159.35
349.02 T
5 F
( instrumenta-) 488.65 349.02 T
(tion) 72 335.02 T
(points) 93.67 335.02 T
1 F
(. Instrumentation points are locations within e) 123.01 335.02 T
(x) 343.15 335.02 T
(ecutable code, within functions, where) 348.97 335.02 T
-0.24 (instrumentation can be placed. Depending on the type of point,
instrumentation may be placed before) 72 321.02 P
-0.14 (the point, or after) 72 307.02 P
-0.14 (, or both. Probe e) 154.43 307.02 P
-0.14 (xpressions are the type of instrumentation that may be placed at an)
236.36 307.02 P
(instrumentation point.) 72 293.02 T
-0.06 (There are tw) 72 272.02 P
-0.06 (o other types of instrumentation that may be emplo) 132.39 272.02 P
-0.06 (yed. The simplest is) 377.07 272.02 P
5 F
-0.06 (one-shot) 475.81 272.02 P
1 F
-0.06 (, or) 517.14 272.02 P
5 F
-0.06 (infe-) 536 272.02 P
(rior r) 72 258.02 T
(emote pr) 97.9 258.02 T
(ocedur) 139.68 258.02 T
(e call) 172.56 258.02 T
1 F
( instrumentation, also kno) 198.89 258.02 T
(wn as IRPCs. IRPCs are e) 323.26 258.02 T
(x) 448.4 258.02 T
(ecuted immediately) 454.22 258.02 T
-0.03 (upon request, whate) 72 244.02 P
-0.03 (v) 167.95 244.02 P
-0.03 (er the application happens to be doing. Upon completion of the IRPC the
instru-) 173.77 244.02 P
(mentation is immediately remo) 72 230.02 T
(v) 221.48 230.02 T
(ed. Probe e) 227.3 230.02 T
(xpressions are the type of instrumentation used with) 280.78 230.02 T
(IRPCs.) 72 216.02 T
(The remaining type of instrumentation is acti) 72 195.02 T
(v) 288.35 195.02 T
(ated periodically) 294.05 195.02 T
(, upon e) 373.58 195.02 T
(xpiration of an interv) 411.73 195.02 T
(al timer) 513.08 195.02 T
(.) 549.42 195.02 T
(This type of instrumentation is called a) 72 181.02 T
5 F
(phase) 262.32 181.02 T
1 F
(. The period of the interv) 290.32 181.02 T
(al timer is set by the end-user) 409.99 181.02 T
(-) 551.06 181.02 T
-0.3 (tool when the phase is created. It may also be changed at a later time.
Phases use functions as the type) 72 167.02 P
-0.2 (of instrumentation e) 72 153.02 P
-0.2 (x) 168.07 153.02 P
-0.2 (ecuted when the phase interv) 173.89 153.02 P
-0.2 (al timer e) 312.07 153.02 P
-0.2 (xpires. The functions to be used are estab-) 356.81 153.02 P
(lished when the phase is created and cannot be changed later) 72 139.02 T
(. Phases are also associated with) 362.59 139.02 T
(instances of probe data.) 72 125.02 T
(When a phase interv) 72 104.02 T
(al timer e) 170 104.02 T
(xpires three functions are e) 215.15 104.02 T
(x) 344.93 104.02 T
(ecuted for the phase. The \336rst function is) 350.75 104.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 10
%%Page: "5" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(5) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(e) 72 678.02 T
(x) 77.15 678.02 T
(ecuted once each time the interv) 82.97 678.02 T
(al timer e) 237.62 678.02 T
(xpires, and can be used to set up an) 282.77 678.02 T
(y information that is) 452.22 678.02 T
(useful to this e) 72 664.02 T
(x) 142.15 664.02 T
(ecution of the phase. This is called the) 147.97 664.02 T
5 F
(phase be) 334.94 664.02 T
(gin function) 376.79 664.02 T
1 F
(. When the phase be) 434.46 664.02 T
(gin) 531.25 664.02 T
(function completes, a second function is e) 72 650.02 T
(x) 273.46 650.02 T
(ecuted once for each piece of probe data associated with) 279.28 650.02 T
-0.23 (the phase. This function is called the) 72 636.02 P
5 F
-0.23 (phase iter) 249.04 636.02 P
-0.23 (ation function) 296.3 636.02 P
1 F
-0.23 (. When the phase iteration function com-) 363.08 636.02 P
-0.26 (pletes for the last piece of data associated with the phase, a) 72
622.02 P
5 F
-0.26 (phase end function) 354.48 622.02 P
1 F
-0.26 ( is e) 444.61 622.02 P
-0.26 (x) 463.24 622.02 P
-0.26 (ecuted to clean up) 469.07 622.02 P
(an) 72 608.02 T
(y details that might be needed.) 83.15 608.02 T
(Instrumentation may communicate with the client tool by e) 72 587.02 T
(xplicitly sending messages. Messages are) 355.8 587.02 T
(treated as unstructured byte streams, the format of which is to be interpreted
and understood by the) 72 573.02 T
-0.07 (end-user) 72 559.02 P
-0.07 (-tool. DPCL does not understand the contents of the message. Each piece
of instrumentation) 113.08 559.02 P
(has a unique callback to recei) 72 545.02 T
(v) 213.32 545.02 T
(e data. In order to send a message a probe must be able to specify the) 219.14
545.02 T
(callback and client to whom the message is intended. This information is
contained in the) 72 531.02 T
5 F
(messa) 504.62 531.02 T
(g) 533.83 531.02 T
(e) 539.71 531.02 T
(handle) 72 517.02 T
1 F
(. The message handle is an opaque data object, stored with the instrumentation
in the applica-) 104.66 517.02 T
-0.06 (tion process, that contains the information necessary to direct a
message to the correct client and call-) 72 503.02 P
(back function for the message.) 72 489.02 T
(A typical sequence of operations a tool might use is:) 72 468.02 T
2 9 Q
(1.) 117 447.02 T
1 12 Q
(connect to the process or application,) 130.54 447.02 T
2 9 Q
(2.) 117 429.02 T
1 12 Q
(e) 130.54 429.02 T
(xpand the source tree,) 135.68 429.02 T
2 9 Q
(3.) 117 411.02 T
1 12 Q
(\336nd the locations where instrumentation is desired,) 130.54 411.02 T
2 9 Q
(4.) 117 393.02 T
1 12 Q
(set up an) 130.54 393.02 T
(y phases if the) 173.02 393.02 T
(y are to be used,) 241.82 393.02 T
2 9 Q
(5.) 117 375.02 T
1 12 Q
(allocate data storage for the instrumentation data,) 130.54 375.02 T
2 9 Q
(6.) 117 357.02 T
1 12 Q
(install and acti) 130.54 357.02 T
(v) 200.23 357.02 T
(ate the instrumentation,) 205.93 357.02 T
2 9 Q
(7.) 117 339.02 T
1 12 Q
(g) 130.54 339.02 T
(ather the data and process it using data callback functions,) 136.48 339.02 T
2 9 Q
(8.) 117 321.02 T
1 12 Q
(remo) 130.54 321.02 T
(v) 155.02 321.02 T
(e the data and instrumentation,) 160.84 321.02 T
2 9 Q
(9.) 117 303.02 T
1 12 Q
(and \336nally) 130.54 303.02 T
(, disconnect from the application.) 180.76 303.02 T
89.5 268.28 72 268.28 2 L
V
0.7 H
0 Z
N
89.5 280.9 72 280.9 2 L
V
N
0 14 Q
(1.3) 72 269.68 T
143.16 268.28 89.5 268.28 2 L
V
N
143.16 280.9 89.5 280.9 2 L
V
N
( DPCL F) 89.5 269.68 T
174.69 268.28 142.81 268.28 2 L
V
N
174.69 280.9 142.81 280.9 2 L
V
N
(eatur) 142.81 269.68 T
186.1 268.28 174.44 268.28 2 L
V
N
186.1 280.9 174.44 280.9 2 L
V
N
(es) 174.44 269.68 T
1 12 Q
(End-user) 72 251.02 T
(-tools b) 115.08 251.02 T
(uilt upon DPCL are able to instrument applications that use a v) 151.18 251.02
T
(ariety of serial and) 453.19 251.02 T
-0.12 (parallel programming models. The simplest connection is to a serial
application, and w) 72 237.02 P
-0.12 (orks as sho) 487.68 237.02 P
-0.12 (wn) 540.46 237.02 P
(in Figure 1 on page 6. The end-user) 72 223.02 T
(-tool establishes a connection to the tar) 243.06 223.02 T
(get application process) 430.15 223.02 T
-0.32 (through a daemon. The daemon resides on the same machine as the tar) 72
209.02 P
-0.32 (get process, and is able to hook) 406.91 209.02 P
(up to it lik) 72 195.02 T
(e a deb) 121.56 195.02 T
(ugger) 155.3 195.02 T
(. Once the connection is established, the tool may send its requests to the
dae-) 181.97 195.02 T
(mon, who acts on those requests.) 72 181.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 11
%%Page: "6" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(6) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
54 672.98 558 686.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 680.04 108 680.04 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  1) 54 666.98 T
1 F
(A T) 117 666.98 T
(ool Connects to a Program through a Daemon) 130.53 666.98 T
1 12 Q
-0.1 (Daemons are independent processes that act in behalf of a client process.
DPCL daemons are not per-) 72 538.02 P
-0.24 (sistent, in the sense that the) 72 524.02 P
-0.24 (y do not e) 201.96 524.02 P
-0.24 (xist when there is no connection to be maintained. The) 248.73 524.02 P
-0.24 (y must be) 509.04 524.02 P
(created at times when connections are established. Ho) 72 510.02 T
(we) 330.97 510.02 T
(v) 344.66 510.02 T
(er) 350.48 510.02 T
(, daemons are shared in the sense that) 359.33 510.02 T
(when multiple clients wish to connect to the same application, the) 72 496.02 T
(y do so by connecting through the) 388.13 496.02 T
-0 (same daemon. A single daemon may also serv) 72 482.02 P
-0 (e as an agent in connecting to multiple application pro-) 293.75 482.02 P
(cesses. This coordination is managed through the use of a) 72 468.02 T
5 F
(super daemon) 351.62 468.02 T
1 F
(, or a daemon that creates) 419.28 468.02 T
(other daemons.) 72 454.02 T
-0.25 (When a client wishes to create a connection to a process on a gi) 72
433.02 P
-0.25 (v) 374 433.02 P
-0.25 (en serv) 379.82 433.02 P
-0.25 (er) 413.71 433.02 P
-0.25 (, the DPCL library creates a) 422.55 433.02 P
(super daemon on the serv) 72 419.02 T
(er) 194.46 419.02 T
(. This is illustrated in Figure 2 on page 6. The ne) 203.12 419.02 T
(w super daemon checks) 436.48 419.02 T
-0.21 (for the e) 72 405.02 P
-0.21 (xistence of other super daemons on the serv) 111.38 405.02 P
-0.21 (er) 320 405.02 P
-0.21 (. If an older super daemon e) 328.66 405.02 P
-0.21 (xists, the ne) 461.49 405.02 P
-0.21 (w super) 517.77 405.02 P
-0.25 (daemon transfers the connection between the ne) 72 391.02 P
-0.25 (w super daemon and the client o) 300.81 391.02 P
-0.25 (v) 454.45 391.02 P
-0.25 (er to the older super) 460.27 391.02 P
(daemon and e) 72 377.02 T
(xits. The remaining super daemon then decides whether to use a ne) 138.47
377.02 T
(w daemon or an) 460.1 377.02 T
-0.22 (e) 72 363.02 P
-0.22 (xisting one. If a ne) 77.15 363.02 P
-0.22 (w daemon is to be used, it creates the ne) 165.64 363.02 P
-0.22 (w daemon and transfers the client connec-) 356.69 363.02 P
(tion to the ne) 72 349.02 T
(w daemon. Otherwise it transfers the client connection to an e) 134.7 349.02 T
(xisting daemon. The deci-) 431.46 349.02 T
(sion to create a ne) 72 335.02 T
(w daemon or use an e) 158.34 335.02 T
(xisting one is based on issues of security as well as whether) 262.46 335.02 T
(other daemons currently e) 72 321.02 T
(xist.) 196.79 321.02 T
54 289.99 558 303.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 297.05 540 297.05 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 297.05 108 297.05 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  2) 54 283.99 T
1 F
(Connections to Daemons Are Made through Super Daemons) 117 283.99 T
54 87.98 558 686.02 C
72.69 553.02 539.31 663.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
325.79 569.5 385.8 605.68 18 RR
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 10 Q
(Daemon) 338.02 584.21 T
243.7 633.54 125.21 633.54 2 L
V
0.9 H
N
0 18 Q
(Client Machine) 125.21 635.35 T
371.23 633.54 345.23 633.54 2 L
V
N
(Ser) 345.23 635.35 T
380.05 633.54 371.05 633.54 2 L
V
N
(v) 371.05 635.35 T
467.35 633.54 379.87 633.54 2 L
V
N
(er Machine) 379.87 635.35 T
225.7 587.73 225.69 584.76 215.32 587.74 225.7 590.71 4 Y
0.5 H
N
225.7 587.73 225.69 584.76 215.32 587.74 225.7 590.71 4 Y
V
314.85 587.67 314.85 590.65 325.22 587.66 314.84 584.7 4 Y
N
314.85 587.67 314.85 590.65 325.22 587.66 314.84 584.7 4 Y
V
225.95 587.73 314.6 587.67 2 L
N
397.12 587.66 397.12 584.69 386.74 587.66 397.12 590.64 4 Y
N
397.12 587.66 397.12 584.69 386.74 587.66 397.12 590.64 4 Y
V
415.58 587.66 415.58 590.64 425.95 587.66 415.58 584.69 4 Y
N
415.58 587.66 415.58 590.64 425.95 587.66 415.58 584.69 4 Y
V
397.37 587.66 415.33 587.66 2 L
N
426.79 569.5 486.8 605.68 18 RR
N
0 10 Q
(A) 431.91 589.46 T
(pplication) 438.88 589.46 T
(Pr) 440.77 579.12 T
(ocess) 451.14 579.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
154.45 569.5 214.46 605.68 18 RR
N
(End-User) 163.9 589.46 T
(T) 175.19 579.12 T
(ool) 180.94 579.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.69 553.02 539.31 663.98 R
2 H
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
54 87.98 558 686.02 C
72.69 104.03 539.31 280.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
243.7 242.84 125.21 242.84 2 L
0 X
0 0 0 1 0 0 0 K
V
0.9 H
0 Z
N
0 18 Q
(Client Machine) 125.21 244.64 T
371.23 242.84 345.23 242.84 2 L
V
N
(Ser) 345.23 244.64 T
380.05 242.84 371.05 242.84 2 L
V
N
(v) 371.05 244.64 T
467.35 242.84 379.87 242.84 2 L
V
N
(er Machine) 379.87 244.64 T
225.57 206.17 225.57 203.2 215.19 206.17 225.57 209.15 4 Y
0.5 H
N
225.57 206.17 225.57 203.2 215.19 206.17 225.57 209.15 4 Y
V
314.58 206.17 314.58 209.15 324.95 206.17 314.58 203.2 4 Y
N
314.58 206.17 314.58 209.15 324.95 206.17 314.58 203.2 4 Y
V
225.82 206.17 314.33 206.17 2 L
N
325.79 188.22 385.8 224.4 18 RR
N
0 10 Q
(Daemon) 338.02 199.73 T
(Super) 343.01 210.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
325.79 128.22 385.8 164.4 18 RR
N
(Daemon) 338.02 142.93 T
397.12 146.23 397.12 143.26 386.74 146.23 397.12 149.21 4 Y
N
397.12 146.23 397.12 143.26 386.74 146.23 397.12 149.21 4 Y
V
415.58 146.23 415.58 149.21 425.95 146.23 415.58 143.26 4 Y
N
415.58 146.23 415.58 149.21 425.95 146.23 415.58 143.26 4 Y
V
397.37 146.23 415.33 146.23 2 L
N
426.79 128.22 486.8 164.4 18 RR
N
(Pr) 440.77 139.73 T
(ocess) 451.14 139.73 T
(A) 431.91 150.06 T
(pplication) 438.88 150.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
154.45 188.22 214.46 224.4 18 RR
N
(T) 175.19 199.73 T
(ool) 180.94 199.73 T
(End-User) 163.9 210.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
224.05 200.92 222.65 198.3 214.91 205.82 225.46 203.54 4 Y
N
224.05 200.92 222.65 198.3 214.91 205.82 225.46 203.54 4 Y
V
315.66 151.83 317.07 154.45 324.81 146.93 314.26 149.21 4 Y
N
315.66 151.83 317.07 154.45 324.81 146.93 314.26 149.21 4 Y
V
224.27 200.8 315.44 151.95 2 L
N
356.36 178.46 353.88 178.46 356.36 187.09 358.83 178.46 4 Y
N
356.36 178.46 353.88 178.46 356.36 187.09 358.83 178.46 4 Y
V
356.36 174.04 358.83 174.04 356.36 165.41 353.88 174.04 4 Y
N
356.36 174.04 358.83 174.04 356.36 165.41 353.88 174.04 4 Y
V
356.36 178.21 356.36 174.29 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.69 104.03 539.31 280.99 R
2 H
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 12
%%Page: "7" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(7) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.15 (Security within the system is maintained in se) 72 678.02 P
-0.15 (v) 290.99 678.02 P
-0.15 (eral w) 296.81 678.02 P
-0.15 (ays. First, when a ne) 326.19 678.02 P
-0.15 (w connection is established) 423.95 678.02 P
(between a client and super daemon, the super daemon requires that the client
be authenticated using) 72 664.02 T
(the most rob) 72 650.02 T
(ust means a) 131.76 650.02 T
(v) 187.51 650.02 T
(ailable. When DCE is in use on the serv) 193.21 650.02 T
(er) 384.67 650.02 T
(, DCE authentication is required.) 393.52 650.02 T
(Otherwise an internal authentication procedure is used. Second, in order for
the super daemon to be) 72 636.02 T
(able to create appropriate daemons it must ha) 72 622.02 T
(v) 289.38 622.02 T
(e super user pri) 295.2 622.02 T
(vile) 368.54 622.02 T
(ges. F) 386.36 622.02 T
(or this reason, the super dae-) 414.85 622.02 T
(mon is not allo) 72 608.02 T
(wed to access or modify an) 143.38 608.02 T
(y user applications. Third, an) 274.16 608.02 T
(y daemons the super daemon) 413.96 608.02 T
(creates must \336rst change their o) 72 594.02 T
(wnership from the super user to the user ID of the client. Thus the) 224
594.02 T
-0.02 (daemon has only those pri) 72 580.02 P
-0.02 (vile) 197.62 580.02 P
-0.02 (ges that w) 215.43 580.02 P
-0.02 (ould be granted by the system to the client tool if it were run-) 263.94
580.02 P
(ning locally on the daemon.) 72 566.02 T
-0.22 (Client tools are not responsible for connecting directly with a super
daemon. Rather) 72 545.02 P
-0.22 (, the tool requests) 471.2 545.02 P
-0.39 (services from the DPCL library) 72 531.02 P
-0.39 (, as illustrated in Figure 3 on page 7, and the library handles the
details) 220.95 531.02 P
-0.04 (of establishing the connection. Furthermore, the library also handles
all of the details of communicat-) 72 517.02 P
(ing between the tool and daemon, including details such as making sure the
correct message formats) 72 503.02 T
(are used, and that the messages are deli) 72 489.02 T
(v) 260.32 489.02 T
(ered reliably) 266.14 489.02 T
(. When it is appropriate that the tool process a) 325.67 489.02 T
(message, such as a service request ackno) 72 475.02 T
(wledgment from a daemon or a data message from a probe,) 267.97 475.02 T
-0.34 (the library handles the details of message reception and hands the
message o) 72 461.02 P
-0.34 (v) 434.94 461.02 P
-0.34 (er to a callback function) 440.76 461.02 P
(supplied by the tool for the purpose of processing that kind of message.) 72
447.02 T
54 415.98 558 429.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 423.04 540 423.04 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 423.04 108 423.04 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  3) 54 409.98 T
1 F
(A T) 117 409.98 T
(ool Communicates with a Daemon through the Library) 130.53 409.98 T
1 12 Q
(After a connection is established, a tool is free to install instrumentation
into the application. A tool) 72 228.02 T
-0.03 (does so by allocating data, forming probe e) 72 214.02 P
-0.03 (xpressions, and loading modules \050collections of functions) 278.9 214
.02 P
(to be called by probe e) 72 200.02 T
(xpressions\051 into the application, as illustrated in Figure 4 on page 8. As
men-) 180.79 200.02 T
(tioned before, the tool submits its requests via the library) 72 186.02 T
(, and the library handles all the details of) 344.53 186.02 T
(communication. Once this preparatory w) 72 172.02 T
(ork is done, the instrumentation probes can be installed) 268.18 172.02 T
(within the application and acti) 72 158.02 T
(v) 217.02 158.02 T
(ated. Acti) 222.72 158.02 T
(v) 269.08 158.02 T
(ated instrumentation is free to send messages containing) 274.78 158.02 T
(rele) 72 144.02 T
(v) 89.69 144.02 T
(ant data back to the client tool, as sho) 95.39 144.02 T
(wn in Figure 5 on page 8.) 275.4 144.02 T
54 87.98 558 686.02 C
72.69 243.02 539.31 406.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
243.2 380.69 124.71 380.69 2 L
0 X
0 0 0 1 0 0 0 K
V
0.9 H
0 Z
N
0 18 Q
(Client Machine) 124.71 382.49 T
370.73 380.69 344.73 380.69 2 L
V
N
(Ser) 344.73 382.49 T
379.55 380.69 370.55 380.69 2 L
V
N
(v) 370.55 382.49 T
466.85 380.69 379.37 380.69 2 L
V
N
(er Machine) 379.37 382.49 T
250.89 328.2 250.89 325.22 240.52 328.22 250.9 331.17 4 Y
0.5 H
N
250.89 328.2 250.89 325.22 240.52 328.22 250.9 331.17 4 Y
V
314.58 328.07 314.58 331.05 324.95 328.05 314.57 325.1 4 Y
N
314.58 328.07 314.58 331.05 324.95 328.05 314.57 325.1 4 Y
V
251.14 328.2 314.33 328.07 2 L
N
326.29 309.7 386.3 345.88 18 RR
N
0 10 Q
(Daemon) 338.52 324.41 T
397.62 327.87 397.62 324.89 387.24 327.87 397.62 330.85 4 Y
N
397.62 327.87 397.62 324.89 387.24 327.87 397.62 330.85 4 Y
V
416.08 327.87 416.08 330.85 426.45 327.87 416.08 324.89 4 Y
N
416.08 327.87 416.08 330.85 426.45 327.87 416.08 324.89 4 Y
V
397.87 327.87 415.83 327.87 2 L
N
427.29 309.7 487.3 345.88 18 RR
N
(A) 432.41 329.67 T
(pplication) 439.38 329.67 T
(Pr) 441.27 319.33 T
(ocess) 451.64 319.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
130.3 290.21 239.68 365.37 18 RR
7 X
V
0 X
N
J
184.99 365.37 184.99 321.72 2 L
7 X
V
J
184.99 365.37 184.99 364.62 2 L
2 Z
0 X
N
[1.36 4.079] 1.36 I
184.99 364.62 184.99 322.47 2 L
N
J
184.99 322.47 184.99 321.72 2 L
N
0 14 Q
(T) 144.03 343.48 T
(ool) 152.08 343.48 T
(Code) 141.45 328.76 T
J
(Library) 189.94 337.52 T
J
(End-User) 155.18 271.7 T
(T) 170.98 257.8 T
(ool) 179.03 257.8 T
J
130.6 321.78 239.38 321.78 2 L
7 X
V
J
130.6 321.78 131.35 321.78 2 L
0 X
N
[1.511 4.533] 1.511 I
131.35 321.78 238.62 321.78 2 L
N
J
238.62 321.78 239.38 321.78 2 L
N
(Pr) 167.23 308.6 T
(obe) 181.75 308.6 T
(Modules) 159.32 297.02 T
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.69 243.02 539.31 406.98 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 13
%%Page: "8" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(8) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
54 672.98 558 686.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 680.04 108 680.04 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  4) 54 666.98 T
1 F
(An End-User T) 117 666.98 T
(ool Installs Probes in an Application) 171.76 666.98 T
54 462.99 558 476.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 470.05 540 470.05 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 470.05 108 470.05 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  5) 54 456.99 T
1 F
(Probes Send Messages to the Client) 117 456.99 T
1 12 Q
-0.12 (As mentioned before, DPCL is capable of managing the instrumentation of
multiple applications and) 72 254.03 P
-0.05 (multiple clients. The simplest situation is sho) 72 240.03 P
-0.05 (wn in Figure 6 on page 9, where there is e) 288.45 240.03 P
-0.05 (xactly one cli-) 489.44 240.03 P
(ent and one application process. Serial programs lik) 72 226.03 T
(e this require no special considerations from) 320.51 226.03 T
-0.41 (DPCL. The dotted box in the \336gure represents the application. This
type of connection requires only a) 72 212.03 P
(single daemon, and the daemon must manage communication from a single client.)
72 198.03 T
54 87.98 558 686.02 C
72.69 488.02 539.31 663.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
243.2 641.69 124.71 641.69 2 L
0 X
0 0 0 1 0 0 0 K
V
0.9 H
0 Z
N
0 18 Q
(Client Machine) 124.71 643.49 T
370.73 641.69 344.73 641.69 2 L
V
N
(Ser) 344.73 643.49 T
379.55 641.69 370.55 641.69 2 L
V
N
(v) 370.55 643.49 T
466.85 641.69 379.37 641.69 2 L
V
N
(er Machine) 379.37 643.49 T
427.29 570.7 487.3 606.88 18 RR
0.5 H
N
0 10 Q
(A) 432.41 590.66 T
(pplication) 439.38 590.66 T
(Pr) 441.27 580.33 T
(ocess) 451.64 580.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(End-User) 155.18 512.17 T
(T) 170.98 497.33 T
(ool) 179.03 497.33 T
90 450 18 16.88 435 554.88 A
0 10 Q
(Pr) 420.37 551.53 T
(obes) 430.74 551.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
416.3 576.41 418.77 578.04 422 567.76 413.82 574.77 4 Y
N
416.3 576.41 418.77 578.04 422 567.76 413.82 574.77 4 Y
V
239.48 603.72 M
 323.97 603.72 401.72 598.51 416.16 576.62 D
2 Z
N
129.24 534.84 238.76 634 18 RR
0 Z
N
J
191.47 634 191.6 574.12 2 L
J
191.47 634 191.47 633.25 2 L
2 Z
N
[1.497 4.491] 1.497 I
191.47 633.25 191.6 574.87 2 L
N
J
191.6 574.87 191.6 574.12 2 L
N
J
238.83 573.48 129.08 573.66 2 L
J
238.83 573.48 238.08 573.48 2 L
N
[1.443 4.33] 1.443 I
238.08 573.48 129.83 573.66 2 L
N
J
129.83 573.66 129.08 573.66 2 L
N
J
227.73 603.81 227.74 606.79 238.11 603.76 227.71 600.83 4 Y
0 Z
N
227.73 603.81 227.74 606.79 238.11 603.76 227.71 600.83 4 Y
V
191.5 604 227.48 603.81 2 L
2 Z
N
0 14 Q
(Pr) 275.84 581 T
(obe Expr) 290.36 581 T
(essions,) 344.95 581 T
(Data and Modules) 277.92 567 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 147.66 606.54 T
(ool) 155.71 606.54 T
(Code) 145.08 591.8 T
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.69 488.02 539.31 663.98 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
54 87.98 558 686.02 C
72.69 269.03 539.31 453.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
243.2 425.7 124.71 425.7 2 L
0 X
0 0 0 1 0 0 0 K
V
0.9 H
0 Z
N
0 18 Q
(Client Machine) 124.71 427.5 T
370.73 425.7 344.73 425.7 2 L
V
N
(Ser) 344.73 427.5 T
379.55 425.7 370.55 425.7 2 L
V
N
(v) 370.55 427.5 T
466.85 425.7 379.37 425.7 2 L
V
N
(er Machine) 379.37 427.5 T
427.29 354.71 487.3 390.89 18 RR
0.5 H
N
0 10 Q
(A) 432.41 374.67 T
(pplication) 439.38 374.67 T
(Pr) 441.27 364.34 T
(ocess) 451.64 364.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(T) 157.56 406.14 T
(ool) 165.61 406.14 T
(Call-) 155.75 393.32 T
J
(End-User) 155.18 296.17 T
(T) 170.98 281.33 T
(ool) 179.03 281.33 T
90 450 18 17.12 435 339.13 A
0 10 Q
(Pr) 420.37 335.77 T
(obes) 430.74 335.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.22 397.55 269.19 394.57 258.83 397.65 269.25 400.52 4 Y
N
269.22 397.55 269.19 394.57 258.83 397.65 269.25 400.52 4 Y
V
269.47 397.54 M
 354.43 396.71 421.5 375.78 421.5 351.26 D
2 Z
N
147.03 374.76 194.03 418.01 R
N
110.29 318.85 257.74 418.01 18 RR
0 Z
N
0 14 Q
(backs) 153.41 379.04 T
J
194.08 418.01 194.25 358.13 2 L
J
194.08 418.01 194.08 417.26 2 L
2 Z
N
[1.497 4.491] 1.497 I
194.08 417.26 194.25 358.88 2 L
N
J
194.25 358.88 194.25 358.13 2 L
N
J
257.83 357.48 110.08 357.67 2 L
J
257.83 357.48 257.08 357.48 2 L
N
[1.477 4.432] 1.477 I
257.08 357.48 110.83 357.66 2 L
N
J
110.83 357.66 110.08 357.67 2 L
N
J
205.29 397.72 205.3 394.74 194.91 397.66 205.27 400.69 4 Y
0 Z
N
205.29 397.72 205.3 394.74 194.91 397.66 205.27 400.69 4 Y
V
257.92 398.01 205.53 397.72 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pr) 317 374.01 T
(obe) 331.52 374.01 T
(Messages) 306.77 360.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72.69 269.03 539.31 453.99 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 14
%%Page: "9" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(9) 552.99 45.99 T
54 87.98 558 686.02 R
7 X
V
54 672.98 558 686.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 680.04 108 680.04 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  6) 54 666.98 T
1 F
(A T) 117 666.98 T
(ool May Connect to a Serial Program) 130.53 666.98 T
1 12 Q
-0.22 (P) 72 513.02 P
-0.22 (arallel programs introduce an additional le) 78.49 513.02 P
-0.22 (v) 280.71 513.02 P
-0.22 (el of comple) 286.53 513.02 P
-0.22 (xity) 345.89 513.02 P
-0.22 (, whether the) 363.78 513.02 P
-0.22 (y are multiple processes on) 425.47 513.02 P
(multiple machines, as illustrated in Figure 7 on page 9 or multiple processes
on a single machine, as) 72 499.02 T
-0.03 (illustrated in Figure 8 on page 10. In the former case the client must
manage the additional daemons,) 72 485.02 P
(while the daemons ha) 72 471.02 T
(v) 176.08 471.02 T
(e the simpler connections. In the latter case, the client maintains a
connection) 181.9 471.02 T
(with a single daemon, b) 72 457.02 T
(ut both client and daemon must deal with the comple) 186.08 457.02 T
(xity of multiple applica-) 440.22 457.02 T
(tion processes.) 72 443.02 T
54 411.99 558 425.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 419.05 540 419.05 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 419.05 108 419.05 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  7) 54 405.99 T
1 F
(A T) 117 405.99 T
(ool May Connect to a P) 130.53 405.99 T
(arallel Program) 215.64 405.99 T
1 12 Q
-0.05 (Something w) 72 137.03 P
-0.05 (orth) 135.51 137.03 P
-0.05 (y of note is that while a daemon may connect to multiple processes
within the same) 154.78 137.03 P
(application, as described before, there is nothing about the processes that
require the) 72 123.03 T
(y all be in the) 476.4 123.03 T
(same application. DPCL library code on the client may track processes and
group them together to) 72 109.03 T
(form an application, b) 72 95.03 T
(ut this is a con) 177.74 95.03 T
(v) 246.6 95.03 T
(enience for the client and not required for daemon operation.) 252.42 95.03 T
54 87.98 558 686.02 C
72.69 528.02 539.31 663.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.54 564.7 378.55 600.88 18 RR
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 10 Q
(Daemon) 330.77 579.41 T
236.45 628.75 117.96 628.75 2 L
V
0.9 H
N
0 18 Q
(Client Machine) 117.96 630.55 T
363.98 628.75 337.99 628.75 2 L
V
N
(Ser) 337.99 630.55 T
372.8 628.75 363.8 628.75 2 L
V
N
(v) 363.8 630.55 T
460.1 628.75 372.62 628.75 2 L
V
N
(er Machine) 372.62 630.55 T
218.45 582.94 218.45 579.96 208.07 582.94 218.45 585.91 4 Y
0.5 H
N
218.45 582.94 218.45 579.96 208.07 582.94 218.45 585.91 4 Y
V
307.6 582.88 307.6 585.85 317.98 582.87 307.6 579.9 4 Y
N
307.6 582.88 307.6 585.85 317.98 582.87 307.6 579.9 4 Y
V
218.7 582.94 307.35 582.88 2 L
N
389.88 582.87 389.88 579.89 379.5 582.87 389.88 585.84 4 Y
N
389.88 582.87 389.88 579.89 379.5 582.87 389.88 585.84 4 Y
V
408.33 582.87 408.33 585.84 418.71 582.87 408.33 579.89 4 Y
N
408.33 582.87 408.33 585.84 418.71 582.87 408.33 579.89 4 Y
V
390.12 582.87 408.08 582.87 2 L
N
419.54 564.7 479.55 600.88 18 RR
N
0 10 Q
(A) 424.66 584.66 T
(pplication) 431.63 584.66 T
(Pr) 433.53 574.32 T
(ocess) 443.9 574.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
147.2 564.7 207.21 600.88 18 RR
N
(End-User) 156.65 584.66 T
(T) 167.94 574.32 T
(ool) 173.69 574.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[1.491 4.474] 0 I
405.04 549.29 494.04 616.29 18 RR
2 Z
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72.69 528.02 539.31 663.98 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
54 87.98 558 686.02 C
72.69 152.03 539.31 402.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.54 247.71 378.55 283.89 18 RR
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 10 Q
(Daemon) 330.77 262.42 T
236.45 370.76 117.96 370.76 2 L
V
0.9 H
N
0 18 Q
(Client Machine) 117.96 372.56 T
360.48 370.76 334.48 370.76 2 L
V
N
(Ser) 334.48 372.56 T
369.3 370.76 360.3 370.76 2 L
V
N
(v) 360.3 372.56 T
463.6 370.76 369.12 370.76 2 L
V
N
(er Machines) 369.12 372.56 T
218.57 265.83 218.57 262.85 208.2 265.82 218.57 268.8 4 Y
0.5 H
N
218.57 265.83 218.57 262.85 208.2 265.82 218.57 268.8 4 Y
V
307.6 265.87 307.6 268.85 317.98 265.88 307.6 262.9 4 Y
N
307.6 265.87 307.6 268.85 317.98 265.88 307.6 262.9 4 Y
V
218.82 265.83 307.35 265.87 2 L
N
389.88 265.88 389.88 262.9 379.5 265.88 389.88 268.85 4 Y
N
389.88 265.88 389.88 262.9 379.5 265.88 389.88 268.85 4 Y
V
408.33 265.88 408.33 268.85 418.71 265.88 408.33 262.9 4 Y
N
408.33 265.88 408.33 268.85 418.71 265.88 408.33 262.9 4 Y
V
390.12 265.88 408.08 265.88 2 L
N
419.54 247.71 479.55 283.89 18 RR
N
0 10 Q
(A) 424.66 267.67 T
(pplication) 431.63 267.67 T
(Pr) 433.53 257.33 T
(ocess) 443.9 257.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.54 312.71 378.55 348.89 18 RR
N
(Daemon) 330.77 327.42 T
389.88 330.88 389.88 327.9 379.5 330.88 389.88 333.85 4 Y
N
389.88 330.88 389.88 327.9 379.5 330.88 389.88 333.85 4 Y
V
408.33 330.88 408.33 333.85 418.71 330.88 408.33 327.9 4 Y
N
408.33 330.88 408.33 333.85 418.71 330.88 408.33 327.9 4 Y
V
390.12 330.88 408.08 330.88 2 L
N
419.54 312.71 479.55 348.89 18 RR
N
(A) 424.66 332.67 T
(pplication) 431.63 332.67 T
(Pr) 433.53 322.33 T
(ocess) 443.9 322.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.54 182.71 378.55 218.89 18 RR
N
(Daemon) 330.77 197.42 T
389.88 200.88 389.88 197.9 379.5 200.88 389.88 203.85 4 Y
N
389.88 200.88 389.88 197.9 379.5 200.88 389.88 203.85 4 Y
V
408.33 200.88 408.33 203.85 418.71 200.88 408.33 197.9 4 Y
N
408.33 200.88 408.33 203.85 418.71 200.88 408.33 197.9 4 Y
V
390.12 200.88 408.08 200.88 2 L
N
419.54 182.71 479.55 218.89 18 RR
N
(A) 424.66 202.67 T
(pplication) 431.63 202.67 T
(Pr) 433.53 192.33 T
(ocess) 443.9 192.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
147.2 247.71 207.21 283.89 18 RR
N
(End-User) 156.65 267.67 T
(T) 167.94 257.33 T
(ool) 173.69 257.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
217.09 271.46 218.59 268.89 208.13 266.22 215.59 274.02 4 Y
N
217.09 271.46 218.59 268.89 208.13 266.22 215.59 274.02 4 Y
V
308.89 325.18 307.39 327.74 317.85 330.42 310.39 322.61 4 Y
N
308.89 325.18 307.39 327.74 317.85 330.42 310.39 322.61 4 Y
V
217.31 271.58 308.68 325.05 2 L
N
216.98 260.2 215.48 257.63 208.01 265.43 218.48 262.78 4 Y
N
216.98 260.2 215.48 257.63 208.01 265.43 218.48 262.78 4 Y
V
308.91 206.68 310.41 209.26 317.88 201.46 307.42 204.11 4 Y
N
308.91 206.68 310.41 209.26 317.88 201.46 307.42 204.11 4 Y
V
217.19 260.08 308.7 206.81 2 L
N
[1.501 4.503] 0 I
405.04 170.3 494.04 361.3 18 RR
2 Z
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72.69 152.03 539.31 402.99 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 15
%%Page: "10" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(10) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
54 672.98 558 686.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 680.04 540 680.04 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 680.04 108 680.04 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  8) 54 666.98 T
1 F
(A Daemon May Connect to Multiple Processes) 117 666.98 T
1 12 Q
-0.36 (Daemons support not only connections to multiple processes, b) 72 437.02
P
-0.36 (ut also connections to multiple clients.) 372.51 437.02 P
(Figure 9 on page 10 illustrates tw) 72 423.02 T
(o clients connected to the same parallel application. The tw) 232.54 423.02 T
(o appli-) 517.03 423.02 T
-0.12 (cations need not be a) 72 409.02 P
-0.12 (w) 171.97 409.02 P
-0.12 (are of each other) 180.51 409.02 P
-0.12 (. DPCL does not pro) 259.77 409.02 P
-0.12 (vide e) 358.09 409.02 P
-0.12 (xplicit f) 386.78 409.02 P
-0.12 (acilities at this time for tw) 424.2 409.02 P
-0.12 (o) 549.12 409.02 P
(tools to be a) 72 395.02 T
(w) 130.15 395.02 T
(are of each other nor to communicate e) 138.7 395.02 T
(xcept with daemons. Ho) 326.12 395.02 T
(we) 442.48 395.02 T
(v) 456.17 395.02 T
(er) 461.99 395.02 T
(, this could be a) 470.83 395.02 T
(topic for future e) 72 381.02 T
(xtensions.) 152.8 381.02 T
54 349.99 558 363.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 357.05 540 357.05 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 357.05 108 357.05 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  9) 54 343.99 T
1 F
(Multiple T) 117 343.99 T
(ools May Connect to a Single Program) 155.03 343.99 T
54 87.98 558 686.02 C
72.69 452.02 539.31 663.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.54 525.01 378.55 561.19 18 RR
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 10 Q
(Daemon) 330.77 539.72 T
236.45 633.06 117.96 633.06 2 L
V
0.9 H
N
0 18 Q
(Client Machine) 117.96 634.86 T
363.98 633.06 337.99 633.06 2 L
V
N
(Ser) 337.99 634.86 T
372.8 633.06 363.8 633.06 2 L
V
N
(v) 363.8 634.86 T
460.1 633.06 372.62 633.06 2 L
V
N
(er Machine) 372.62 634.86 T
218.45 543.18 218.45 540.21 208.07 543.18 218.45 546.16 4 Y
0.5 H
N
218.45 543.18 218.45 540.21 208.07 543.18 218.45 546.16 4 Y
V
307.25 543.18 307.25 546.16 317.63 543.18 307.25 540.21 4 Y
N
307.25 543.18 307.25 546.16 317.63 543.18 307.25 540.21 4 Y
V
218.7 543.18 307 543.18 2 L
N
389.88 543.18 389.88 540.21 379.5 543.18 389.88 546.16 4 Y
N
389.88 543.18 389.88 540.21 379.5 543.18 389.88 546.16 4 Y
V
408.33 543.18 408.33 546.16 418.71 543.18 408.33 540.21 4 Y
N
408.33 543.18 408.33 546.16 418.71 543.18 408.33 540.21 4 Y
V
390.12 543.18 408.08 543.18 2 L
N
419.54 525.01 479.55 561.19 18 RR
N
0 10 Q
(A) 424.66 544.98 T
(pplication) 431.63 544.98 T
(Pr) 433.53 534.64 T
(ocess) 443.9 534.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
386.31 551.82 388.56 549.87 379.51 543.98 384.06 553.77 4 Y
N
386.31 551.82 388.56 549.87 379.51 543.98 384.06 553.77 4 Y
V
412.22 581.66 409.97 583.61 419.02 589.5 414.46 579.71 4 Y
N
412.22 581.66 409.97 583.61 419.02 589.5 414.46 579.71 4 Y
V
386.48 552.01 412.05 581.47 2 L
N
419.54 572.01 479.55 608.19 18 RR
N
(A) 424.66 591.98 T
(pplication) 431.63 591.98 T
(Pr) 433.53 581.64 T
(ocess) 443.9 581.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
147.2 525.01 207.21 561.19 18 RR
N
(End-User) 156.65 544.98 T
(T) 167.94 534.64 T
(ool) 173.69 534.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
385.98 534.7 383.71 532.77 379.25 542.6 388.24 536.63 4 Y
N
385.98 534.7 383.71 532.77 379.25 542.6 388.24 536.63 4 Y
V
412.3 503.77 414.57 505.7 419.03 495.87 410.03 501.85 4 Y
N
412.3 503.77 414.57 505.7 419.03 495.87 410.03 501.85 4 Y
V
386.14 534.51 412.14 503.96 2 L
N
419.54 477.01 479.55 513.19 18 RR
N
(A) 424.66 496.98 T
(pplication) 431.63 496.98 T
(Pr) 433.53 486.64 T
(ocess) 443.9 486.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[1.496 4.489] 0 I
405.04 468.98 494.04 617.23 18 RR
2 Z
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72.69 452.02 539.31 663.98 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
54 87.98 558 686.02 C
72.69 105.01 539.31 340.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
320.29 197.44 380.3 233.62 18 RR
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 10 Q
(Daemon) 332.52 212.15 T
241.7 320.49 116.21 320.49 2 L
V
0.9 H
N
0 18 Q
(Client Machines) 116.21 322.29 T
362.23 320.49 336.24 320.49 2 L
V
N
(Ser) 336.24 322.29 T
371.05 320.49 362.05 320.49 2 L
V
N
(v) 362.05 322.29 T
465.35 320.49 370.87 320.49 2 L
V
N
(er Machines) 370.87 322.29 T
219.92 245.33 219.08 242.48 209.97 248.28 220.77 248.19 4 Y
0.5 H
N
219.92 245.33 219.08 242.48 209.97 248.28 220.77 248.19 4 Y
V
309.53 218.8 310.38 221.66 319.48 215.86 308.69 215.95 4 Y
N
309.53 218.8 310.38 221.66 319.48 215.86 308.69 215.95 4 Y
V
220.16 245.26 309.29 218.87 2 L
N
391.62 215.61 391.62 212.63 381.25 215.61 391.62 218.59 4 Y
N
391.62 215.61 391.62 212.63 381.25 215.61 391.62 218.59 4 Y
V
410.08 215.61 410.08 218.59 420.46 215.61 410.08 212.63 4 Y
N
410.08 215.61 410.08 218.59 420.46 215.61 410.08 212.63 4 Y
V
391.88 215.61 409.83 215.61 2 L
N
421.29 197.44 481.3 233.62 18 RR
N
0 10 Q
(A) 426.41 217.4 T
(pplication) 433.38 217.4 T
(Pr) 435.28 207.07 T
(ocess) 445.65 207.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
320.29 262.44 380.3 298.62 18 RR
N
(Daemon) 332.52 277.15 T
391.62 280.61 391.62 277.63 381.25 280.61 391.62 283.59 4 Y
N
391.62 280.61 391.62 277.63 381.25 280.61 391.62 283.59 4 Y
V
410.08 280.61 410.08 283.59 420.46 280.61 410.08 277.63 4 Y
N
410.08 280.61 410.08 283.59 420.46 280.61 410.08 277.63 4 Y
V
391.88 280.61 409.83 280.61 2 L
N
421.29 262.44 481.3 298.62 18 RR
N
(A) 426.41 282.4 T
(pplication) 433.38 282.4 T
(Pr) 435.28 272.07 T
(ocess) 445.65 272.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
320.29 132.44 380.3 168.62 18 RR
N
(Daemon) 332.52 147.15 T
391.62 150.61 391.62 147.63 381.25 150.61 391.62 153.59 4 Y
N
391.62 150.61 391.62 147.63 381.25 150.61 391.62 153.59 4 Y
V
410.08 150.61 410.08 153.59 420.46 150.61 410.08 147.63 4 Y
N
410.08 150.61 410.08 153.59 420.46 150.61 410.08 147.63 4 Y
V
391.88 150.61 409.83 150.61 2 L
N
421.29 132.44 481.3 168.62 18 RR
N
(A) 426.41 152.4 T
(pplication) 433.38 152.4 T
(Pr) 435.28 142.07 T
(ocess) 445.65 142.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
148.95 165.44 208.96 201.62 18 RR
N
(End-User) 158.4 185.4 T
(T) 169.69 175.07 T
(ool) 175.44 175.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
219.88 251.38 220.71 248.52 209.91 248.48 219.04 254.23 4 Y
N
219.88 251.38 220.71 248.52 209.91 248.48 219.04 254.23 4 Y
V
309.55 277.46 308.71 280.32 319.51 280.36 310.38 274.6 4 Y
N
309.55 277.46 308.71 280.32 319.51 280.36 310.38 274.6 4 Y
V
220.11 251.45 309.31 277.39 2 L
N
217.82 240.89 215.85 238.65 210.03 247.75 219.78 243.12 4 Y
N
217.82 240.89 215.85 238.65 210.03 247.75 219.78 243.12 4 Y
V
311.89 157.94 313.86 160.17 319.67 151.07 309.92 155.71 4 Y
N
311.89 157.94 313.86 160.17 319.67 151.07 309.92 155.71 4 Y
V
218 240.72 311.7 158.1 2 L
N
148.95 230.44 208.96 266.62 18 RR
N
(End-User) 158.4 250.4 T
(T) 169.69 240.07 T
(ool) 175.44 240.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
219.72 180.62 218.87 177.77 209.78 183.59 220.58 183.47 4 Y
N
219.72 180.62 218.87 177.77 209.78 183.59 220.58 183.47 4 Y
V
309.48 153.77 310.33 156.62 319.42 150.8 308.63 150.92 4 Y
N
309.48 153.77 310.33 156.62 319.42 150.8 308.63 150.92 4 Y
V
219.96 180.54 309.24 153.84 2 L
N
217.43 191.07 219.38 188.82 209.6 184.26 215.47 193.31 4 Y
N
217.43 191.07 219.38 188.82 209.6 184.26 215.47 193.31 4 Y
V
311.65 273.07 309.7 275.31 319.48 279.88 313.61 270.82 4 Y
N
311.65 273.07 309.7 275.31 319.48 279.88 313.61 270.82 4 Y
V
217.61 191.23 311.46 272.9 2 L
N
219.82 186.78 220.64 183.92 209.85 183.91 219 189.64 4 Y
N
219.82 186.78 220.64 183.92 209.85 183.91 219 189.64 4 Y
V
309.57 212.55 308.75 215.41 319.54 215.41 310.39 209.69 4 Y
N
309.57 212.55 308.75 215.41 319.54 215.41 310.39 209.69 4 Y
V
220.06 186.85 309.33 212.48 2 L
N
[1.501 4.503] 0 I
406.79 118.53 495.79 312.53 18 RR
2 Z
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72.69 105.01 539.31 340.99 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 16
%%Page: "11" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(11) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(Finally) 72 678.02 T
(, for completeness, DPCL also supports sharing of daemons when multiple
clients and multi-) 105.23 678.02 T
(ple applications are in) 72 664.02 T
(v) 177.17 664.02 T
(olv) 182.93 664.02 T
(ed. This is illustrated in Figure 10 on page 11. In this situation the shared)
198.08 664.02 T
(daemon may not respond as quickly to requests or in forw) 72 650.02 T
(arding data because of the e) 350.51 650.02 T
(xtra demands) 483.95 650.02 T
-0.14 (placed on it by serving tw) 72 636.02 P
-0.14 (o clients. Other f) 195.48 636.02 P
-0.14 (actors, such as v) 275.58 636.02 P
-0.14 (arying w) 353.5 636.02 P
-0.14 (ork loads across systems can also) 395.56 636.02 P
(af) 72 622.02 T
(fect performance in this manner) 81.02 622.02 T
(.) 233.65 622.02 T
54 590.98 558 604.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117 598.04 540 598.04 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 598.04 108 598.04 2 L
0 Z
N
0 0 612 792 C
2 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE  10) 54 584.98 T
1 F
(Multiple T) 117 584.98 T
(ools May Share a Daemon) 155.03 584.98 T
54 87.98 558 686.02 C
72.69 329.98 539.31 581.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
242.62 555.25 117.13 555.25 2 L
0 X
0 0 0 1 0 0 0 K
V
0.9 H
0 Z
N
0 18 Q
(Client Machines) 117.13 557.05 T
362.68 555.25 336.69 555.25 2 L
V
N
(Ser) 336.69 557.05 T
371.51 555.25 362.51 555.25 2 L
V
N
(v) 362.51 557.05 T
465.81 555.25 371.33 555.25 2 L
V
N
(er Machines) 371.33 557.05 T
391.23 452.53 392.89 450.07 382.62 446.73 389.56 455 4 Y
0.5 H
N
391.23 452.53 392.89 450.07 382.62 446.73 389.56 455 4 Y
V
413.27 467.41 411.6 469.88 421.87 473.21 414.93 464.94 4 Y
N
413.27 467.41 411.6 469.88 421.87 473.21 414.93 464.94 4 Y
V
391.43 452.67 413.06 467.27 2 L
N
422.74 455.7 482.75 491.88 18 RR
N
0 10 Q
(A) 427.87 475.66 T
(pplication) 434.84 475.66 T
(Pr) 436.73 465.32 T
(ocess) 447.11 465.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
391.25 439.7 389.6 437.23 382.62 445.47 392.91 442.17 4 Y
N
391.25 439.7 389.6 437.23 382.62 445.47 392.91 442.17 4 Y
V
413.24 425 414.89 427.48 421.87 419.23 411.59 422.53 4 Y
N
413.24 425 414.89 427.48 421.87 419.23 411.59 422.53 4 Y
V
391.46 439.56 413.03 425.14 2 L
N
422.74 400.7 482.75 436.88 18 RR
N
(A) 427.87 420.66 T
(pplication) 434.84 420.66 T
(Pr) 436.73 410.32 T
(ocess) 447.11 410.32 T
321.74 350.2 381.75 386.38 18 RR
N
(Daemon) 333.98 364.91 T
220.52 403.98 219.53 401.17 210.73 407.42 221.5 406.79 4 Y
N
220.52 403.98 219.53 401.17 210.73 407.42 221.5 406.79 4 Y
V
311.17 372.1 312.15 374.9 320.95 368.65 310.18 369.29 4 Y
N
311.17 372.1 312.15 374.9 320.95 368.65 310.18 369.29 4 Y
V
220.75 403.89 310.93 372.18 2 L
N
393.08 368.36 393.08 365.39 382.7 368.36 393.08 371.34 4 Y
N
393.08 368.36 393.08 365.39 382.7 368.36 393.08 371.34 4 Y
V
411.54 368.36 411.54 371.34 421.92 368.36 411.54 365.39 4 Y
N
411.54 368.36 411.54 371.34 421.92 368.36 411.54 365.39 4 Y
V
393.33 368.36 411.29 368.36 2 L
N
422.74 350.2 482.75 386.38 18 RR
N
(A) 427.87 370.16 T
(pplication) 434.84 370.16 T
(Pr) 436.73 359.82 T
(ocess) 447.11 359.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
220.53 411.17 221.51 408.36 210.73 407.77 219.56 413.98 4 Y
N
220.53 411.17 221.51 408.36 210.73 407.77 219.56 413.98 4 Y
V
311.15 442.6 310.17 445.41 320.95 445.99 312.12 439.78 4 Y
N
311.15 442.6 310.17 445.41 320.95 445.99 312.12 439.78 4 Y
V
220.77 411.25 310.91 442.51 2 L
N
149.87 389.2 209.88 425.38 18 RR
N
(End-User) 159.32 409.16 T
(T) 170.61 398.82 T
(ool) 176.36 398.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
321.74 428.2 381.75 464.38 18 RR
N
(Daemon) 333.98 442.91 T
321.74 505.2 381.75 541.38 18 RR
N
(Daemon) 333.98 519.91 T
220.71 496.27 221.48 493.39 210.68 493.59 219.94 499.14 4 Y
N
220.71 496.27 221.48 493.39 210.68 493.59 219.94 499.14 4 Y
V
310.91 520.38 310.14 523.25 320.93 523.06 311.68 517.5 4 Y
N
310.91 520.38 310.14 523.25 320.93 523.06 311.68 517.5 4 Y
V
220.95 496.33 310.67 520.31 2 L
N
393.08 523.36 393.08 520.39 382.7 523.36 393.08 526.34 4 Y
N
393.08 523.36 393.08 520.39 382.7 523.36 393.08 526.34 4 Y
V
411.54 523.36 411.54 526.34 421.92 523.36 411.54 520.39 4 Y
N
411.54 523.36 411.54 526.34 421.92 523.36 411.54 520.39 4 Y
V
393.33 523.36 411.29 523.36 2 L
N
422.74 505.2 482.75 541.38 18 RR
N
(A) 427.87 525.16 T
(pplication) 434.84 525.16 T
(Pr) 436.73 514.82 T
(ocess) 447.11 514.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
149.87 475.2 209.88 511.38 18 RR
N
(End-User) 159.32 495.16 T
(T) 170.61 484.82 T
(ool) 176.36 484.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
220.27 489.04 219.12 486.3 210.71 493.07 221.43 491.79 4 Y
N
220.27 489.04 219.12 486.3 210.71 493.07 221.43 491.79 4 Y
V
311.35 450.73 312.5 453.47 320.91 446.71 310.19 447.99 4 Y
N
311.35 450.73 312.5 453.47 320.91 446.71 310.19 447.99 4 Y
V
220.5 488.95 311.11 450.83 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[1.502 4.505] 0 I
405.87 448.73 494.87 549.73 18 RR
2 Z
N
[1.502 4.505] 0 I
405.87 342.73 494.87 443.73 18 RR
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72.69 329.98 539.31 581.98 R
2 H
0 Z
3 X
N
54 87.98 558 686.02 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 17
%%Page: "12" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(About DPCL) 81 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter1.chp) 361.99 45.99 T
(12) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 18
%%Page: "13" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(13) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
54 666.99 558 670.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 670.02 486 670.02 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 16 Q
0 X
0 0 0 1 0 0 0 K
(2.0) 72 675.35 T
( Intr) 92 675.35 T
(oduction to DPCL Concepts) 123.26 675.35 T
1 12 Q
(This chapter pro) 72 648.99 T
(vides a brief introduction to indi) 150.47 648.99 T
(vidual concepts used within DPCL.) 305.16 648.99 T
89.5 614.26 72 614.26 2 L
V
0.7 H
0 Z
N
89.5 626.87 72 626.87 2 L
V
N
0 14 Q
(2.1) 72 615.66 T
143.55 614.26 89.5 614.26 2 L
V
N
143.55 626.87 89.5 626.87 2 L
V
N
( Asynchr) 89.5 615.66 T
196.59 614.26 143.3 614.26 2 L
V
N
196.59 626.87 143.3 626.87 2 L
V
N
(onous Pr) 143.3 615.66 T
265.55 614.26 196.33 614.26 2 L
V
N
265.55 626.87 196.33 626.87 2 L
V
N
(ogramming) 196.33 615.66 T
1 12 Q
(Asynchronous programming is a style of programming where the major acti) 72
596.99 T
(vities in a program) 436.98 596.99 T
(in) 72 582.99 T
(v) 80.86 582.99 T
(olv) 86.62 582.99 T
(e acting upon e) 101.77 582.99 T
(v) 174.46 582.99 T
(ents that may arri) 180.28 582.99 T
(v) 263.63 582.99 T
(e at an undetermined time, and in an undetermined order) 269.45 582.99 T
(.) 540.73 582.99 T
-0.01 (The system recognizes the occurrence of an e) 72 568.99 P
-0.01 (v) 289.86 568.99 P
-0.01 (ent and reports the e) 295.68 568.99 P
-0.01 (v) 392.63 568.99 P
-0.01 (ent to the program. The program) 398.45 568.99 P
-0.14 (has e) 72 554.99 P
-0.14 (v) 95.89 554.99 P
-0.14 (ent handlers set up to process those e) 101.71 554.99 P
-0.14 (v) 278.1 554.99 P
-0.14 (ents when the) 283.92 554.99 P
-0.14 (y arri) 349.45 554.99 P
-0.14 (v) 374.67 554.99 P
-0.14 (e. One e) 380.49 554.99 P
-0.14 (xample of a commonly used) 419.69 554.99 P
(asynchronous system is the Unix signal f) 72 540.99 T
(acility) 268.54 540.99 T
(. A Unix process may recei) 297.76 540.99 T
(v) 428.09 540.99 T
(e a signal from another) 433.91 540.99 T
-0.18 (process, from itself, or from the operating system at an) 72 526.99 P
-0.18 (y time. The e) 333.16 526.99 P
-0.18 (v) 395.64 526.99 P
-0.18 (ent to be acted upon, then, is the) 401.46 526.99 P
(signal. The operating system is the mechanism that transfers the signal to the
program and acti) 72 512.99 T
(v) 524.98 512.99 T
(ates) 530.68 512.99 T
-0.28 (the signal handler) 72 498.99 P
-0.28 (, which in this case is the e) 156.28 498.99 P
-0.28 (v) 282.68 498.99 P
-0.28 (ent handler) 288.5 498.99 P
-0.28 (. While this aspect of a program that uses sig-) 341.21 498.99 P
-0.1 (nals matches the asynchronous programming model, such programs also
typically use signals as indi-) 72 484.99 P
(cators of e) 72 470.99 T
(xceptional circumstances rather than the norm.) 121.8 470.99 T
(A better e) 72 449.99 T
(xample might be something lik) 119.14 449.99 T
(e a Motif or other X-W) 268.36 449.99 T
(indo) 379.51 449.99 T
(ws application. Mouse mo) 400.55 449.99 T
(v) 527.03 449.99 T
(e-) 532.85 449.99 T
(ments, object selection, and k) 72 435.99 T
(e) 213.86 435.99 T
(yboard strok) 219.01 435.99 T
(es are the typical e) 279.22 435.99 T
(v) 368.22 435.99 T
(ents in these programs. The program) 374.04 435.99 T
-0.41 (\336rst sets up whate) 72 421.99 P
-0.41 (v) 156.79 421.99 P
-0.41 (er rele) 162.61 421.99 P
-0.41 (v) 192.21 421.99 P
-0.41 (ant program data structures and e) 197.91 421.99 P
-0.41 (v) 355.18 421.99 P
-0.41 (ent handlers there might be, then enters a) 361 421.99 P
-0.26 (main e) 72 407.99 P
-0.26 (v) 103.77 407.99 P
-0.26 (ent loop. The main e) 109.59 407.99 P
-0.26 (v) 207.26 407.99 P
-0.26 (ent loop recognizes incoming e) 213.07 407.99 P
-0.26 (v) 361.73 407.99 P
-0.26 (ents and mak) 367.55 407.99 P
-0.26 (es a call to the appropriate) 430.24 407.99 P
(e) 72 393.99 T
(v) 77.03 393.99 T
(ent handler) 82.85 393.99 T
(. Ev) 135.84 393.99 T
(ent handlers in this system are called) 154.99 393.99 T
5 F
(callbac) 334.63 393.99 T
(k functions) 369.72 393.99 T
1 F
(, or just) 422.05 393.99 T
5 F
(callbac) 461.39 393.99 T
(ks) 496.48 393.99 T
1 F
(.) 506.47 393.99 T
-0.44 (DPCL w) 72 372.99 P
-0.44 (orks v) 113.77 372.99 P
-0.44 (ery similarly to Motif, at least in some w) 142.81 372.99 P
-0.44 (ays. End-user) 334.81 372.99 P
-0.44 (-tools b) 399.44 372.99 P
-0.44 (uilt upon DPCL initialize) 435.09 372.99 P
-0.21 (data and enter a main e) 72 358.99 P
-0.21 (v) 181.62 358.99 P
-0.21 (ent loop. The main e) 187.43 358.99 P
-0.21 (v) 285.29 358.99 P
-0.21 (ent loop listens to \336le descriptors for input. When input) 291.11 3
58.99 P
(is detected, a dispatch routine for that \336le descriptor is called. The
dispatch routine understands the) 72 344.99 T
(protocol for that \336le descriptor) 72 330.99 T
(, that is, it understands whether the input is a structured message from) 21
8.83 330.99 T
(a daemon, unstructured te) 72 316.99 T
(xt from a k) 195.79 316.99 T
(e) 248.66 316.99 T
(yboard, screen e) 253.81 316.99 T
(v) 331.81 316.99 T
(ents from a GUI, or whate) 337.63 316.99 T
(v) 463.3 316.99 T
(er it might be.) 469.12 316.99 T
(When the e) 72 302.99 T
(v) 126.35 302.99 T
(ent is a structured message from a daemon, the dispatch routine reads the
message from) 132.17 302.99 T
-0.32 (the \336le descriptor) 72 288.99 P
-0.32 (, looks up the callback function associated with the incoming message,
and e) 154.87 288.99 P
-0.32 (x) 519.51 288.99 P
-0.32 (ecutes) 525.33 288.99 P
(the callback function.) 72 274.99 T
-0.19 (The end-user) 72 253.99 P
-0.19 (-tool may supply an appropriate dispatch routine when adding a \336le
descriptor to the list) 134.55 253.99 P
(of \336le descriptors DPCL listens to. The end-user) 72 239.99 T
(-tool does not get directly in) 304.4 239.99 T
(v) 439.58 239.99 T
(olv) 445.34 239.99 T
(ed in messages) 460.5 239.99 T
(passed between client and daemon, e) 72 225.99 T
(xcept to pro) 249.11 225.99 T
(vide some of the client callback functions that are) 306.25 225.99 T
(acti) 72 211.99 T
(v) 89.03 211.99 T
(ated when certain messages arri) 94.73 211.99 T
(v) 247.04 211.99 T
(e.) 252.86 211.99 T
96 184.79 72 184.79 2 L
V
0.6 H
N
0 F
(2.1.1) 72 185.99 T
149.68 184.79 96 184.79 2 L
V
N
( Callbacks) 96 185.99 T
1 F
(Callback functions in DPCL are functions that are called when certain messages
arri) 72 170.99 T
(v) 476.28 170.99 T
(e from a dae-) 482.1 170.99 T
(mon. A message may represent an ackno) 72 156.99 T
(wledgement of a service request being completed success-) 267.98 156.99 T
(fully) 72 142.99 T
(, or a service request f) 93.89 142.99 T
(ailing to complete. Or it may represent data being sent from) 199.73 142.99 T
(instrumentation within the application to the client for processing. All
callbacks ha) 72 128.99 T
(v) 469.06 128.99 T
(e the same func-) 474.88 128.99 T
(tion prototype, or type signature, re) 72 114.99 T
(g) 241.46 114.99 T
(ardless of the message type that acti) 247.4 114.99 T
(v) 419.74 114.99 T
(ates it. The function proto-) 425.44 114.99 T
(type for callbacks is:) 72 100.99 T
FMENDPAGE
%%EndPage: "13" 19
%%Page: "14" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(14) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
4 12 Q
0 X
(void callback \050) 108 678.02 T
(GCBSysType sys,) 144 658.02 T
(// system data structure) 288 658.02 T
(GCBTagType tag,) 144 638.02 T
(// user-supplied tag value) 288 638.02 T
(GCBObjType obj,) 144 618.02 T
(// object that registers the callback) 288 618.02 T
(GCBMsgType msg\051) 144 598.02 T
(// message that invokes the callback) 288 598.02 T
1 F
(The callback function has four parameters. The) 72 577.02 T
4 F
(sys) 301.93 577.02 T
1 F
( parameter is a data structure that includes basic) 323.53 577.02 T
(system information about the message. V) 72 563.02 T
(alues in the structure are: the sock) 269.32 563.02 T
(et or \336le descriptor from) 432.49 563.02 T
-0.02 (which the message w) 72 549.02 P
-0.02 (as recei) 174.13 549.02 P
-0.02 (v) 210.12 549.02 P
-0.02 (ed; a message k) 215.94 549.02 P
-0.02 (e) 291.41 549.02 P
-0.02 (y or type v) 296.56 549.02 P
-0.02 (alue that represents the protocol or purpose) 347.86 549.02 P
(behind the message; and the size of the message in 8-bit bytes. The structure
is de\336ned as) 72 535.02 T
4 F
(struct GCBSysType {) 108 514.02 T
(int msg_socket;    // socket over which msg was received) 144 494.02 T
(int msg_type;      // message type) 144 474.02 T
(int msg_size;      // size of the message sent) 144 454.02 T
(}) 108 434.02 T
1 F
(The message type is used as a k) 72 413.02 T
(e) 224.18 413.02 T
(y v) 229.33 413.02 T
(alue to identify the callback function to be e) 244.03 413.02 T
(x) 455.15 413.02 T
(ecuted. This infor-) 460.97 413.02 T
(mation is pro) 72 399.02 T
(vided by the system.) 135.16 399.02 T
-0.05 (The) 72 378.02 P
4 F
-0.13 (tag) 93.61 378.02 P
1 F
-0.05 ( parameter is a v) 115.21 378.02 P
-0.05 (alue, lar) 194 378.02 P
-0.05 (ge enough to contain a pointer) 232.39 378.02 P
-0.05 (, that is supplied by the end-user) 377.29 378.02 P
-0.05 (-tool) 532.38 378.02 P
-0.07 (at the time the service is requested and the callback is identi\336ed.
This allo) 72 364.02 P
-0.07 (ws callback functions to be) 424.72 364.02 P
(used for more than one purpose when desired. F) 72 350.02 T
(or e) 302.77 350.02 T
(xample, the tag may be used as a pointer to rele-) 320.92 350.02 T
(v) 72 336.02 T
(ant data that changes from one usage of the callback to another) 77.7 336.02 T
(. It can be used in man) 379.3 336.02 T
(y dif) 487.43 336.02 T
(ferent) 509.46 336.02 T
-0.2 (w) 72 322.02 P
-0.2 (ays, b) 80.54 322.02 P
-0.2 (ut it is entirely up to the end-user) 108.1 322.02 P
-0.2 (-tool to decide. DPCL merely records its v) 265.4 322.02 P
-0.2 (alue when the call-) 467.64 322.02 P
(back is re) 72 308.02 T
(gistered, and passes the v) 117.8 308.02 T
(alue to the callback function when the callback is e) 239.15 308.02 T
(x) 483.91 308.02 T
(ecuted.) 489.73 308.02 T
(One piece of data that is often useful is the object being used to request a
service at the time the call-) 72 287.02 T
(back is re) 72 273.02 T
(gistered. F) 117.8 273.02 T
(or e) 168.29 273.02 T
(xample, \322) 186.43 273.02 T
4 F
(Process p; ... p.connect\050cb, tag\051;) 233.09 273.02 T
1 F
(\323 uses the data) 477.89 273.02 T
(object) 72 259.02 T
4 F
(p) 104.33 259.02 T
1 F
(, of type) 111.53 259.02 T
4 F
(Process) 154.19 259.02 T
1 F
(, to request a service. The requested service in this e) 204.59 259.02 T
(xample is to connect) 454.34 259.02 T
-0.29 (the client to a ph) 72 245.02 P
-0.29 (ysical process. The callback function might \336nd it useful to kno)
150.77 245.02 P
-0.29 (w which process data) 453.19 245.02 P
(object requested the connection when it decides what to do with the success or
f) 72 231.02 T
(ailure of the request.) 455.81 231.02 T
-0.26 (As an e) 72 217.02 P
-0.26 (xample it might use this information to display informati) 107.29 217.02
P
-0.26 (v) 377.58 217.02 P
-0.26 (e error messages when requests f) 383.4 217.02 P
-0.26 (ail.) 540.26 217.02 P
(The object used in a service request is also kno) 72 203.02 T
(wn as the) 297.32 203.02 T
5 F
(in) 345.65 203.02 T
(voking object) 354.5 203.02 T
1 F
(. A pointer to the in) 418.82 203.02 T
(v) 512.34 203.02 T
(oking) 518.1 203.02 T
(object is stored in the parameter) 72 189.02 T
4 F
(obj) 228.64 189.02 T
1 F
(.) 250.24 189.02 T
-0.23 (The actual content of the message is presented as a ra) 72 168.02 P
-0.23 (w byte stream. A pointer to the message content) 326.11 168.02 P
(is gi) 72 154.02 T
(v) 92.04 154.02 T
(en in the parameter) 97.86 154.02 T
4 F
(msg) 193.16 154.02 T
1 F
(. The number of bytes in the message is stored in) 214.76 154.02 T
4 F
(sys.msg_size) 452.74 154.02 T
1 F
(.) 539.14 154.02 T
-0.17 (When the message is the ackno) 72 140.02 P
-0.17 (wledgement of a service request, the message format is de\336ned by the)
221.14 140.02 P
-0.02 (system. When the message is a data message it is generated by the e
nd-user) 72 126.02 P
-0.02 (-tool instrumentation run-) 434.05 126.02 P
(ning within the application. The format is determined by the instrumentation,
since the instrumenta-) 72 112.02 T
(tion determines what to place in the) 72 98.02 T
4 F
(Ais_send) 246.31 98.02 T
1 F
( b) 303.91 98.02 T
(uf) 312.67 98.02 T
(fer) 322.37 98.02 T
(.) 335.03 98.02 T
4 F
(Ais_send) 341.03 98.02 T
1 F
( sends the message.) 398.63 98.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 20
%%Page: "15" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(15) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
96 676.82 72 676.82 2 L
0 X
V
0.6 H
0 Z
N
0 12 Q
(2.1.2) 72 678.02 T
113 676.82 96 676.82 2 L
V
N
( Ev) 96 678.02 T
263.89 676.82 112.88 676.82 2 L
V
N
(ent Recognition and Dispatch) 112.88 678.02 T
1 F
-0.12 (DPCL recognizes tw) 72 663.02 P
-0.12 (o kinds of e) 171.63 663.02 P
-0.12 (v) 227.32 663.02 P
-0.12 (ents: \336le descriptor input e) 233.14 663.02 P
-0.12 (v) 360.37 663.02 P
-0.12 (ents and signal e) 366.19 663.02 P
-0.12 (v) 445.2 663.02 P
-0.12 (ents. DPCL programs) 451.02 663.02 P
(sit in a main loop that w) 72 649.02 T
(aits for e) 187.88 649.02 T
(v) 229.57 649.02 T
(ents to occur) 235.39 649.02 T
(. Each time an e) 296.05 649.02 T
(v) 372.73 649.02 T
(ent occurs a dispatch routine, or han-) 378.55 649.02 T
(dler) 72 635.02 T
(, for that class of e) 90.18 635.02 T
(v) 178.52 635.02 T
(ent is dispatched to deal appropriately with recognizing the e) 184.34 635.02 T
(v) 476.33 635.02 T
(ent. In some) 482.15 635.02 T
(cases a callback function associated with the e) 72 621.02 T
(v) 293.98 621.02 T
(ent is also called.) 299.8 621.02 T
(Signal e) 72 600.02 T
(v) 110.7 600.02 T
(ents are the simplest to process. A tool may re) 116.52 600.02 T
(gister a signal e) 337.64 600.02 T
(v) 412.33 600.02 T
(ent dispatch routine to deal) 418.15 600.02 T
-0.12 (with certain Unix\252 signals. When a signal is raised, an internal
signal handler catches the signal and) 72 586.02 P
-0.43 (schedules the signal e) 72 572.02 P
-0.43 (v) 174.74 572.02 P
-0.43 (ent dispatch routine to be e) 180.56 572.02 P
-0.43 (x) 307.89 572.02 P
-0.43 (ecuted. The internal signal handler releases control) 313.71 572.02 P
-0.16 (to the normal tool en) 72 558.02 P
-0.16 (vironment, where the signal e) 170.87 558.02 P
-0.16 (v) 312.22 558.02 P
-0.16 (ent dispatch routine is then e) 318.04 558.02 P
-0.16 (x) 454.7 558.02 P
-0.16 (ecuted. Because the) 460.52 558.02 P
-0.17 (signal e) 72 544.02 P
-0.17 (v) 108.52 544.02 P
-0.17 (ent dispatch routine is e) 114.34 544.02 P
-0.17 (x) 227.45 544.02 P
-0.17 (ecuted within the normal en) 233.27 544.02 P
-0.17 (vironment, the application stack is used) 366.07 544.02 P
(for function calls rather than the signal stack.) 72 530.02 T
(Signal e) 72 509.02 T
(v) 110.7 509.02 T
(ent handling routines are also e) 116.52 509.02 T
(x) 265.98 509.02 T
(empt from the concerns of typical signal handlers, such as) 271.8 509.02 T
(e) 72 495.02 T
(x) 77.15 495.02 T
(ecuting a function that uses a data structure caught in an inconsistent state.
Subroutines such as) 82.97 495.02 T
4 F
-0.41 (malloc) 72 481.02 P
1 F
-0.17 ( cannot be safely e) 115.2 481.02 P
-0.17 (x) 203.64 481.02 P
-0.17 (ecuted within a signal handler because the signal that caused the
handler) 209.46 481.02 P
(to be e) 72 467.02 T
(x) 103.81 467.02 T
(ecuted may ha) 109.63 467.02 T
(v) 178.7 467.02 T
(e interrupted the application while it w) 184.52 467.02 T
(as in the process of e) 370.38 467.02 T
(x) 470.51 467.02 T
(ecuting a call to) 476.33 467.02 T
4 F
-0.14 (malloc) 72 453.02 P
1 F
-0.06 (. This w) 115.2 453.02 P
-0.06 (ould mean the second) 153.97 453.02 P
4 F
-0.14 (malloc) 261.05 453.02 P
1 F
-0.06 ( in) 304.26 453.02 P
-0.06 (v) 316.05 453.02 P
-0.06 (ocation might catch its internal data structures in) 321.81 453.02 P
(an inconsistent state, which could potentially cause an error to occur and the
program to terminate) 72 439.02 T
(abnormally) 72 425.02 T
(. Signal e) 125.88 425.02 T
(v) 170.58 425.02 T
(ent handlers are not in) 176.4 425.02 T
(v) 282.56 425.02 T
(ok) 288.32 425.02 T
(ed within the internal signal handler) 300.2 425.02 T
(, so calls to rou-) 472.7 425.02 T
(tines lik) 72 411.02 T
(e) 110.22 411.02 T
4 F
(malloc) 118.55 411.02 T
1 F
( ha) 161.75 411.02 T
(v) 175.84 411.02 T
(e an opportunity to restore consistenc) 181.66 411.02 T
(y to their internal data structures and) 361.12 411.02 T
(return normally before the signal e) 72 397.02 T
(v) 238 397.02 T
(ent dispatch routine is called.) 243.82 397.02 T
(DPCL only allo) 72 376.02 T
(ws one signal e) 147.71 376.02 T
(v) 221.06 376.02 T
(ent dispatch routine to be re) 226.88 376.02 T
(gistered for each signal. The old signal) 360.35 376.02 T
(e) 72 362.02 T
(v) 77.03 362.02 T
(ent dispatch routine must be remo) 82.85 362.02 T
(v) 245.65 362.02 T
(ed before a ne) 251.47 362.02 T
(w signal e) 318.8 362.02 T
(v) 367.16 362.02 T
(ent dispatch routine may be installed.) 372.98 362.02 T
-0.1 (Signals are not stack) 72 348.02 P
-0.1 (ed, either) 170.56 348.02 P
-0.1 (. If tw) 214.45 348.02 P
-0.1 (o signals of the same type are recei) 243.12 348.02 P
-0.1 (v) 410.39 348.02 P
-0.1 (ed in rapid succession before) 416.21 348.02 P
(the signal e) 72 334.02 T
(v) 126.36 334.02 T
(ent handler for the \336rst signal is allo) 132.18 334.02 T
(wed to e) 305.53 334.02 T
(x) 346.01 334.02 T
(ecute, it is treated as only one signal.) 351.83 334.02 T
-0.3 (File descriptor input e) 72 313.02 P
-0.3 (v) 176.46 313.02 P
-0.3 (ents are the most common e) 182.28 313.02 P
-0.3 (v) 314.8 313.02 P
-0.3 (ents to occur) 320.62 313.02 P
-0.3 (. The) 380.68 313.02 P
-0.3 (y can be di) 404.86 313.02 P
-0.3 (vided into tw) 455.98 313.02 P
-0.3 (o major) 518.6 313.02 P
(cate) 72 299.02 T
(gories, namely input e) 91.14 299.02 T
(v) 197.5 299.02 T
(ents that represent communication between the client and daemon, and) 203.32
299.02 T
-0.01 (those that represent input from a user) 72 285.02 P
-0.01 (-tool-speci\336ed input \336le descriptor) 250.31 285.02 P
-0.01 (. When input arri) 415.93 285.02 P
-0.01 (v) 497.57 285.02 P
-0.01 (es on a \336le) 503.39 285.02 P
(descriptor the system recognizes that an e) 72 271.02 T
(v) 271.66 271.02 T
(ent has occurred, b) 277.48 271.02 T
(ut it does not yet kno) 367.87 271.02 T
(w what type of) 468.58 271.02 T
-0.28 (e) 72 257.02 P
-0.28 (v) 77.03 257.02 P
-0.28 (ent has occurred. Ho) 82.85 257.02 P
-0.28 (w one interprets the input to determine the type of e) 181.02 257.02 P
-0.28 (v) 426.59 257.02 P
-0.28 (ent depends on the source) 432.41 257.02 P
(of the e) 72 243.02 T
(v) 107.69 243.02 T
(ent. If the input is from a daemon, certain information is guaranteed to be
part of the input) 113.51 243.02 T
(stream -- information that identi\336es the type of e) 72 229.02 T
(v) 305 229.02 T
(ent that occurred and the callback function, if an) 310.82 229.02 T
(y) 542.92 229.02 T
(,) 548.14 229.02 T
(associated with it. If the input is from an) 72 215.02 T
(y other source, DPCL does not kno) 266.14 215.02 T
(w ho) 434.82 215.02 T
(w to determine the) 458.18 215.02 T
(action to tak) 72 201.02 T
(e in order to process the input.) 131.21 201.02 T
(F) 72 180.02 T
(or this reason DPCL has dispatch routines associated with e) 78.49 180.02 T
(v) 365.16 180.02 T
(ery \336le descriptor it w) 370.98 180.02 T
(atches. The dis-) 476.84 180.02 T
(patch routine is responsible for interpreting the input stream and breaking it
into indi) 72 166.02 T
(vidual e) 478 166.02 T
(v) 516.02 166.02 T
(ents.) 521.84 166.02 T
(F) 72 152.02 T
(or \336le descriptors connected to daemons, a special dispatch routine is used
that interprets the input) 78.49 152.02 T
(stream as a stream of structured messages, and in) 72 138.02 T
(v) 307.8 138.02 T
(ok) 313.56 138.02 T
(es the appropriate callback function for each) 325.44 138.02 T
(message. Each message represents an indi) 72 124.02 T
(vidual e) 273.65 124.02 T
(v) 311.68 124.02 T
(ent to the system.) 317.5 124.02 T
(User) 72 103.02 T
(-tools are also able to re) 94.42 103.02 T
(gister \336le descriptors to be w) 209.21 103.02 T
(atched by the system. That allo) 348.07 103.02 T
(ws other) 497.09 103.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 21
%%Page: "16" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(16) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.45 (types of input to be handled asynchronously as well. F) 72 678.02 P
-0.45 (or e) 329.07 678.02 P
-0.45 (xample, a user) 346.77 678.02 P
-0.45 (-tool may wish to incorporate) 415.27 678.02 P
(k) 72 664.02 T
(e) 77.88 664.02 T
(yboard input into its processing. The tool may re) 83.03 664.02 T
(gister \336le descriptor 0 and a dispatch routine with) 316.5 664.02 T
(the system. File descriptor 0 is the def) 72 650.02 T
(ault descriptor for standard input, which is usually k) 254.53 650.02 T
(e) 504.72 650.02 T
(yboard) 509.87 650.02 T
(input. A dif) 72 636.02 T
(ferent \336le descriptor could be substituted for 0 assuming it is opened to a
suitable k) 127.37 636.02 T
(e) 526.21 636.02 T
(y-) 531.36 636.02 T
(board de) 72 622.02 T
(vice. The dispatch routine that is re) 113.35 622.02 T
(gistered with the \336le descriptor is the routine that will) 282.14 622.02 T
(handle all input processing for that \336le descriptor) 72 608.02 T
(. Each time the user types input at the k) 307.64 608.02 T
(e) 496.84 608.02 T
(yboard,) 501.98 608.02 T
(DPCL will recognize that input has been supplied and will in) 72 594.02 T
(v) 364.84 594.02 T
(ok) 370.6 594.02 T
(e the re) 382.48 594.02 T
(gistered dispatch routine.) 417.61 594.02 T
(After the input has been processed the dispatch routine must return to the
caller so the system can) 72 580.02 T
(continue to monitor other input streams and act on them as well.) 72 566.02 T
-0.22 (Dispatch routines accept a single v) 72 545.02 P
-0.22 (alue, an inte) 237.56 545.02 P
-0.22 (ger) 295.26 545.02 P
-0.22 (, as its input ar) 310.1 545.02 P
-0.22 (gument. The v) 379.33 545.02 P
-0.22 (alue represents the \336le) 448.25 545.02 P
(descriptor or signal number) 72 531.02 T
(. The function prototype is) 203.65 531.02 T
4 F
(int dispatch \050int sig_or_fd\051) 108 510.02 T
1 F
-0.08 (The function return v) 72 489.02 P
-0.08 (alue indicates whether the sock) 173.77 489.02 P
-0.08 (et has reached the end-of-\336le. The dispatch func-) 323.3 489.02 P
(tion must return a -1 when an end-of-\336le is reached. Otherwise it should
return 0. Signal e) 72 475.02 T
(v) 503.63 475.02 T
(ent dis-) 509.45 475.02 T
(patch routines do not reach an end-of-\336le condition, and the return v) 72
461.02 T
(alue is ignored.) 399.64 461.02 T
96 433.82 72 433.82 2 L
V
0.6 H
0 Z
N
0 F
(2.1.3) 72 435.02 T
142.33 433.82 96 433.82 2 L
V
N
( Asynchr) 96 435.02 T
270.13 433.82 142.12 433.82 2 L
V
N
(onous and Semi-Asynchr) 142.12 435.02 T
315.59 433.82 269.92 433.82 2 L
V
N
(onous Pr) 269.92 435.02 T
374.7 433.82 315.37 433.82 2 L
V
N
(ogramming) 315.37 435.02 T
1 F
(Ev) 72 420.02 T
(ent dri) 85.15 420.02 T
(v) 115.85 420.02 T
(en programming may tak) 121.67 420.02 T
(e on either of tw) 242.53 420.02 T
(o forms, or perhaps a combination of both. The) 321.06 420.02 T
(\336rst is asynchronous programming. Purely asynchronous programming sets up s
pecial functions,) 72 406.02 T
(kno) 72 392.02 T
(wn as callbacks, that are acti) 89.7 392.02 T
(v) 226.69 392.02 T
(ated when certain e) 232.39 392.02 T
(v) 325.06 392.02 T
(ents occur) 330.88 392.02 T
(. In DPCL the e) 379.2 392.02 T
(v) 454.56 392.02 T
(ents are often) 460.38 392.02 T
(ackno) 72 378.02 T
(wledgement responses to service requests sent to daemons on other hosts. When
the service) 100.36 378.02 T
(request is sent a callback is set up so it can be acti) 72 364.02 T
(v) 310.99 364.02 T
(ated when the ackno) 316.69 364.02 T
(wledgement arri) 414.7 364.02 T
(v) 492.71 364.02 T
(es. There is) 498.53 364.02 T
(only one ackno) 72 350.02 T
(wledgement, so when it arri) 145.02 350.02 T
(v) 278.36 350.02 T
(es the callback can be remo) 284.18 350.02 T
(v) 416.29 350.02 T
(ed. The k) 422.11 350.02 T
(e) 466.98 350.02 T
(y issues are that) 472.13 350.02 T
(the callback is re) 72 336.02 T
(gistered, the service request is sent, and control returns immediately to the
caller) 152.8 336.02 T
(before the service is granted or denied. The re) 72 322.02 T
(gistered callback function tak) 292.08 322.02 T
(es action when the) 433.6 322.02 T
(ackno) 72 308.02 T
(wledgement arri) 100.36 308.02 T
(v) 178.37 308.02 T
(es.) 184.19 308.02 T
(In contrast, semi-asynchronous programming, or pseudo-asynchronous
programming, does not re) 72 287.02 T
(gis-) 539.75 287.02 T
(ter a callback, and does not return control until the service request has been
granted or denied. These) 72 273.02 T
(functions are also called blocking functions or blocking service requests,
because the) 72 259.02 T
(y block the e) 479.74 259.02 T
(x) 541.21 259.02 T
(e-) 547.03 259.02 T
-0.39 (cution of the caller until the service request has been processed. The
underlying system must continue) 72 245.02 P
(to process e) 72 231.02 T
(v) 128.35 231.02 T
(ents and therefore it must continue to in) 134.17 231.02 T
(v) 324.67 231.02 T
(ok) 330.43 231.02 T
(e callback functions that may mak) 342.31 231.02 T
(e addi-) 506.5 231.02 T
(tional service requests e) 72 217.02 T
(v) 186.67 217.02 T
(en though the e) 192.49 217.02 T
(x) 265.97 217.02 T
(ecution of the caller is temporarily block) 271.79 217.02 T
(ed. The adv) 466.97 217.02 T
(antage) 522.98 217.02 T
(to the user is that series of services can be requested in a style that is
quite similar to procedural pro-) 72 203.02 T
(gramming, what most programmers are accustomed to using.) 72 189.02 T
(The naming con) 72 168.02 T
(v) 149.51 168.02 T
(ention for blocking service requests is to pre\336x the letter \322b\323 to
the name of the) 155.33 168.02 T
(asynchronous service request routine. F) 72 154.02 T
(or e) 262.12 154.02 T
(xample,) 280.26 154.02 T
4 F
(connect) 321.59 154.02 T
1 F
( is an asynchronous service request) 371.99 154.02 T
(routine that requests a connection be established to a process. Because it is
asynchronous it requires) 72 140.02 T
(that a callback function be pro) 72 126.02 T
(vided to tak) 217.45 126.02 T
(e action when the ackno) 274 126.02 T
(wledgement arri) 389.66 126.02 T
(v) 467.68 126.02 T
(es. The corre-) 473.5 126.02 T
(sponding blocking request is) 72 112.02 T
4 F
(bconnect) 212.66 112.02 T
1 F
(. Since it is a blocking service request that will not return) 270.26 112.02 T
(control to the caller until the request has succeeded or f) 72 98.02 T
(ailed, the action to be tak) 337.15 98.02 T
(en may follo) 457.68 98.02 T
(w the) 518.04 98.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 22
%%Page: "17" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(17) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(blocking request call in the calling code.) 72 678.02 T
89.5 643.28 72 643.28 2 L
V
0.7 H
0 Z
N
89.5 655.9 72 655.9 2 L
V
N
0 14 Q
(2.2) 72 644.68 T
179.73 643.28 89.5 643.28 2 L
V
N
179.73 655.9 89.5 655.9 2 L
V
N
( Setting Up a T) 89.5 644.68 T
278.37 643.28 178.44 643.28 2 L
V
N
278.37 655.9 178.44 655.9 2 L
V
N
(ool to Use DPCL) 178.44 644.68 T
1 12 Q
(As w) 72 623.02 T
(as mentioned in an earlier section, a typical sequence of operations a tool
might use is:) 96.88 623.02 T
2 9 Q
(1.) 117 602.02 T
1 12 Q
(connect to the process or application,) 130.54 602.02 T
2 9 Q
(2.) 117 584.02 T
1 12 Q
(e) 130.54 584.02 T
(xpand the source tree,) 135.68 584.02 T
2 9 Q
(3.) 117 566.02 T
1 12 Q
(\336nd the locations where instrumentation is desired,) 130.54 566.02 T
2 9 Q
(4.) 117 548.02 T
1 12 Q
(set up an) 130.54 548.02 T
(y phases if the) 173.02 548.02 T
(y are to be used,) 241.82 548.02 T
2 9 Q
(5.) 117 530.02 T
1 12 Q
(allocate data storage for the instrumentation data,) 130.54 530.02 T
2 9 Q
(6.) 117 512.02 T
1 12 Q
(install and acti) 130.54 512.02 T
(v) 200.23 512.02 T
(ate the instrumentation,) 205.93 512.02 T
2 9 Q
(7.) 117 494.02 T
1 12 Q
(g) 130.54 494.02 T
(ather the data and process it using data callback functions,) 136.48 494.02 T
2 9 Q
(8.) 117 476.02 T
1 12 Q
(remo) 130.54 476.02 T
(v) 155.02 476.02 T
(e the data and instrumentation,) 160.84 476.02 T
2 9 Q
(9.) 117 458.02 T
1 12 Q
(and \336nally) 130.54 458.02 T
(, disconnect from the application.) 180.76 458.02 T
(Each of these steps will be e) 72 437.02 T
(xamined in detail in later sections. Before an) 207.79 437.02 T
(y of that can tak) 422.24 437.02 T
(e place the) 499.44 437.02 T
-0.04 (end-user) 72 423.02 P
-0.04 (-tool must be set up to run in an asynchronous en) 113.08 423.02 P
-0.04 (vironment. The minimum requirements are) 348.21 423.02 P
(quite simple. The tool must \336rst re) 72 409.02 T
(gister all of the system callback functions with the function) 237.49 409.02 T
4 F
(Ais_initialize) 72 395.02 T
1 F
(, then it must enter the main e) 172.8 395.02 T
(v) 315.16 395.02 T
(ent loop with the function) 320.98 395.02 T
4 F
(Ais_main_loop) 447.97 395.02 T
1 F
(.) 541.57 395.02 T
(This is done as follo) 72 381.02 T
(ws.) 169.03 381.02 T
4 F
(main\050void\051) 108 360.02 T
({) 108 340.02 T
(Ais_initialize\050\051;) 144 320.02 T
(Ais_main_loop\050\051;) 144 300.02 T
(}) 108 280.02 T
1 F
(Of course the tool may also do whate) 72 259.02 T
(v) 250.67 259.02 T
(er additional initialization is desired for proper tool initializa-) 256.49
259.02 T
(tion, b) 72 245.02 T
(ut it should generally be done before the call to) 102.43 245.02 T
4 F
(Ais_main_loop) 331.73 245.02 T
1 F
(. The tool will not e) 425.33 245.02 T
(xit this) 519.82 245.02 T
(function until asynchronous operation of the tool is complete.) 72 231.02 T
89.5 196.28 72 196.28 2 L
V
N
89.5 208.9 72 208.9 2 L
V
N
0 14 Q
(2.3) 72 197.68 T
103.11 196.28 89.5 196.28 2 L
V
N
103.11 208.9 89.5 208.9 2 L
V
N
( A) 89.5 197.68 T
207 196.28 102.76 196.28 2 L
V
N
207 208.9 102.76 208.9 2 L
V
N
(pplication and Pr) 102.76 197.68 T
319.11 196.28 206.75 196.28 2 L
V
N
319.11 208.9 206.75 208.9 2 L
V
N
(ocess Management) 206.75 197.68 T
96 169.82 72 169.82 2 L
V
0.6 H
N
0 12 Q
(2.3.1) 72 171.02 T
111 169.82 96 169.82 2 L
V
N
( W) 96 171.02 T
220.78 169.82 110.1 169.82 2 L
V
N
(orking with Single-Pr) 110.1 171.02 T
262.21 169.82 220.56 169.82 2 L
V
N
(ocess Pr) 220.56 171.02 T
299.99 169.82 262 169.82 2 L
V
N
(ograms) 262 171.02 T
1 F
(Serial applications are programs that use only a single Unix process. DPCL
allo) 72 156.02 T
(ws tw) 454.66 156.02 T
(o methods of) 482.87 156.02 T
(access to serial applications. Since there is only a single process to manage,
one may use the) 72 142.02 T
4 F
(Pro-) 518.26 142.02 T
(cess) 72 128.02 T
1 F
( class directly) 100.8 128.02 T
(. This technique is described in this section. On the other hand, it may also
be) 166.01 128.02 T
(thought of as an application that contains a single process, so the) 72 114.02
T
4 F
(Application) 385.63 114.02 T
1 F
( class may also be) 464.83 114.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 23
%%Page: "18" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(18) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(used. The latter technique is described in Section 2.3.1.3, \322Disconnect
from a Running Process\323 on) 72 678.02 T
(page 19.) 72 664.02 T
(All code e) 72 643.02 T
(xamples in this section require the follo) 121.14 643.02 T
(wing header \336le.) 310.82 643.02 T
4 F
(#include <Process.h>) 108 622.02 T
6 10 Q
(2.3.1.1) 72 597.35 T
( Create a Process Class Object) 99.5 597.35 T
1 12 Q
(The) 72 583.02 T
4 F
(Process) 93.66 583.02 T
1 F
( class is a DPCL data type that describes the attrib) 144.06 583.02 T
(utes needed for tracking and manip-) 384.46 583.02 T
-0.28 (ulating Unix processes.) 72 569.02 P
4 F
-0.67 (Process) 186.48 569.02 P
1 F
-0.28 ( data objects may be initialized using one of se) 236.88 569.02 P
-0.28 (v) 458.37 569.02 P
-0.28 (eral functions. One) 464.19 569.02 P
-0.18 (may use a constructor) 72 555.02 P
-0.18 (, a cop) 175.96 555.02 P
-0.18 (y constructor) 207.14 555.02 P
-0.18 (, or the assignment operator) 269.46 555.02 P
-0.18 (. The def) 401.73 555.02 P
-0.18 (ault constructor creates) 444.24 555.02 P
(the necessary storage b) 72 541.02 T
(ut does not initialize the object to a v) 182.72 541.02 T
(alid application process. The follo) 359.75 541.02 T
(wing) 523.09 541.02 T
(e) 72 527.02 T
(xamples illustrate dif) 77.15 527.02 T
(ferent w) 178.18 527.02 T
(ays the data objects may be initialized to v) 217.7 527.02 T
(alid application processes.) 421.38 527.02 T
(The follo) 72 506.02 T
(wing e) 116.03 506.02 T
(xample illustrates the simplest method of creating a) 148.18 506.02 T
4 F
(Process) 398.82 506.02 T
1 F
( object that represents) 449.22 506.02 T
(an application process. In this e) 72 492.02 T
(xample the process is currently e) 223.13 492.02 T
(x) 380.58 492.02 T
(ecuting on a host machine with the) 386.4 492.02 T
(IP host name of \322myhost.xyz.edu\323. The process ID is 12345. Note that no
connection is as yet estab-) 72 478.02 T
(lished with the process. It is purely a local data structure that resides
within the end-user) 72 464.02 T
(-tool. No) 495.02 464.02 T
-0.35 (attempt is made to determine whether there is actually a host with that
name, or a process with that ID) 72 450.02 P
(running on the indicated host.) 72 436.02 T
4 F
(Process p\050\322myhost.xyz.edu\323, 12345\051;) 108 415.02 T
1 F
(This ne) 72 394.02 T
(xt e) 107.48 394.02 T
(xample is identical to the pre) 124.97 394.02 T
(vious with the follo) 263.65 394.02 T
(wing e) 357.02 394.02 T
(xception. Each process also has a) 389.17 394.02 T
(task identi\336er that may be used for the purpose of tracking its rank within
a parallel application.) 72 380.02 T
(When the task identi\336er is not e) 72 366.02 T
(xplicitly pro) 224.47 366.02 T
(vided it is set to zero. When pro) 283.3 366.02 T
(vided, the last parameter) 436.43 366.02 T
(on the constructor determines the v) 72 352.02 T
(alue to which it is set.) 240.67 352.02 T
4 F
(#include <Process.h>) 108 331.02 T
(Process p\050\322myhost.xyz.edu\323, 12345, 3\051;) 108 311.02 T
1 F
(The abo) 72 290.02 T
(v) 110.81 290.02 T
(e e) 116.63 290.02 T
(xamples use non-def) 130.1 290.02 T
(ault constructors directly to assign v) 229.3 290.02 T
(alues to the object. In the ne) 402.65 290.02 T
(xt) 537.44 290.02 T
(e) 72 276.02 T
(xample a non-def) 77.15 276.02 T
(ault constructor and a cop) 161 276.02 T
(y constructor is used to assign v) 284.86 276.02 T
(alues to the object.) 437.88 276.02 T
4 F
(Process p = Process\050\322myhost.xyz.edu\323, 12345\051;) 108 255.02 T
1 F
-0.11 (The ne) 72 234.02 P
-0.11 (xt e) 104.69 234.02 P
-0.11 (xample illustrates the use of a def) 122.07 234.02 P
-0.11 (ault constructor and an assignment operator to assign v) 282.58 234.02 P
-0.11 (al-) 545.34 234.02 P
-0.39 (ues to an object. Of course the right-hand-side of the assignment
operator may be an) 72 220.02 P
-0.39 (y v) 471.22 220.02 P
-0.39 (alid object and) 485.53 220.02 P
(need not strictly be a temporary object created directly by a constructor) 72
206.02 T
(, as is illustrated here.) 413.77 206.02 T
4 F
(Process p;) 108 185.02 T
(p = Process\050\322myhost.xyz.edu\323, 12345\051;) 108 165.02 T
6 10 Q
(2.3.1.2) 72 140.35 T
( Connect to a Running Process) 99.5 140.35 T
1 12 Q
(In order to perform an) 72 126.02 T
(y subsequent operation on a process, the end-user) 178.45 126.02 T
(-tool must \336rst establish a) 416.16 126.02 T
(connection to the process. This may be done with a blocking service request,
or with a non-blocking) 72 112.02 T
(service request. The simplest approach is to use the) 72 98.02 T
4 F
(Process::bconnect) 321.29 98.02 T
1 F
( member function,) 443.69 98.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 24
%%Page: "19" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(19) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.02 (which is a blocking service request. The service being requested is that
DPCL establish a connection) 72 678.02 P
-0.04 (to the indicated process. This function does not return control to the
caller until the requested service) 72 664.02 P
(has either succeeded or f) 72 650.02 T
(ailed.) 190.5 650.02 T
4 F
(p.bconnect\050\051;) 108 629.02 T
1 F
(A second method of connecting to the process uses a non-blocking service
request. In this case the) 72 608.02 T
(request is sent b) 72 594.02 T
(ut control is returned immediately to the caller) 148.75 594.02 T
(. The function does not w) 371.06 594.02 T
(ait until the) 493.6 594.02 T
(request succeeds or f) 72 580.02 T
(ails. Instead, a callback function is pro) 172.18 580.02 T
(vided that will process the ackno) 356.63 580.02 T
(wledge-) 513.97 580.02 T
(ment of success or f) 72 566.02 T
(ailure when it arri) 167.86 566.02 T
(v) 253.2 566.02 T
(es.) 259.02 566.02 T
4 F
(int tag = ...;) 108 545.02 T
(void cb\050GCBSysType s,GCBTagType t,GCBObjType o,GCBMsgType m\051;) 108
525.02 T
(p.connect\050cb, \050GCBTagType\051tag\051;) 108 505.02 T
1 F
-0.16 (Each of these e) 72 484.02 P
-0.16 (xamples requests a connection to the process indicated in the) 144.32
484.02 P
4 F
-0.38 (Process) 438.04 484.02 P
1 F
-0.16 ( object) 488.44 484.02 P
4 F
-0.38 (p) 523.45 484.02 P
1 F
-0.16 (. The) 530.65 484.02 P
-0.07 (service request may f) 72 470.02 P
-0.07 (ail if the host does not e) 173.97 470.02 P
-0.07 (xist or is unreachable, if the requested process identi\336er) 288.02
470.02 P
(does not correspond to an e) 72 456.02 T
(xisting process on that host, or if the process e) 203.46 456.02 T
(xists b) 425.26 456.02 T
(ut the user does not) 456.02 456.02 T
(ha) 72 442.02 T
(v) 83.09 442.02 T
(e the necessary access pri) 88.91 442.02 T
(vile) 211.22 442.02 T
(ges to connect to the process.) 229.04 442.02 T
(If the request succeeds the end-user) 72 421.02 T
(-tool may request additional services that af) 242.7 421.02 T
(fect the process, such) 452.36 421.02 T
(as installing and acti) 72 407.02 T
(v) 170.03 407.02 T
(ating probes.) 175.73 407.02 T
6 10 Q
(2.3.1.3) 72 382.35 T
(Disconnect from a Running Process) 102 382.35 T
1 12 Q
(When an end-user) 72 368.02 T
(-tool has \336nished with a process it may release the resources associated
with the) 159.06 368.02 T
(connection by disconnecting from the process. This may be done with a blocking
or a non-blocking) 72 354.02 T
(service request. The simplest approach is to use the) 72 340.02 T
4 F
(Process::bdisconnect) 321.29 340.02 T
1 F
( member function,) 465.29 340.02 T
-0.23 (which is a blocking service request. The service being requested is that
DPCL release a connection to) 72 326.02 P
-0.43 (the indicated process. This function does not return control to the
caller until the requested service has) 72 312.02 P
(either succeeded or f) 72 298.02 T
(ailed.) 171.5 298.02 T
4 F
(p.bdisconnect\050\051;) 108 277.02 T
1 F
-0.01 (A second method of disconnecting from the process uses a non-blocking
service request. In this case) 72 256.02 P
(the request is sent b) 72 242.02 T
(ut control is returned immediately to the caller) 166.42 242.02 T
(. The function does not w) 388.73 242.02 T
(ait until) 511.26 242.02 T
(the request succeeds or f) 72 228.02 T
(ails. Instead, a callback function is pro) 189.84 228.02 T
(vided that will process the ackno) 374.29 228.02 T
(wl-) 531.64 228.02 T
(edgement of success or f) 72 214.02 T
(ailure when it arri) 190.51 214.02 T
(v) 275.86 214.02 T
(es.) 281.68 214.02 T
4 F
(int tag = ...;) 108 193.02 T
(void cb\050GCBSysType s,GCBTagType t,GCBObjType o,GCBMsgType m\051;) 108
173.02 T
(p.connect\050cb, \050GCBTagType\051tag\051;) 108 153.02 T
1 F
(Each of these e) 72 132.02 T
(xamples requests that the end-user) 144.79 132.02 T
(-tool disconnect from the process indicated in the) 309.85 132.02 T
4 F
(Process) 72 118.02 T
1 F
( object) 122.4 118.02 T
4 F
(p) 157.73 118.02 T
1 F
(. The service request may f) 164.93 118.02 T
(ail if process is not connected.) 294.77 118.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 25
%%Page: "20" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(20) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
96 676.82 72 676.82 2 L
0 X
V
0.6 H
0 Z
N
0 12 Q
(2.3.2) 72 678.02 T
111 676.82 96 676.82 2 L
V
N
( W) 96 678.02 T
233.44 676.82 110.1 676.82 2 L
V
N
(orking with Multiple-Pr) 110.1 678.02 T
274.87 676.82 233.22 676.82 2 L
V
N
(ocess Pr) 233.22 678.02 T
312.65 676.82 274.66 676.82 2 L
V
N
(ograms) 274.66 678.02 T
1 F
-0.01 (Multiple process programs may be handled in tw) 72 663.02 P
-0.01 (o w) 306.79 663.02 P
-0.01 (ays. The) 324.32 663.02 P
-0.01 (y may be treated as a loosely connected) 364.79 663.02 P
(group of processes, or the processes may be e) 72 649.02 T
(xplicitly grouped together in an) 290.76 649.02 T
4 F
(Application) 445.08 649.02 T
1 F
( class) 524.28 649.02 T
(object. This section addresses the latter approach.) 72 635.02 T
(All code e) 72 614.02 T
(xamples in this section require the follo) 121.14 614.02 T
(wing header \336le.) 310.82 614.02 T
4 F
(#include <Application.h>) 108 593.02 T
6 10 Q
(2.3.2.1) 72 568.35 T
( Create an Application Class Object) 99.5 568.35 T
1 12 Q
(There are tw) 72 554.02 T
(o constructors for the) 132.52 554.02 T
4 F
(Application) 237.83 554.02 T
1 F
( class -- the def) 317.03 554.02 T
(ault constructor and the cop) 390.22 554.02 T
(y con-) 523.4 554.02 T
-0.22 (structor) 72 540.02 P
-0.22 (. Initially an) 108 540.02 P
4 F
-0.52 (Application) 168.68 540.02 P
1 F
-0.22 ( object is created as an empty application. Application processes)
247.88 540.02 P
(represented by objects of type) 72 526.02 T
4 F
(Process) 218.96 526.02 T
1 F
( may be added to or remo) 269.36 526.02 T
(v) 391.82 526.02 T
(ed from the) 397.64 526.02 T
4 F
(Application) 455.96 526.02 T
1 F
-0.25 (object as needed.) 72 512.02 P
4 F
-0.59 (Application) 156.57 512.02 P
1 F
-0.25 ( objects are inde) 235.77 512.02 P
-0.25 (x) 313.16 512.02 P
-0.25 (ed collections of) 318.98 512.02 P
4 F
-0.59 (Process) 400.55 512.02 P
1 F
-0.25 ( objects, so indi) 450.95 512.02 P
-0.25 (vidual) 525.25 512.02 P
(processes within an) 72 498.02 T
4 F
(Application) 168.98 498.02 T
1 F
( object may be referenced by kno) 248.18 498.02 T
(wing its inde) 407.83 498.02 T
(x.) 469.66 498.02 T
4 F
(Application app1;) 108 477.02 T
(Process p\050\322kim\323, 1080\051;) 108 457.02 T
(app1.add_process\050p\051;) 108 437.02 T
(Application app2 = app1;) 108 417.02 T
1 F
-0.36 (In the abo) 72 396.02 P
-0.36 (v) 119.09 396.02 P
-0.36 (e e) 124.91 396.02 P
-0.36 (xample) 138.02 396.02 P
4 F
-0.87 (app1) 175.99 396.02 P
1 F
-0.36 ( is created initially as an empty application. A process is then added
to the) 204.79 396.02 P
-0.01 (application. Note that so f) 72 382.02 P
-0.01 (ar there has been no attempt to v) 196.18 382.02 P
-0.01 (erify that the process actually e) 352.26 382.02 P
-0.01 (xists nor to) 501.68 382.02 P
(connect to the process.) 72 368.02 T
4 F
(app2) 184.31 368.02 T
1 F
( is created as a cop) 213.11 368.02 T
(y of) 303.29 368.02 T
4 F
(app1) 325.28 368.02 T
1 F
( using the cop) 354.08 368.02 T
(y constructor) 420.96 368.02 T
(.) 483.29 368.02 T
6 10 Q
(2.3.2.2) 72 343.35 T
( Adding and Remo) 99.5 343.35 T
(ving Processes from an Application Class Object) 176.31 343.35 T
4 12 Q
-0.42 (Process) 72 322.02 P
1 F
-0.17 ( objects may be added and remo) 122.4 322.02 P
-0.17 (v) 275.8 322.02 P
-0.17 (ed from an) 281.62 322.02 P
4 F
-0.42 (Application) 336.08 322.02 P
1 F
-0.17 ( object at an) 415.28 322.02 P
-0.17 (y time. F) 472.89 322.02 P
-0.17 (or e) 515.37 322.02 P
-0.17 (xam-) 533.34 322.02 P
(ple, we might continue the e) 72 308.02 T
(xample from the pre) 207.8 308.02 T
(vious section with) 305.15 308.02 T
4 F
(Process q\050\322ted\323, 7693\051;) 108 287.02 T
(app1.add_process\050q\051;) 108 267.02 T
1 F
(A w) 72 246.02 T
(ord of caution is in order here. As mentioned before,) 92.21 246.02 T
4 F
(Application) 347.48 246.02 T
1 F
( objects are inde) 426.68 246.02 T
(x) 504.82 246.02 T
(ed collec-) 510.64 246.02 T
-0.34 (tions of) 72 232.02 P
4 F
-0.82 (Process) 110.65 232.02 P
1 F
-0.34 ( objects. The \336rst v) 161.05 232.02 P
-0.34 (alid inde) 251.71 232.02 P
-0.34 (x is al) 292.86 232.02 P
-0.34 (w) 320.72 232.02 P
-0.34 (ays zero and the last v) 329.27 232.02 P
-0.34 (alid inde) 433.57 232.02 P
-0.34 (x is one less than) 474.71 232.02 P
(the v) 72 218.02 T
(alue returned by the function) 95.36 218.02 T
4 F
(get_count) 237 218.02 T
1 F
(. The inde) 301.8 218.02 T
(x map is guaranteed to be dense, that is,) 349.94 218.02 T
-0.28 (there are no g) 72 204.02 P
-0.28 (aps in the inde) 136.74 204.02 P
-0.28 (x range. Each time that a process is remo) 205.39 204.02 P
-0.28 (v) 399.94 204.02 P
-0.28 (ed from an application the map-) 405.76 204.02 P
(ping of inde) 72 190.02 T
(x) 129.82 190.02 T
(es to processes changes. When a process is added to an application it is
placed at the) 135.64 190.02 T
(ne) 72 176.02 T
(xt a) 83.15 176.02 T
(v) 100.57 176.02 T
(ailable inde) 106.27 176.02 T
(x at the end of the inde) 161.75 176.02 T
(x range. When a process is remo) 271.55 176.02 T
(v) 427.66 176.02 T
(ed all processes with) 433.48 176.02 T
(inde) 72 162.02 T
(x) 92.48 162.02 T
(es higher than the remo) 98.3 162.02 T
(v) 210.77 162.02 T
(ed process are shifted do) 216.59 162.02 T
(wnw) 334.92 162.02 T
(ards to close the g) 358.13 162.02 T
(ap.) 444.72 162.02 T
6 10 Q
(2.3.2.3) 72 137.35 T
( Obtain a P) 99.5 137.35 T
(arallel Application Process List) 146.05 137.35 T
1 12 Q
(When the application of interest is an IBM P) 72 123.02 T
(arallel Operating En) 286.46 123.02 T
(vironment \050POE\051 application, a) 383.29 123.02 T
(f) 72 109.02 T
(aster method e) 75.88 109.02 T
(xists for loading the processes into the application. If one kno) 145.68
109.02 T
(ws the parent POE pro-) 441.01 109.02 T
-0.45 (cess ID one may create a) 72 95.02 P
4 F
-1.09 (PoeApp) 191.9 95.02 P
1 F
-0.45 ( and load the processes automatically) 235.1 95.02 P
-0.45 (. The) 411.02 95.02 P
4 F
-1.09 (PoeApp) 437.77 95.02 P
1 F
-0.45 ( class is deri) 480.97 95.02 P
-0.45 (v) 538.3 95.02 P
-0.45 (ed) 544.12 95.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 26
%%Page: "21" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(21) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(from the) 72 678.02 T
4 F
(Application) 115.99 678.02 T
1 F
( class so all functions a) 195.19 678.02 T
(v) 305.94 678.02 T
(ailable in) 311.64 678.02 T
4 F
(Application) 358.97 678.02 T
1 F
( are also a) 438.17 678.02 T
(v) 486.24 678.02 T
(ailable in) 491.94 678.02 T
4 F
(PoeApp) 72 664.02 T
1 F
(. The process list may be loaded using either a blocking or a non-blocking
service request.) 115.2 664.02 T
(The blocking service request is sho) 72 650.02 T
(wn in the ne) 240.67 650.02 T
(xt e) 299.48 650.02 T
(xample.) 316.97 650.02 T
4 F
(app1.bread_config\050\322john\323, 7177\051;) 108 629.02 T
1 F
(This e) 72 608.02 T
(xample asserts that the parent POE process of an interesting application may
be found on a) 101.48 608.02 T
(machine with a host name of \322john\323 and it has a process ID of 7177. This
request queries the system) 72 594.02 T
(for the list of processes associated with that particular POE application.
That information is then) 72 580.02 T
(loaded into the) 72 566.02 T
4 F
(PoeApp) 146.33 566.02 T
1 F
( object) 189.53 566.02 T
4 F
(app1) 224.86 566.02 T
1 F
(. Since it is a blocking request, control does not return to the) 253.66
566.02 T
(caller until the request has either succeeded or f) 72 552.02 T
(ailed.) 300.48 552.02 T
-0.4 (A second method of obtaining the POE application con\336guration uses a
non-blocking service request.) 72 531.02 P
-0.09 (In this case the request is sent b) 72 517.02 P
-0.09 (ut control is returned immediately to the caller) 222.78 517.02 P
-0.09 (. The function does not) 444.46 517.02 P
(w) 72 503.02 T
(ait until the request succeeds or f) 80.54 503.02 T
(ails. Instead, a callback function is pro) 238.39 503.02 T
(vided that will process the) 422.84 503.02 T
(ackno) 72 489.02 T
(wledgement of success or f) 100.36 489.02 T
(ailure when it arri) 230.87 489.02 T
(v) 316.21 489.02 T
(es.) 322.03 489.02 T
4 F
(int tag = ...;) 108 468.02 T
(void cb\050GCBSysType s,GCBTagType t,GCBObjType o,GCBMsgType m\051;) 108
448.02 T
(app1.read_config\050\322john\323, 7177, cb, \050GCBTagType\051tag\051;) 108
428.02 T
1 F
-0.21 (Each of these e) 72 407.02 P
-0.21 (xamples requests a process list be loaded into the) 144.16 407.02 P
4 F
-0.51 (PoeApp) 381.23 407.02 P
1 F
-0.21 ( object. The service request) 424.43 407.02 P
(may f) 72 393.02 T
(ail if the host does not e) 99.54 393.02 T
(xist or is unreachable, if the requested process identi\336er does not corre-)
214.02 393.02 T
-0.3 (spond to an e) 72 379.02 P
-0.3 (xisting process on that host, if the process e) 134.59 379.02 P
-0.3 (xists b) 341.03 379.02 P
-0.3 (ut the user does not ha) 371.5 379.02 P
-0.3 (v) 477.43 379.02 P
-0.3 (e the necessary) 483.25 379.02 P
(access pri) 72 365.02 T
(vile) 118.68 365.02 T
(ges to access the process information, or if it e) 136.5 365.02 T
(xists b) 358.94 365.02 T
(ut it is not the root process of a) 389.71 365.02 T
(POE application.) 72 351.02 T
6 10 Q
(2.3.2.4) 72 326.35 T
( Connect to a Running Application) 99.5 326.35 T
1 12 Q
-0.01 (In order to perform an) 72 312.02 P
-0.01 (y subsequent operation on an application, the end-user) 178.4 312.02 P
-0.01 (-tool must \336rst establish) 439.37 312.02 P
(a connection to all processes within the application. This may be done with a
blocking or a non-) 72 298.02 T
-0.4 (blocking service request. The simplest approach is to use the) 72 284.02 P
4 F
-0.96 (Application::bconnect) 362.28 284.02 P
1 F
-0.4 ( member) 513.48 284.02 P
(function, which is a blocking service request. The service being requested is
that DPCL establish a) 72 270.02 T
(connection to all processes within the indicated application. This function
does not return control to) 72 256.02 T
(the caller until the requested service has either succeeded or f) 72 242.02 T
(ailed.) 366.46 242.02 T
4 F
(app1.bconnect\050\051;) 108 221.02 T
1 F
(A second method of connecting to the process uses a non-blocking service
request. In this case the) 72 200.02 T
(request is sent b) 72 186.02 T
(ut control is returned immediately to the caller) 148.75 186.02 T
(. The function does not w) 371.06 186.02 T
(ait until the) 493.6 186.02 T
(request succeeds or f) 72 172.02 T
(ails. Instead, a callback function is pro) 172.18 172.02 T
(vided that will process the ackno) 356.63 172.02 T
(wledge-) 513.97 172.02 T
(ment of success or f) 72 158.02 T
(ailure when it arri) 167.86 158.02 T
(v) 253.2 158.02 T
(es.) 259.02 158.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 27
%%Page: "22" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(22) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
4 12 Q
0 X
(int tag = ...;) 108 678.02 T
(void cb\050GCBSysType s,GCBTagType t,GCBObjType o,GCBMsgType m\051;) 108
658.02 T
(app1.connect\050cb, \050GCBTagType\051tag\051;) 108 638.02 T
1 F
(Each of these e) 72 617.02 T
(xamples requests a connection to the processes included in the) 144.79 617.02 T
4 F
(Application) 447.41 617.02 T
1 F
-0.25 (object) 72 603.02 P
4 F
-0.6 (app1) 104.08 603.02 P
1 F
-0.25 (. The service request may f) 132.88 603.02 P
-0.25 (ail if the host does not e) 261.47 603.02 P
-0.25 (xist or is unreachable, if the requested) 374.45 603.02 P
(process identi\336er does not correspond to an e) 72 589.02 T
(xisting process on that host, or if the process e) 288.78 589.02 T
(xists b) 510.58 589.02 T
(ut) 541.34 589.02 T
(the user does not ha) 72 575.02 T
(v) 167.08 575.02 T
(e the necessary access pri) 172.9 575.02 T
(vile) 295.21 575.02 T
(ges to connect to the process.) 313.03 575.02 T
(If the request succeeds the end-user) 72 554.02 T
(-tool may request additional services that af) 242.7 554.02 T
(fect the processes,) 452.36 554.02 T
(such as installing and acti) 72 540.02 T
(v) 195.02 540.02 T
(ating probes.) 200.72 540.02 T
6 10 Q
(2.3.2.5) 72 515.35 T
( Disconnect from an Application) 99.5 515.35 T
1 12 Q
(When an end-user) 72 501.02 T
(-tool has \336nished with an application it may release the resources
associated with) 159.06 501.02 T
(the connection by disconnecting from the application. This may be done with a
blocking or a non-) 72 487.02 T
(blocking service request. The simplest approach is to use the) 72 473.02 T
4 F
(Application::bdisconnect) 366.29 473.02 T
1 F
(member function, which is a blocking service request. The service being
requested is that DPCL) 72 459.02 T
(release a connection to all processes within the indicated application. This
function does not return) 72 445.02 T
(control to the caller until the requested service has either succeeded or f)
72 431.02 T
(ailed.) 415.79 431.02 T
4 F
(app1.bdisconnect\050\051;) 108 410.02 T
1 F
(A second method of disconnecting from the application uses a non-blocking
service request. In this) 72 389.02 T
(case the request is sent b) 72 375.02 T
(ut control is returned immediately to the caller) 190.07 375.02 T
(. The function does not w) 412.38 375.02 T
(ait) 534.91 375.02 T
(until the request succeeds or f) 72 361.02 T
(ails. Instead, a callback function is pro) 214.85 361.02 T
(vided that will process the) 399.3 361.02 T
(ackno) 72 347.02 T
(wledgement of success or f) 100.36 347.02 T
(ailure when it arri) 230.87 347.02 T
(v) 316.21 347.02 T
(es.) 322.03 347.02 T
4 F
(int tag = ...;) 108 326.02 T
(void cb\050GCBSysType s,GCBTagType t,GCBObjType o,GCBMsgType m\051;) 108
306.02 T
(app1.disconnect\050cb, \050GCBTagType\051tag\051;) 108 286.02 T
1 F
(Each of these e) 72 265.02 T
(xamples requests that the end-user) 144.79 265.02 T
(-tool disconnect from the process indicated in the) 309.85 265.02 T
4 F
(Process) 72 251.02 T
1 F
( object) 122.4 251.02 T
4 F
(p) 157.73 251.02 T
1 F
(. The service request may f) 164.93 251.02 T
(ail if process is not connected.) 294.77 251.02 T
96 223.82 72 223.82 2 L
V
0.6 H
0 Z
N
0 F
(2.3.3) 72 225.02 T
112.99 223.82 96 223.82 2 L
V
N
( Cr) 96 225.02 T
181.43 223.82 112.78 223.82 2 L
V
N
(eating New A) 112.78 225.02 T
248.14 223.82 181.13 223.82 2 L
V
N
(pplication Pr) 181.13 225.02 T
285.91 223.82 247.92 223.82 2 L
V
N
(ograms) 247.92 225.02 T
1 F
(T) 72 210.02 T
(o be pro) 78.37 210.02 T
(vided in a later release.) 117.52 210.02 T
6 10 Q
(2.3.3.1) 72 185.35 T
( Create an Application) 99.5 185.35 T
(2.3.3.2) 72 160.35 T
( Start a New Application) 99.5 160.35 T
(2.3.3.3) 72 135.35 T
( Restart an Application) 99.5 135.35 T
96 107.82 72 107.82 2 L
V
N
0 12 Q
(2.3.4) 72 109.02 T
107.66 107.82 96 107.82 2 L
V
N
( A) 96 109.02 T
192.37 107.82 107.36 107.82 2 L
V
N
(pplication Contr) 107.36 109.02 T
255.17 107.82 192.16 107.82 2 L
V
N
(ol Functions) 192.16 109.02 T
1 F
(T) 72 94.02 T
(o be pro) 78.37 94.02 T
(vided in a later release.) 117.52 94.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 28
%%Page: "23" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(23) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
6 10 Q
0 X
(2.3.4.1) 72 679.35 T
( Suspend an Application) 99.5 679.35 T
(2.3.4.2) 72 654.35 T
( Resume an Application) 99.5 654.35 T
(2.3.4.3) 72 629.35 T
( Signal an Application) 99.5 629.35 T
(2.3.4.4) 72 604.35 T
( Attac) 99.5 604.35 T
(h to an Existing Application) 123.57 604.35 T
(2.3.4.5) 72 579.35 T
( Detac) 99.5 579.35 T
(h from an Application) 125.78 579.35 T
(2.3.4.6) 72 554.35 T
( T) 99.5 554.35 T
(erminate an Application) 107.19 554.35 T
96 526.82 72 526.82 2 L
V
0.6 H
0 Z
N
0 12 Q
(2.3.5) 72 528.02 T
107.66 526.82 96 526.82 2 L
V
N
( A) 96 528.02 T
259.37 526.82 107.36 526.82 2 L
V
N
(pplication Memory Functions) 107.36 528.02 T
1 F
(T) 72 513.02 T
(o be pro) 78.37 513.02 T
(vided in a later release.) 117.52 513.02 T
6 10 Q
(2.3.5.1) 72 488.35 T
( Read Application Memory) 99.5 488.35 T
(2.3.5.2) 72 463.35 T
( Write Application Memory) 99.5 463.35 T
96 435.82 72 435.82 2 L
V
N
0 12 Q
(2.3.6) 72 437.02 T
107.66 435.82 96 435.82 2 L
V
N
( A) 96 437.02 T
241.38 435.82 107.36 435.82 2 L
V
N
(pplication File Operations) 107.36 437.02 T
1 F
(T) 72 422.02 T
(o be pro) 78.37 422.02 T
(vided in a later release.) 117.52 422.02 T
6 10 Q
(2.3.6.1) 72 397.35 T
( Remote F) 99.5 397.35 T
(ile Open) 141.88 397.35 T
(2.3.6.2) 72 372.35 T
( Remote F) 99.5 372.35 T
(ile Close) 141.88 372.35 T
(2.3.6.3) 72 347.35 T
( Remote F) 99.5 347.35 T
(ile Read) 141.88 347.35 T
(2.3.6.4) 72 322.35 T
( Remote F) 99.5 322.35 T
(ile Write) 141.88 322.35 T
(2.3.6.5) 72 297.35 T
( Remote F) 99.5 297.35 T
(ile Seek) 141.88 297.35 T
89.5 262.28 72 262.28 2 L
V
0.7 H
N
89.5 274.9 72 274.9 2 L
V
N
0 14 Q
(2.4) 72 263.68 T
110.11 262.28 89.5 262.28 2 L
V
N
110.11 274.9 89.5 274.9 2 L
V
N
( Na) 89.5 263.68 T
171.6 262.28 109.76 262.28 2 L
V
N
171.6 274.9 109.76 274.9 2 L
V
N
(vigating A) 109.76 263.68 T
263.44 262.28 171.25 262.28 2 L
V
N
263.44 274.9 171.25 274.9 2 L
V
N
(pplication Sour) 171.25 263.68 T
330.44 262.28 263.18 262.28 2 L
V
N
330.44 274.9 263.18 274.9 2 L
V
N
(ce Structur) 263.18 263.68 T
336.4 262.28 330.19 262.28 2 L
V
N
336.4 274.9 330.19 274.9 2 L
V
N
(e) 330.19 263.68 T
1 12 Q
(Source structure is a concept that applies to indi) 72 245.02 T
(vidual processes. This means that parallel applica-) 301.67 245.02 T
(tions must e) 72 231.02 T
(xpand and na) 129.83 231.02 T
(vig) 193.57 231.02 T
(ate the source structure on a process by process basis. Single program,)
208.85 231.02 T
(multiple data \050SPMD\051 applications ha) 72 217.02 T
(v) 253.75 217.02 T
(e an adv) 259.57 217.02 T
(antage that the e) 299.26 217.02 T
(xpansion need tak) 377.39 217.02 T
(e place with only) 463.92 217.02 T
(one process, b) 72 203.02 T
(ut a tool may still wish to treat each process dif) 140.08 203.02 T
(ferently and thus needs the ability to) 366.42 203.02 T
(operate on a process by process basis.) 72 189.02 T
96 161.82 72 161.82 2 L
V
0.6 H
N
0 F
(2.4.1) 72 163.02 T
185.68 161.82 96 161.82 2 L
V
N
( Obtaining the Pr) 96 163.02 T
246.46 161.82 185.46 161.82 2 L
V
N
(ogram Sour) 185.46 163.02 T
294.55 161.82 246.24 161.82 2 L
V
N
(ce Object) 246.24 163.02 T
1 F
-0.18 (When an end-user) 72 148.02 P
-0.18 (-tool connects with an application or process it requests the structure
of the applica-) 158.71 148.02 P
(tion as part of the connection process. Since applications may be v) 72 134.02
T
(ery lar) 391.1 134.02 T
(ge, the initial structure) 421.87 134.02 T
(requested is a v) 72 120.02 T
(ery coarse vie) 146.14 120.02 T
(w) 212.47 120.02 T
(. Essentially it is the list of modules or source \336les in the application.)
220.36 120.02 T
-0.06 (This is done to a) 72 106.02 P
-0.06 (v) 150.87 106.02 P
-0.06 (oid e) 156.63 106.02 P
-0.06 (xcessi) 180.05 106.02 P
-0.06 (v) 209.08 106.02 P
-0.06 (e delay and memory use when dealing with lar) 214.9 106.02 P
-0.06 (ge applications. The pro-) 438.19 106.02 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 29
%%Page: "24" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(24) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.28 (gram source object may be obtained through the) 72 678.02 P
4 F
-0.66 (SourceObj::get_program_object) 304.42 678.02 P
1 F
-0.28 ( member) 513.22 678.02 P
(function. This is sho) 72 664.02 T
(wn in the ne) 169.7 664.02 T
(xt e) 228.52 664.02 T
(xample.) 246 664.02 T
4 F
(Process p;) 108 643.02 T
(SourceObj pgm = p.get_program_object\050\051;) 108 623.02 T
1 F
(One may e) 72 602.02 T
(xamine the program object to determine the number of modules it contains with
the) 123.8 602.02 T
4 F
(SourceObj::child_count) 72 588.02 T
1 F
( member function. Source objects representing each of the modules) 230.4
588.02 T
(may also be obtained with the) 72 574.02 T
4 F
(SourceObj::child) 218.65 574.02 T
1 F
( member function. The name of the module) 333.85 574.02 T
(may be obtained with the) 72 560.02 T
4 F
(SourceObj::module_name) 196.32 560.02 T
1 F
( member function. F) 354.72 560.02 T
(or e) 452.53 560.02 T
(xample,) 470.68 560.02 T
4 F
(int count = pgm.child_count\050\051;) 108 539.02 T
(for \050int i=0; i < count; i++\051 {) 108 519.02 T
(SourceObj mod = pgm.child\050i\051;) 144 499.02 T
(cout << mod.module_name\050\051 << endl;) 144 479.02 T
(}) 108 459.02 T
1 F
(prints the names of all the source \336les from the program.) 72 438.02 T
96 410.82 72 410.82 2 L
V
0.6 H
0 Z
N
0 F
(2.4.2) 72 412.02 T
201.7 410.82 96 410.82 2 L
V
N
( Expanding the Sour) 96 412.02 T
259.13 410.82 201.48 410.82 2 L
V
N
(ce Structur) 201.48 412.02 T
264.24 410.82 258.91 410.82 2 L
V
N
(e) 258.91 412.02 T
1 F
(In order to vie) 72 397.02 T
(w the structure of a gi) 140.02 397.02 T
(v) 244.69 397.02 T
(en source \336le one must e) 250.51 397.02 T
(xpand the source \336le using the) 369.31 397.02 T
4 F
-1.18 (SourceObj::bexpand) 72 383.02 P
1 F
-0.49 ( or) 201.6 383.02 P
4 F
-1.18 (SourceObj::expand) 216.61 383.02 P
1 F
-0.49 ( functions. These functions e) 339.01 383.02 P
-0.49 (xpand the source) 475.17 383.02 P
(\336le into functions and data objects, and functions within a source \336le
are e) 72 369.02 T
(xpanded into its \336ner con-) 428.44 369.02 T
(trol structure. The de) 72 355.02 T
(gree to which functions can be e) 172.46 355.02 T
(xpanded is hea) 327.58 355.02 T
(vily dependent upon which com-) 398.65 355.02 T
(piler and compiler options are used to compile the application program. The
source structure is) 72 341.02 T
(g) 72 327.02 T
(athered from the e) 77.94 327.02 T
(x) 165.4 327.02 T
(ecutable and high de) 171.22 327.02 T
(grees of compiler optimization se) 270.01 327.02 T
(v) 430.36 327.02 T
(erely reduce the amount) 436.18 327.02 T
(of information a) 72 313.02 T
(v) 149.75 313.02 T
(ailable within the e) 155.45 313.02 T
(x) 246.92 313.02 T
(ecutable.) 252.74 313.02 T
(An indi) 72 292.02 T
(vidual process is required to e) 108.04 292.02 T
(xpand the source structure. The process must be connected.) 251.5 292.02 T
-0.29 (The simplest approach to e) 72 271.02 P
-0.29 (xpand the structure of a source \336le is to use the) 199.96 271.02 P
4 F
-0.7 (SourceObj::bexpand) 425.69 271.02 P
1 F
(member function, which is a blocking service request. The service being
requested is that DPCL) 72 257.02 T
-0.26 (e) 72 243.02 P
-0.26 (xpand the source structure for a speci\336ed \336le. This function does
not return control to the caller until) 77.15 243.02 P
(the requested service has either succeeded or f) 72 229.02 T
(ailed.) 294.13 229.02 T
4 F
(mod.bexpand\050p\051;) 108 208.02 T
1 F
(A second method of e) 72 187.02 T
(xpanding the source structure uses a non-blocking service request. In this
case) 177.13 187.02 T
(the request is sent b) 72 173.02 T
(ut control is returned immediately to the caller) 166.42 173.02 T
(. The function does not w) 388.73 173.02 T
(ait until) 511.26 173.02 T
(the request succeeds or f) 72 159.02 T
(ails. Instead, a callback function is pro) 189.84 159.02 T
(vided that will process the ackno) 374.29 159.02 T
(wl-) 531.64 159.02 T
(edgement of success or f) 72 145.02 T
(ailure when it arri) 190.51 145.02 T
(v) 275.86 145.02 T
(es.) 281.68 145.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 30
%%Page: "25" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(25) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
4 12 Q
0 X
(int tag = ...;) 108 678.02 T
(void cb\050GCBSysType s,GCBTagType t,GCBObjType o,GCBMsgType m\051;) 108
658.02 T
(mod.expand\050p, cb, \050GCBTagType\051tag\051;) 108 638.02 T
1 F
(Each of these e) 72 617.02 T
(xamples requests that the end-user) 144.79 617.02 T
(-tool e) 309.85 617.02 T
(xpand the source structure using the process) 340.67 617.02 T
(indicated in the) 72 603.02 T
4 F
(Process) 148.99 603.02 T
1 F
( object) 199.39 603.02 T
4 F
(p) 234.72 603.02 T
1 F
(. The service request may f) 241.92 603.02 T
(ail if the process is not connected.) 371.76 603.02 T
-0.06 (The follo) 72 582.02 P
-0.06 (wing e) 115.97 582.02 P
-0.06 (xample starts with a program object, gets the \336rst child \050which is
a module\051, e) 148.06 582.02 P
-0.06 (xpands) 521.06 582.02 P
(it, then prints the names of the functions contained within the module.) 72
568.02 T
4 F
(Process p;) 108 547.02 T
(SourceObj pgm = p.get_program_object\050\051;) 108 527.02 T
(SourceObj mod = pgm.child\050 0 \051;) 108 507.02 T
(assert \050 mod.src_type\050\051 == SOT_module \051;) 108 487.02 T
(mod.bexpand\050 p \051;) 108 467.02 T
(int count = mod.child_count\050\051;) 108 447.02 T
(for \050int i=0; i < count; i++\051 {) 108 427.02 T
(SourceObj func = mod.child\050i\051;) 144 407.02 T
(cout << func.get_demangled_name\050\051 << endl;) 144 387.02 T
(}) 108 367.02 T
96 339.82 72 339.82 2 L
V
0.6 H
0 Z
N
0 F
(2.4.3) 72 341.02 T
324.35 339.82 96 339.82 2 L
V
N
( Selecting and Identifying Instrumentation P) 96 341.02 T
348.78 339.82 324.11 339.82 2 L
V
N
(oints) 324.11 341.02 T
1 F
(Instrumentation points are locations in the program instruction stream where
instrumentation code) 72 326.02 T
(\050probes\051 may be placed. Probes are e) 72 312.02 T
(x) 248.76 312.02 T
(ecuted an) 254.58 312.02 T
(y time the program e) 300.05 312.02 T
(x) 399.85 312.02 T
(ecutes that part of the code, for) 405.67 312.02 T
(as long as the probes are in place. Instrumentation points represent locations
in the program that, in) 72 298.02 T
(some sense, are reasonably \322safe\323 to insert ne) 72 284.02 T
(w code. Examples of such locations are function entry) 290.96 284.02 T
(,) 550.46 284.02 T
(function e) 72 270.02 T
(xit, and call sites to other functions.) 120.14 270.02 T
(Instrumentation points are obtained from source objects at the function le) 72
249.02 T
(v) 423.65 249.02 T
(el or lo) 429.47 249.02 T
(wer using the) 463.16 249.02 T
4 F
-0.72 (point) 72 235.02 P
1 F
-0.3 ( or) 108 235.02 P
4 F
-0.72 (all_point) 123.4 235.02 P
1 F
-0.3 ( functions. Both functions accept an inte) 188.2 235.02 P
-0.3 (ger inde) 379.87 235.02 P
-0.3 (x v) 418.38 235.02 P
-0.3 (alue as an input v) 432.78 235.02 P
-0.3 (alue and) 515.28 235.02 P
(return an instrumentation point as the result. The inde) 72 221.02 T
(x must be in the range of 0 to) 329.46 221.02 T
4 F
(point_count) 72 207.02 T
1 F
(\050\051-1 or 0 to) 151.2 207.02 T
4 F
(all_point_count) 206.52 207.02 T
1 F
(\050\051-1, respecti) 314.52 207.02 T
(v) 375.53 207.02 T
(ely) 381.35 207.02 T
(. The dif) 395.23 207.02 T
(ference between the tw) 435.92 207.02 T
(o) 546.76 207.02 T
(functions is that) 72 193.02 T
4 F
(point) 151.67 193.02 T
1 F
( gi) 187.67 193.02 T
(v) 199.7 193.02 T
(es access to instrumentation points that are only tied to the gi) 205.52
193.02 T
(v) 498.2 193.02 T
(en source) 504.02 193.02 T
(object. In contrast) 72 179.02 T
4 F
(all_point) 161.32 179.02 T
1 F
( gi) 226.12 179.02 T
(v) 238.15 179.02 T
(es access to all instrumentation points associated with the gi) 243.97 179.02 T
(v) 531.98 179.02 T
(en) 537.8 179.02 T
(source object and all of its lo) 72 165.02 T
(wer le) 210.35 165.02 T
(v) 239.7 165.02 T
(els in the source object hierarch) 245.52 165.02 T
(y) 397.75 165.02 T
(.) 402.97 165.02 T
4 F
(SourceObj func = ...;) 108 144.02 T
(assert \050 0 <= i && i < point_count\050\051 \051;) 108 124.02 T
(InstPoint ipt = func.point\050i\051;) 108 104.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 31
%%Page: "26" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(26) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.1 (One may query instrumentation points for dif) 72 678.02 P
-0.1 (ferent attrib) 289.07 678.02 P
-0.1 (utes, such as the instrumentation point type,) 345.05 678.02 P
(location type, source object container) 72 664.02 T
(, and approximate line number in source. The instrumentation) 251.15 664.02 T
-0.41 (point type is a v) 72 650.02 P
-0.41 (alue that re\337ects whether the instrumentation point represents a
function entry point, a) 146.73 650.02 P
-0.37 (function e) 72 636.02 P
-0.37 (xit point, a function call site \050where another function is
called\051,) 119.78 636.02 P
5 F
-0.37 (etc) 421.38 636.02 P
1 F
-0.37 (. The a) 435.37 636.02 P
-0.37 (v) 467.39 636.02 P
-0.37 (ailable v) 473.09 636.02 P
-0.37 (alues are) 513.42 636.02 P
(contained within the) 72 622.02 T
4 F
(InstPtType) 172.99 622.02 T
1 F
( enumeration data type. The) 244.99 622.02 T
(y may be obtained through the) 379.12 622.02 T
4 F
(get_type) 72 608.02 T
1 F
( member function.) 129.6 608.02 T
(The instrumentation point location type re\337ects whether the instrumentation
will come before the) 72 587.02 T
(point in question, after the point in question, or replace it altogether) 72
573.02 T
(. An instrumentation point repre-) 395.64 573.02 T
(sents a single instruction or a small collection of instructions in the
instruction stream. Instrumenta-) 72 559.02 T
-0.22 (tion at a point includes a branch instruction to the instrumentation
site so the amount of w) 72 545.02 P
-0.22 (ork that can) 499.01 545.02 P
-0.26 (be done in the instrumentation is not limited to the number of
instructions that are replaced within the) 72 531.02 P
(instruction stream. When instrumentation is placed before or after a point,
the replaced instructions) 72 517.02 T
-0.2 (are e) 72 503.02 P
-0.2 (x) 94.6 503.02 P
-0.2 (ecuted as part of the instrumentation code. The location type is
represented by the) 100.42 503.02 P
4 F
-0.48 (InstPtLo-) 493.2 503.02 P
(cation) 72 489.02 T
1 F
( enumeration data type. It may be obtained using the function) 115.2 489.02 T
4 F
(get_location) 413.16 489.02 T
1 F
(.) 499.56 489.02 T
(The source object container is simply the source object that originally
generated the instrumentation) 72 468.02 T
(point. When the instrumentation point is retrie) 72 454.02 T
(v) 294.02 454.02 T
(ed using the) 299.84 454.02 T
4 F
(point) 360.84 454.02 T
1 F
( function, the result of the) 396.84 454.02 T
4 F
(get_container) 72 440.02 T
1 F
( function will al) 165.6 440.02 T
(w) 241.81 440.02 T
(ays match the in) 250.36 440.02 T
(v) 328.2 440.02 T
(oking object. When the instrumentation point) 333.96 440.02 T
(is retrie) 72 426.02 T
(v) 108.02 426.02 T
(ed using the) 113.84 426.02 T
4 F
(all_point) 174.84 426.02 T
1 F
( function, the result of) 239.64 426.02 T
4 F
(get_container) 348.96 426.02 T
1 F
( may not. F) 442.56 426.02 T
(or e) 497.05 426.02 T
(xample,) 515.2 426.02 T
(consider the follo) 72 412.02 T
(wing code fragment.) 155.69 412.02 T
4 F
(SourceObj func = ...;) 108 391.02 T
(InstPoint pt = func.point\050i\051;) 108 371.02 T
(SourceObj sop = pt.get_container\050\051;) 108 351.02 T
(InstPoint apt = func.all_point\050j\051;) 108 331.02 T
(SourceObj soap = apt.get_container\050\051;) 108 311.02 T
1 F
(In this code fragment) 72 290.02 T
4 F
(sop) 177.31 290.02 T
1 F
(, the container source object of) 198.91 290.02 T
4 F
(pt) 349.87 290.02 T
1 F
(, the instrumentation point, will al) 364.27 290.02 T
(w) 527.16 290.02 T
(ays) 535.7 290.02 T
(match) 72 276.02 T
4 F
(func) 104.33 276.02 T
1 F
(, the source object originally used to retrie) 133.13 276.02 T
(v) 335.46 276.02 T
(e the instrumentation point. This is so) 341.28 276.02 T
(because the function) 72 262.02 T
4 F
(point) 173.64 262.02 T
1 F
( w) 209.64 262.02 T
(as used, and) 221.18 262.02 T
4 F
(point) 282.5 262.02 T
1 F
( may only retrie) 318.5 262.02 T
(v) 394.52 262.02 T
(e instrumentation points that are) 400.34 262.02 T
(immediately contained within a source object. In contrast,) 72 248.02 T
4 F
(soap) 353.29 248.02 T
1 F
( and) 382.09 248.02 T
4 F
(func) 405.42 248.02 T
1 F
( may or may not match) 434.22 248.02 T
(depending on whether the instrumentation point obtained w) 72 234.02 T
(as contained within the source object) 358.19 234.02 T
4 F
-0.35 (func) 72 220.02 P
1 F
-0.14 ( or a child object. If the instrumentation point is contained within)
100.8 220.02 P
4 F
-0.35 (func) 414.71 220.02 P
1 F
-0.14 ( the) 443.51 220.02 P
-0.14 (y w) 460.85 220.02 P
-0.14 (ould match. If it) 478.25 220.02 P
(is contained within a child of) 72 206.02 T
4 F
(func) 214.66 206.02 T
1 F
( the) 243.46 206.02 T
(y w) 260.94 206.02 T
(ould not match.) 278.48 206.02 T
(The function) 72 185.02 T
4 F
(get_line) 136.66 185.02 T
1 F
( queries the instrumentation point for its approximate location in source)
194.26 185.02 T
(code. Code transformations that tak) 72 171.02 T
(e place in the optimization phases of compilers rearrange the pro-) 242.86
171.02 T
-0.24 (gram in man) 72 157.02 P
-0.24 (y complicated w) 132.01 157.02 P
-0.24 (ays. Loop fusion, \336ssion, and splitting, common sub-e) 210.74 157.02 P
-0.24 (xpression elimina-) 469.24 157.02 P
(tion, in) 72 143.02 T
(v) 105.53 143.02 T
(ariant code motion, and man) 111.23 143.02 T
(y other transformations create a complicated relationship) 248.03 143.02 T
-0.35 (between the source code the programmer wrote and the instruction stream
that is actually e) 72 129.02 P
-0.35 (x) 503.55 129.02 P
-0.35 (ecuted by) 509.37 129.02 P
(the machine. F) 72 115.02 T
(or this reason it is often dif) 142.81 115.02 T
(\336cult to determine precisely what line or lines of source) 271.84 115.02 T
(code were responsible for creating a particular instruction in the program.
Ev) 72 101.02 T
(en so, this is not to say) 441.73 101.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 32
%%Page: "27" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(27) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(that a good approximation cannot be obtained.) 72 678.02 T
4 F
(get_line) 297.97 678.02 T
1 F
( returns the best approximation a) 355.57 678.02 T
(v) 512.98 678.02 T
(ailable.) 518.68 678.02 T
96 650.82 72 650.82 2 L
V
0.6 H
0 Z
N
0 F
(2.4.4) 72 652.02 T
156.66 650.82 96 650.82 2 L
V
N
( Selecting A) 96 652.02 T
235.37 650.82 156.36 650.82 2 L
V
N
(pplication Data) 156.36 652.02 T
1 F
(T) 72 637.02 T
(o be pro) 78.37 637.02 T
(vided in a later release.) 117.52 637.02 T
89.5 602.28 72 602.28 2 L
V
0.7 H
N
89.5 614.9 72 614.9 2 L
V
N
0 14 Q
(2.5) 72 603.68 T
238.07 602.28 89.5 602.28 2 L
V
N
238.07 614.9 89.5 614.9 2 L
V
N
( Instrumentation in an A) 89.5 603.68 T
302.29 602.28 237.72 602.28 2 L
V
N
302.29 614.9 237.72 614.9 2 L
V
N
(pplication\325) 237.72 603.68 T
399.77 602.28 301.77 602.28 2 L
V
N
399.77 614.9 301.77 614.9 2 L
V
N
(s Instruction Str) 301.77 603.68 T
424.39 602.28 399.52 602.28 2 L
V
N
424.39 614.9 399.52 614.9 2 L
V
N
(eam) 399.52 603.68 T
1 12 Q
(Instrumentation of an application comes in three forms. One may create
instrumentation that is time) 72 585.02 T
(acti) 72 571.02 T
(v) 89.03 571.02 T
(ated, that is, it is acti) 94.73 571.02 T
(v) 193.43 571.02 T
(ated by the e) 199.13 571.02 T
(xpiration of an interv) 259.93 571.02 T
(al timer) 361.28 571.02 T
(. One may e) 397.62 571.02 T
(x) 455.42 571.02 T
(ecute an Inferior) 461.24 571.02 T
(Remote Procedure Call \050IRPC\051. IRPCs are pieces of code that are e) 72
557.02 T
(x) 395.09 557.02 T
(ecuted e) 400.91 557.02 T
(xactly once then) 440.38 557.02 T
(remo) 72 543.02 T
(v) 96.48 543.02 T
(ed. The process is stopped where) 102.3 543.02 T
(v) 260.63 543.02 T
(er it happens to be e) 266.45 543.02 T
(x) 362.58 543.02 T
(ecuting. The IRPC is then installed) 368.4 543.02 T
(inside the application, e) 72 529.02 T
(x) 185.81 529.02 T
(ecuted, and remo) 191.63 529.02 T
(v) 273.76 529.02 T
(ed. Afterw) 279.58 529.02 T
(ards the process resumes e) 330.77 529.02 T
(x) 457.88 529.02 T
(ecution where it) 463.7 529.02 T
(w) 72 515.02 T
(as stopped. Periodically acti) 80.54 515.02 T
(v) 214.9 515.02 T
(ated instrumentation is described in Section 2.9, \322Periodically Acti-)
220.6 515.02 T
(v) 72 501.02 T
(ated Instrumentation \050Phases\051\323 on page 33. IRPCs are described in
Section 2.10, \322Single Ex) 77.7 501.02 T
(ecution) 518.8 501.02 T
(Instrumentation \050IRPCs\051\323 on page 33.) 72 487.02 T
-0.29 (The third kind of instrumentation is that which is placed at a
particular location within the application) 72 466.02 P
(process and e) 72 452.02 T
(x) 136.46 452.02 T
(ecuted whene) 142.28 452.02 T
(v) 207.62 452.02 T
(er that part of the application is e) 213.44 452.02 T
(x) 371.57 452.02 T
(ecuted. This form of instrumentation) 377.39 452.02 T
(is the topic of this section. It requires the creation of simple instruction
sequences, called) 72 438.02 T
5 F
(pr) 500.94 438.02 T
(obe) 511.07 438.02 T
(e) 72 424.02 T
(xpr) 77.09 424.02 T
(essions) 92.64 424.02 T
1 F
(, that serv) 127.31 424.02 T
(e as the instrumentation code. Probe e) 174.12 424.02 T
(xpressions may perform conditional con-) 356.24 424.02 T
(trol \337o) 72 410.02 T
(w) 104.04 410.02 T
(, inte) 111.92 410.02 T
(ger and pointer arithmetic, bit-wise operations, and call functions. When
complicated) 135.74 410.02 T
(instrumentation is needed, such as iteration, recursion, or manipulating
comple) 72 396.02 T
(x data structures, one) 450.44 396.02 T
(may call a function written in a standard language such as C to perform the
comple) 72 382.02 T
(x operations.) 470.75 382.02 T
96 354.82 72 354.82 2 L
V
0.6 H
N
0 F
(2.5.1) 72 356.02 T
112.99 354.82 96 354.82 2 L
V
N
( Cr) 96 356.02 T
168.77 354.82 112.78 354.82 2 L
V
N
(eating a Pr) 112.78 356.02 T
215.56 354.82 168.55 354.82 2 L
V
N
(obe Expr) 168.55 356.02 T
246.01 354.82 215.34 354.82 2 L
V
N
(ession) 215.34 356.02 T
1 F
-0.43 (One of the most important notions to understand is that probe e) 72
341.02 P
-0.43 (xpressions within the end-user) 370.75 341.02 P
-0.43 (-tool are) 515.54 341.02 P
(data structures. The) 72 327.02 T
(y are data structures that represent e) 166.13 327.02 T
(x) 338.56 327.02 T
(ecutable se) 344.38 327.02 T
(gments of code when the) 397.18 327.02 T
(y are) 516.97 327.02 T
-0.33 (installed and acti) 72 313.02 P
-0.33 (v) 152.37 313.02 P
-0.33 (ated within an application. T) 158.07 313.02 P
-0.33 (o mak) 293.45 313.02 P
-0.33 (e it easier to create the desired data structures the) 322.67 313.02 P
(common operators ha) 72 299.02 T
(v) 175.74 299.02 T
(e been o) 181.56 299.02 T
(v) 221.36 299.02 T
(erloaded in such a w) 227.18 299.02 T
(ay that e) 325.7 299.02 T
(xpressions in) 366.18 299.02 T
(v) 428.7 299.02 T
(olving probe e) 434.46 299.02 T
(xpressions) 503.6 299.02 T
(and operators almost al) 72 285.02 T
(w) 183.53 285.02 T
(ays create ne) 192.07 285.02 T
(w data structures, rather than e) 253.74 285.02 T
(x) 400.85 285.02 T
(ecuting the e) 406.67 285.02 T
(xpression locally) 467.81 285.02 T
(on the client. F) 72 271.02 T
(or e) 143.82 271.02 T
(xample,) 161.96 271.02 T
4 F
(ProbeExp pe3 = pe1 + pe2;) 108 250.02 T
1 F
-0.12 (creates a data structure that represents the addition of the sube) 72
229.02 P
-0.12 (xpressions) 368.54 229.02 P
4 F
-0.29 (pe1) 422.08 229.02 P
1 F
-0.12 ( and) 443.68 229.02 P
4 F
-0.29 (pe2) 466.77 229.02 P
1 F
-0.12 (. The addition) 488.37 229.02 P
(is) 72 215.02 T
5 F
(not) 83 215.02 T
1 F
( e) 98.34 215.02 T
(x) 106.49 215.02 T
(ecuted in the end-user) 112.31 215.02 T
(-tool, where the abo) 217.7 215.02 T
(v) 313.5 215.02 T
(e statement may be found. Instead the abo) 319.32 215.02 T
(v) 521.1 215.02 T
(e) 526.92 215.02 T
(e) 72 201.02 T
(xpression is formed into a data structure that may later be installed and
acti) 77.15 201.02 T
(v) 437.12 201.02 T
(ated within a process.) 442.82 201.02 T
-0.4 (Once the probe is acti) 72 187.02 P
-0.4 (v) 174.76 187.02 P
-0.4 (ated, if the application e) 180.46 187.02 P
-0.4 (x) 294.35 187.02 P
-0.4 (ecutes the instruction at the instrumentation point, the) 300.17 187.02 P
(probe will be e) 72 173.02 T
(x) 143.47 173.02 T
(ecuted and the addition will be performed at that time.) 149.29 173.02 T
(Probe e) 72 152.02 T
(xpressions are lik) 108.14 152.02 T
(e statements and e) 192.01 152.02 T
(xpressions in a procedural language lik) 279.48 152.02 T
(e C. There are no) 466.99 152.02 T
(input parameters nor return v) 72 138.02 T
(alues, because the) 211.67 138.02 T
(y are not functions. The) 297.79 138.02 T
(y are se) 411.92 138.02 T
(gments of code that) 448.39 138.02 T
-0.05 (operate within their o) 72 124.02 P
-0.05 (wn conte) 174.53 124.02 P
-0.05 (xt so the) 217.96 124.02 P
-0.05 (y need not interfere with the hosting application, b) 258.34 124.02 P
-0.05 (ut the) 500 124.02 P
-0.05 (y also) 526.77 124.02 P
(share some portions of the application\325) 72 110.02 T
(s conte) 258.31 110.02 T
(xt so the) 291.79 110.02 T
(y can g) 332.28 110.02 T
(ather needed information and in\337uence) 366.88 110.02 T
(the application\325) 72 96.02 T
(s beha) 146.33 96.02 T
(vior when desired.) 176.41 96.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 33
%%Page: "28" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(28) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
(The v) 72 678.02 T
(ast majority of the operators in C++ ha) 99.36 678.02 T
(v) 285.64 678.02 T
(e been de\336ned for probe e) 291.46 678.02 T
(xpressions to create data) 416.23 678.02 T
-0.41 (structures rather than be e) 72 664.02 P
-0.41 (x) 194.15 664.02 P
-0.41 (ecuted directly within the end-user) 199.97 664.02 P
-0.41 (-tool. This includes arithmetic operators) 364.73 664.02 P
-0.31 (\050+, -, *, /, %\051, bit-wise operators \050<<, >>, ~, ^, &, |\051,
relational operators \050<, >, ==, !=, <=, >=\051, logical) 72 650.02 P
-0.07 (operators \050&&, ||, !\051, assignment operators \050+=, -=, *=, /=,
%=, <<=, >>=, ^=, &=, |=\051, increment and) 72 636.02 P
(decrement operators \050++, --\051, and dereference operators \050*, []\051.
There are tw) 72 622.02 T
(o notable e) 435.59 622.02 T
(xceptions.) 488.06 622.02 T
-0.25 (Whene) 72 608.02 P
-0.25 (v) 105.68 608.02 P
-0.25 (er an) 111.5 608.02 P
-0.25 (y of the listed operators are used with probe e) 134.73 608.02 P
-0.25 (xpressions, the) 351.23 608.02 P
-0.25 (y create a ne) 422.13 608.02 P
-0.25 (w probe e) 481.38 608.02 P
-0.25 (xpres-) 528.01 608.02 P
-0.09 (sion data structure that represents the same operation as if it were e)
72 594.02 P
-0.09 (x) 392.71 594.02 P
-0.09 (ecuted within a C program using) 398.53 594.02 P
(inte) 72 580.02 T
(ger or pointer operands.) 89.82 580.02 T
-0.12 (There are tw) 72 559.02 P
-0.12 (o important omissions to the abo) 132.28 559.02 P
-0.12 (v) 288.5 559.02 P
-0.12 (e list of operators. The) 294.32 559.02 P
-0.12 (y are simple assignment \050=\051 and) 401.98 559.02 P
(the unary address operator \050&\051. The assignment operator cannot be o) 72
545.02 T
(v) 402.07 545.02 T
(erloaded without causing sim-) 407.89 545.02 T
(ple e) 72 531.02 T
(xpression manipulation to become unwieldy) 94.81 531.02 T
(. Secondly) 306.68 531.02 T
(, the unary address operator cannot be) 356.57 531.02 T
(o) 72 517.02 T
(v) 77.82 517.02 T
(erloaded because it is used in passing ar) 83.64 517.02 T
(guments to functions that use call-by-reference. So these) 275.05 517.02 T
-0.34 (tw) 72 503.02 P
-0.34 (o operators retain their original semantics. \322) 83.88 503.02 P
4 F
-0.83 (a = b) 292.77 503.02 P
1 F
-0.34 (\323 performs an assignment of probe e) 327.12 503.02 P
-0.34 (xpression) 499.49 503.02 P
4 F
-0.83 (b) 548.14 503.02 P
1 F
(into probe e) 72 489.02 T
(xpression) 129.14 489.02 T
4 F
(a) 178.14 489.02 T
1 F
( within the end-user) 185.34 489.02 T
(-tool. \322) 280.75 489.02 T
4 F
(&a) 314.75 489.02 T
1 F
(\323 tak) 329.15 489.02 T
(es the address of the probe e) 352.02 489.02 T
(xpression) 487.8 489.02 T
(object) 72 475.02 T
4 F
(a) 104.33 475.02 T
1 F
( within the end-user) 111.53 475.02 T
(-tool. Neither operator creates a ne) 206.94 475.02 T
(w probe e) 373.25 475.02 T
(xpression.) 420.38 475.02 T
-0.3 (Simple assignment and the unary address operators ha) 72 454.02 P
-0.3 (v) 329.98 454.02 P
-0.3 (e other functions that create appropriate probe) 335.8 454.02 P
(e) 72 440.02 T
(xpressions. F) 77.15 440.02 T
(or assignment the member function is called) 140.3 440.02 T
4 F
(assign) 355.94 440.02 T
1 F
(. F) 399.14 440.02 T
(or the unary address operator) 411.64 440.02 T
(the member function is called) 72 426.02 T
4 F
(address) 217.64 426.02 T
1 F
(.) 268.04 426.02 T
4 F
(ProbeExp pea = pe1.assign\050pe2\051;) 108 405.02 T
1 F
(This e) 72 384.02 T
(xample assigns the v) 101.48 384.02 T
(alue computed by the probe e) 200.84 384.02 T
(xpression) 342.3 384.02 T
4 F
(pe2) 391.3 384.02 T
1 F
( into the storage location indi-) 412.9 384.02 T
-0.42 (cated by) 72 370.02 P
4 F
-1 (pe1) 114.49 370.02 P
1 F
-0.42 (. The e) 136.09 370.02 P
-0.42 (xpression) 168.07 370.02 P
4 F
-1 (pea) 216.65 370.02 P
1 F
-0.42 ( then represents that assignment. The ne) 238.25 370.02 P
-0.42 (xt e) 427.87 370.02 P
-0.42 (xample sho) 444.94 370.02 P
-0.42 (ws ho) 499.22 370.02 P
-0.42 (w one) 526.84 370.02 P
(might b) 72 356.02 T
(uild an e) 108.77 356.02 T
(xpression that represents taking the address of an object.) 149.92 356.02 T
4 F
(ProbeExp peb = pe.address\050\051;) 108 335.02 T
1 F
-0.13 (There are additional functions that create probe e) 72 314.02 P
-0.13 (xpressions although the) 306.52 314.02 P
-0.13 (y do not ha) 419.41 314.02 P
-0.13 (v) 472.45 314.02 P
-0.13 (e corresponding) 478.27 314.02 P
(operators associated with them. Examples are) 72 300.02 T
4 F
(call) 294.29 300.02 T
1 F
(,) 323.09 300.02 T
4 F
(ifelse) 329.09 300.02 T
1 F
( and) 372.29 300.02 T
4 F
(sequence) 395.62 300.02 T
1 F
(.) 453.22 300.02 T
4 F
(call) 459.22 300.02 T
1 F
( allo) 488.02 300.02 T
(ws one to) 508.72 300.02 T
(call a function from within a probe e) 72 286.02 T
(xpression.) 247.45 286.02 T
4 F
(ifelse) 299.45 286.02 T
1 F
( allo) 342.65 286.02 T
(ws one to perform conditional control) 363.35 286.02 T
(\337o) 72 272.02 T
(w within the probe e) 84.37 272.02 T
(xpression.) 182.84 272.02 T
4 F
(sequence) 234.84 272.02 T
1 F
( allo) 292.44 272.02 T
(ws one to chain multiple e) 313.14 272.02 T
(xpressions together) 439.28 272.02 T
(,) 531.79 272.02 T
(much lik) 72 258.02 T
(e a semicolon or comma operator does in C.) 114.22 258.02 T
(As mentioned before, the equality operator \050==\051 is de\336ned to create a
ne) 72 237.02 T
(w probe e) 418.15 237.02 T
(xpression. That) 465.29 237.02 T
(means some other function must be used to determine whether tw) 72 223.02 T
(o probe e) 387.17 223.02 T
(xpressions are the same.) 431.64 223.02 T
(That function is called) 72 209.02 T
4 F
(is_same_as) 182.65 209.02 T
1 F
(.) 254.65 209.02 T
(Probe e) 72 188.02 T
(xpression operands may be constants, other probe e) 108.14 188.02 T
(xpressions, or data objects. Data objects) 355.25 188.02 T
(may be application data v) 72 174.02 T
(ariables, temporary probe stack objects, or persistent probe data objects.)
195.01 174.02 T
(Data objects are described in more detail in Section 2.6, \322Probe Data\323
on page 30.) 72 160.02 T
96 132.82 72 132.82 2 L
V
0.6 H
0 Z
N
0 F
(2.5.2) 72 134.02 T
172.34 132.82 96 132.82 2 L
V
N
( Installing a Pr) 96 134.02 T
219.13 132.82 172.13 132.82 2 L
V
N
(obe Expr) 172.13 134.02 T
249.59 132.82 218.92 132.82 2 L
V
N
(ession) 218.92 134.02 T
1 F
(Probe e) 72 119.02 T
(xpressions when the) 108.14 119.02 T
(y reside within the end-user) 205.28 119.02 T
(-tool are passi) 338.35 119.02 T
(v) 405.37 119.02 T
(e data objects. In order to e) 411.19 119.02 T
(x) 541.31 119.02 T
(e-) 547.13 119.02 T
(cute them as code the) 72 105.02 T
(y must be \336rst installed within an application process, then the installed
probes) 175.13 105.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 34
%%Page: "29" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(29) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
1 12 Q
0 X
-0.14 (must be acti) 72 678.02 P
-0.14 (v) 129.41 678.02 P
-0.14 (ated. Acti) 135.12 678.02 P
-0.14 (v) 181.33 678.02 P
-0.14 (ated probes ha) 187.03 678.02 P
-0.14 (v) 255.82 678.02 P
-0.14 (e the ability to send data back to the end-user) 261.64 678.02 P
-0.14 (-tool, so the end-) 477.1 678.02 P
(user) 72 664.02 T
(-tool must be prepared for that.) 91.75 664.02 T
(Probe installation requires four pieces of data. It requires the probe e) 72
643.02 T
(xpression to be installed, the) 401.08 643.02 T
(location where the e) 72 629.02 T
(xpression is to be installed, a callback function to handle data sent by the
probe) 168.79 629.02 T
-0.36 (e) 72 615.02 P
-0.36 (xpression, and a tag \336eld for the callback function. The installation
procedure returns a special probe) 77.15 615.02 P
(handle for each probe e) 72 601.02 T
(xpression that is installed. Probe handles may be used to identify the probe,)
184.44 601.02 T
(which is needed to acti) 72 587.02 T
(v) 181.68 587.02 T
(ate, deacti) 187.38 587.02 T
(v) 235.73 587.02 T
(ate, and remo) 241.43 587.02 T
(v) 306.23 587.02 T
(e probes from a process.) 312.05 587.02 T
(The installation interf) 72 566.02 T
(ace also allo) 175.87 566.02 T
(ws multiple probe e) 234.89 566.02 T
(xpressions to be installed within a process at a) 329.7 566.02 T
-0.39 (time. If one probe e) 72 552.02 P
-0.39 (xpression f) 164.58 552.02 P
-0.39 (ails to install, the interf) 217.07 552.02 P
-0.39 (ace does not install an) 326.41 552.02 P
-0.39 (y probes for that call. This) 430.67 552.02 P
(allo) 72 538.02 T
(ws a tool to create a series of related probes that depend upon each other)
89.7 538.02 T
(. F) 436.94 538.02 T
(or e) 449.44 538.02 T
(xample, a pair of) 467.58 538.02 T
(probes might turn a timer on and of) 72 524.02 T
(f. Either probe w) 242.02 524.02 T
(ould be useless without the other) 323.21 524.02 T
(, and in f) 480.38 524.02 T
(act if) 522.92 524.02 T
-0.16 (for some re) 72 510.02 P
-0.16 (gion of code only one of the probes were installed it might produce
inaccurate or inconsis-) 126.15 510.02 P
(tent data. The general form is) 72 496.02 T
4 F
(Process p = ...;) 108 475.02 T
(p.binstall_probe\050count, pe, ip, cb, tag, ph\051;) 108 455.02 T
1 F
-0.11 (where) 72 434.02 P
4 F
-0.27 (pe) 104.2 434.02 P
1 F
-0.11 ( is an array of probe e) 118.6 434.02 P
-0.11 (xpressions,) 222.37 434.02 P
4 F
-0.27 (ip) 278.92 434.02 P
1 F
-0.11 ( is an array of instrumentation points,) 293.33 434.02 P
4 F
-0.27 (cb) 475.19 434.02 P
1 F
-0.11 ( is an array of) 489.59 434.02 P
-0.21 (pointers to callback functions that will process an) 72 420.02 P
-0.21 (y data sent from probes,) 307.98 420.02 P
4 F
-0.51 (tag) 425.57 420.02 P
1 F
-0.21 ( is an array of tags that) 447.17 420.02 P
-0.39 (will be used when the callback is acti) 72 406.02 P
-0.39 (v) 247.92 406.02 P
-0.39 (ated,) 253.62 406.02 P
4 F
-0.94 (ph) 279.22 406.02 P
1 F
-0.39 ( is an array of probe handles that serv) 293.62 406.02 P
-0.39 (e as identi\336ers for) 470.25 406.02 P
(the probes, and) 72 392.02 T
4 F
(count) 147.98 392.02 T
1 F
( is the number of elements in each array) 183.98 392.02 T
(.) 375.16 392.02 T
(A second method of installing probes uses a non-blocking service request. In
this case the request is) 72 371.02 T
-0.13 (sent b) 72 357.02 P
-0.13 (ut control is returned immediately to the caller) 99.96 357.02 P
-0.13 (. The function does not w) 321.34 357.02 P
-0.13 (ait until the request suc-) 443.21 357.02 P
(ceeds or f) 72 343.02 T
(ails. Instead, a callback function is pro) 118.52 343.02 T
(vided that will process the ackno) 302.98 343.02 T
(wledgement of suc-) 460.32 343.02 T
(cess or f) 72 329.02 T
(ailure when it arri) 111.86 329.02 T
(v) 197.21 329.02 T
(es.) 203.03 329.02 T
4 F
(Process p = ...;) 108 308.02 T
(p.install_probe\050count, pe, ip, cb, tag, ackcb, acktag, ph\051;) 108 288.02 T
-0.72 (ackcb) 72 267.02 P
1 F
-0.3 ( and) 108 267.02 P
4 F
-0.72 (acktag) 130.73 267.02 P
1 F
-0.3 ( are the ackno) 173.93 267.02 P
-0.3 (wledgement callback function pointer and tag, respecti) 239.71 267.02 P
-0.3 (v) 500.56 267.02 P
-0.3 (ely) 506.38 267.02 P
-0.3 (. While) 520.27 267.02 P
(most of the other \336elds are arrays,) 72 253.02 T
4 F
(ackcb) 238.63 253.02 T
1 F
( and) 274.63 253.02 T
4 F
(acktag) 297.96 253.02 T
1 F
( are single v) 341.16 253.02 T
(alues.) 399.18 253.02 T
96 225.82 72 225.82 2 L
V
0.6 H
0 Z
N
0 F
(2.5.3) 72 227.02 T
120.32 225.82 96 225.82 2 L
V
N
( Acti) 96 227.02 T
126.2 225.82 120.2 225.82 2 L
V
N
(v) 120.2 227.02 T
176.75 225.82 126.08 225.82 2 L
V
N
(ating a Pr) 126.08 227.02 T
223.54 225.82 176.53 225.82 2 L
V
N
(obe Expr) 176.53 227.02 T
253.99 225.82 223.32 225.82 2 L
V
N
(ession) 223.32 227.02 T
1 F
(After a set of probes ha) 72 212.02 T
(v) 184.06 212.02 T
(e been installed in an application the) 189.88 212.02 T
(y remain passi) 365 212.02 T
(v) 434.03 212.02 T
(e objects until the) 439.85 212.02 T
(y are) 524.66 212.02 T
(acti) 72 198.02 T
(v) 89.03 198.02 T
(ated. Acti) 94.73 198.02 T
(v) 141.08 198.02 T
(ation links the probes into the application code so that when the application
e) 146.78 198.02 T
(x) 516.9 198.02 T
(ecutes) 522.72 198.02 T
(the instrumentation point, the instrumentation is automatically e) 72 184.02 T
(x) 379.15 184.02 T
(ecuted as well. The probe e) 384.97 184.02 T
(xpres-) 516.08 184.02 T
(sions must ha) 72 170.02 T
(v) 137.1 170.02 T
(e been pre) 142.92 170.02 T
(viously installed, and therefore may be identi\336ed by their probe handles.)
191.93 170.02 T
-0.15 (Probe acti) 72 149.02 P
-0.15 (v) 119.88 149.02 P
-0.15 (ation has both blocking and non-blocking interf) 125.57 149.02 P
-0.15 (aces. The blocking interf) 353.21 149.02 P
-0.15 (ace is the simpler) 471.94 149.02 P
(of the tw) 72 135.02 T
(o.) 114.54 135.02 T
4 F
(p.bactivate_probe\050count, ph\051;) 108 114.02 T
1 F
(The non-blocking interf) 72 93.02 T
(ace is v) 186.53 93.02 T
(ery similar) 222.34 93.02 T
(.) 273.34 93.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 35
%%Page: "30" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(30) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
4 12 Q
0 X
(p.activate_probe\050count, ph, ackcb, acktag\051;) 108 678.02 T
(ackcb) 72 657.02 T
1 F
( and) 108 657.02 T
4 F
(acktag) 131.33 657.02 T
1 F
( are the ackno) 174.53 657.02 T
(wledgement callback function pointer and tag, respecti) 241.2 657.02 T
(v) 503.84 657.02 T
(ely) 509.66 657.02 T
(.) 523.55 657.02 T
96 629.82 72 629.82 2 L
V
0.6 H
0 Z
N
0 F
(2.5.4) 72 631.02 T
131.65 629.82 96 629.82 2 L
V
N
( Deacti) 96 631.02 T
137.53 629.82 131.53 629.82 2 L
V
N
(v) 131.53 631.02 T
188.08 629.82 137.41 629.82 2 L
V
N
(ating a Pr) 137.41 631.02 T
234.86 629.82 187.86 629.82 2 L
V
N
(obe Expr) 187.86 631.02 T
265.32 629.82 234.65 629.82 2 L
V
N
(ession) 234.65 631.02 T
1 F
(Once a probe has been installed and acti) 72 616.02 T
(v) 264.65 616.02 T
(ated in an application process it is possible to suspend the) 270.35 616.02 T
-0.09 (probe without remo) 72 602.02 P
-0.09 (ving it completely) 166.29 602.02 P
-0.09 (. This sa) 252.66 602.02 P
-0.09 (v) 292.56 602.02 P
-0.09 (es time and ef) 298.38 602.02 P
-0.09 (fort when the probe is to be temporarily) 364.78 602.02 P
-0.07 (suspended and later restarted. Probe deacti) 72 588.02 P
-0.07 (v) 275.98 588.02 P
-0.07 (ation has both blocking and non-blocking interf) 281.68 588.02 P
-0.07 (aces. The) 509.82 588.02 P
(blocking interf) 72 574.02 T
(ace is sho) 142.87 574.02 T
(wn \336rst.) 189.23 574.02 T
4 F
(p.bdeactivate_probe\050count, ph\051;) 108 553.02 T
1 F
(The non-blocking interf) 72 532.02 T
(ace is v) 186.53 532.02 T
(ery similar) 222.34 532.02 T
(.) 273.34 532.02 T
4 F
(p.deactivate_probe\050count, ph, ackcb, acktag\051;) 108 511.02 T
(ackcb) 72 490.02 T
1 F
( and) 108 490.02 T
4 F
(acktag) 131.33 490.02 T
1 F
( are the ackno) 174.53 490.02 T
(wledgement callback function pointer and tag, respecti) 241.2 490.02 T
(v) 503.84 490.02 T
(ely) 509.66 490.02 T
(.) 523.55 490.02 T
(Both functions accept an array of probe handles as an input ar) 72 469.02 T
(gument.) 368.71 469.02 T
96 441.82 72 441.82 2 L
V
N
0 F
(2.5.5) 72 443.02 T
128.99 441.82 96 441.82 2 L
V
N
( Remo) 96 443.02 T
175.54 441.82 128.87 441.82 2 L
V
N
(ving a Pr) 128.87 443.02 T
222.32 441.82 175.32 441.82 2 L
V
N
(obe Expr) 175.32 443.02 T
252.78 441.82 222.11 441.82 2 L
V
N
(ession) 222.11 443.02 T
1 F
(T) 72 428.02 T
(w) 78.37 428.02 T
(o major bene\336ts of dynamic instrumentation are that instrumentation may be
added when it is) 86.92 428.02 T
(needed, and that it may be remo) 72 414.02 T
(v) 225.46 414.02 T
(ed when it is no longer needed. Instrumentation that has been) 231.28 414.02 T
(installed may be remo) 72 400.02 T
(v) 178.14 400.02 T
(ed whether it is acti) 183.96 400.02 T
(v) 277.64 400.02 T
(e or has been deacti) 283.46 400.02 T
(v) 377.8 400.02 T
(ated. Once it is remo) 383.5 400.02 T
(v) 482.96 400.02 T
(ed it must be) 488.78 400.02 T
-0.45 (re-installed in order to use it ag) 72 386.02 P
-0.45 (ain. Probe remo) 219.19 386.02 P
-0.45 (v) 294.43 386.02 P
-0.45 (al has both blocking and non-blocking interf) 300.13 386.02 P
-0.45 (aces. The) 510.6 386.02 P
(blocking interf) 72 372.02 T
(ace is sho) 142.87 372.02 T
(wn \336rst.) 189.23 372.02 T
4 F
(p.bremove_probe\050count, ph\051;) 108 351.02 T
1 F
(The non-blocking interf) 72 330.02 T
(ace is v) 186.53 330.02 T
(ery similar) 222.34 330.02 T
(.) 273.34 330.02 T
4 F
(p.remove_probe\050count, ph, ackcb, acktag\051;) 108 309.02 T
(ackcb) 72 288.02 T
1 F
( and) 108 288.02 T
4 F
(acktag) 131.33 288.02 T
1 F
( are the ackno) 174.53 288.02 T
(wledgement callback function pointer and tag, respecti) 241.2 288.02 T
(v) 503.84 288.02 T
(ely) 509.66 288.02 T
(.) 523.55 288.02 T
89.5 253.28 72 253.28 2 L
V
0.7 H
N
89.5 265.9 72 265.9 2 L
V
N
0 14 Q
(2.6) 72 254.68 T
107.77 253.28 89.5 253.28 2 L
V
N
107.77 265.9 89.5 265.9 2 L
V
N
( Pr) 89.5 254.68 T
160.79 253.28 107.52 253.28 2 L
V
N
160.79 265.9 107.52 265.9 2 L
V
N
(obe Data) 107.52 254.68 T
1 12 Q
(Probes, lik) 72 236.02 T
(e most programming v) 123.22 236.02 T
(ehicles, typically require both scratch space for data and data that) 232.03 2
36.02 T
(persists from one in) 72 222.02 T
(v) 166.51 222.02 T
(ocation to the ne) 172.27 222.02 T
(xt. In high le) 251.75 222.02 T
(v) 312.78 222.02 T
(el languages the) 318.6 222.02 T
(y may be described as automatic) 395.74 222.02 T
(or stack space, and static or global space. DPCL of) 72 208.02 T
(fers similar concepts. Speci\336cally) 315.98 208.02 T
(, DPCL allo) 477.18 208.02 T
(ws) 534.55 208.02 T
(one to dynamically allocate persistent data on an application or on a
process-by-process basis. Allo-) 72 194.02 T
-0.03 (cated data may ha) 72 180.02 P
-0.03 (v) 157.98 180.02 P
-0.03 (e initial v) 163.8 180.02 P
-0.03 (alues speci\336ed at the time of allocation. Once data is allocated it
may be) 208.78 180.02 P
(used within probe e) 72 166.02 T
(xpressions, passed to functions, and used in v) 166.14 166.02 T
(arious w) 384.16 166.02 T
(ays within the instrumenta-) 425.03 166.02 T
(tion. This type of allocation is dynamically managed by the end-user) 72
152.02 T
(-tool, b) 401.39 152.02 T
(ut it beha) 435.82 152.02 T
(v) 480.24 152.02 T
(es lik) 486.06 152.02 T
(e global) 511.61 152.02 T
(data to the probe e) 72 138.02 T
(xpression that uses it. T) 160.46 138.02 T
(emporary scratch data is also a) 273.29 138.02 T
(v) 420.67 138.02 T
(ailable to probe e) 426.37 138.02 T
(xpres-) 509.17 138.02 T
(sions. DPCL maintains its o) 72 124.02 T
(wn stack space where it stores temporary data and the actual parameters)
206.05 124.02 T
(in function calls.) 72 110.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 36
%%Page: "31" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(31) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
96 676.82 72 676.82 2 L
0 X
V
0.6 H
0 Z
N
0 12 Q
(2.6.1) 72 678.02 T
106.33 676.82 96 676.82 2 L
V
N
( P) 96 678.02 T
177.07 676.82 106.09 676.82 2 L
V
N
(ersistent Data) 106.09 678.02 T
1 F
(Probe persistent data is allocated and deallocated e) 72 663.02 T
(xplicitly from the end-user) 315.43 663.02 T
(-tool. One may use) 443.51 663.02 T
(either a) 72 649.02 T
4 F
(Process) 110.65 649.02 T
1 F
( or an) 161.05 649.02 T
4 F
(Application) 191.38 649.02 T
1 F
( object as the in) 270.58 649.02 T
(v) 345.42 649.02 T
(oking object for the operation. Persistent) 351.18 649.02 T
(data allocation has both blocking and non-blocking interf) 72 635.02 T
(aces. The blocking interf) 346.85 635.02 T
(ace is sho) 466.03 635.02 T
(wn \336rst.) 512.39 635.02 T
4 F
(ProbeExp pd1 = p.bmalloc\050Ais_int32, \050void*\051&it, st\051;) 108 614.02 T
(ProbeExp pd2 = p.bmalloc\050Ais_int32, \050void*\051&it, ps, st\051;) 108
594.02 T
1 F
(The non-blocking interf) 72 573.02 T
(ace is v) 186.53 573.02 T
(ery similar) 222.34 573.02 T
(.) 273.34 573.02 T
4 F
(ProbeExp pd3 = p.malloc\050Ais_int32, \050void*\051&it, cb, tg, st\051;) 108
552.02 T
-0.45 (ProbeExp pd4 = p.malloc\050Ais_int32, \050void*\051&it, ps, cb, tg,
st\051;) 108 532.02 P
(cb) 72 511.02 T
1 F
( and) 86.4 511.02 T
4 F
(tg) 109.73 511.02 T
1 F
( are the ackno) 124.13 511.02 T
(wledgement callback function pointer and tag, respecti) 190.8 511.02 T
(v) 453.44 511.02 T
(ely) 459.26 511.02 T
(.) 473.15 511.02 T
-0.17 (In these e) 72 490.02 P
-0.17 (xamples) 117.47 490.02 P
4 F
-0.41 (Ais_int32) 160.29 490.02 P
1 F
-0.17 ( represents the data type of the object to be allocated. In this case it
is) 225.09 490.02 P
(the 32-bit inte) 72 476.02 T
(ger concrete data type. Other types and sizes may be allocated as well.)
139.15 476.02 T
4 F
(it) 480.06 476.02 T
1 F
( is the initial) 494.46 476.02 T
(v) 72 462.02 T
(alue of the object. Immediately after allocating the object the object will be
set to the v) 77.7 462.02 T
(alue indi-) 493.67 462.02 T
(cated. If a null pointer is passed in the initial v) 72 448.02 T
(alue of the object is zero.) 294.01 448.02 T
4 F
(st) 417.65 448.02 T
1 F
( is a special status v) 432.05 448.02 T
(alue) 526.74 448.02 T
(that indicates whether the request w) 72 434.02 T
(as successful \050in the blocking case\051, or at least successfully) 244.18
434.02 T
(requested \050in the non-blocking case\051.) 72 420.02 T
(Data deallocation has similar blocking and non-blocking interf) 72 399.02 T
(aces.) 372.84 399.02 T
4 F
(p.bfree\050pe\051;) 108 378.02 T
(p.free\050pe, callback, tag\051;) 108 358.02 T
1 F
-0.41 (Daemon processes track the persistent data used by e) 72 337.02 P
-0.41 (v) 322.99 337.02 P
-0.41 (ery probe e) 328.81 337.02 P
-0.41 (xpression. When data is deallocated,) 381.78 337.02 P
(all probes that depend on the e) 72 323.02 T
(xistence of that data are immediately remo) 218.46 323.02 T
(v) 422.9 323.02 T
(ed.) 428.72 323.02 T
96 295.82 72 295.82 2 L
V
N
0 F
(2.6.2) 72 297.02 T
107 295.82 96 295.82 2 L
V
N
( T) 96 297.02 T
184.21 295.82 105.9 295.82 2 L
V
N
(emporary Data) 105.9 297.02 T
1 F
-0.07 (Probe temporary data is allocated automatically each time the probe e)
72 282.02 P
-0.07 (xpression is e) 405.69 282.02 P
-0.07 (x) 470.69 282.02 P
-0.07 (ecuted, and deal-) 476.51 282.02 P
(located when the probe e) 72 268.02 T
(xpression completes. T) 191.78 268.02 T
(emporary data does not require an e) 301.93 268.02 T
(xplicit service) 473.7 268.02 T
-0.44 (request through a) 72 254.02 P
4 F
-1.05 (Process) 157.01 254.02 P
1 F
-0.44 ( or) 207.41 254.02 P
4 F
-1.05 (Application) 222.53 254.02 P
1 F
-0.44 ( object, as is required for persistent data. Instead, ne) 301.73 254.02 P
-0.44 (w) 546.77 254.02 P
(stack objects are created as probe e) 72 240.02 T
(xpressions within the end-user) 240.42 240.02 T
(-tool, and may be included within) 386.5 240.02 T
(other probe e) 72 226.02 T
(xpressions as part of the local data structure. When the probe e) 135.13
226.02 T
(xpression is installed) 436.21 226.02 T
(within the application process, the v) 72 212.02 T
(arious references to stack objects are resolv) 245.02 212.02 T
(ed to determine ho) 453.43 212.02 T
(w) 542.78 212.02 T
(much stack space is needed and where the stack data is to be allocated. The
interf) 72 198.02 T
(ace is as follo) 462.44 198.02 T
(ws:) 527.8 198.02 T
4 F
(ProbeExp pe = Ais_int32.stack\050\050void*\051&init_val\051;) 108 177.02 T
1 F
(This e) 72 156.02 T
(xample generates a reference to a ne) 101.48 156.02 T
(w stack v) 275.77 156.02 T
(ariable with a data type of 32-bit signed inte) 320.8 156.02 T
(ger) 532.58 156.02 T
(.) 547.25 156.02 T
(Its initial v) 72 142.02 T
(alue is stored in) 123.71 142.02 T
4 F
(init_val) 202.37 142.02 T
1 F
(. If a null pointer is passed as an ar) 259.97 142.02 T
(gument, an initial v) 426.38 142.02 T
(alue of) 519.42 142.02 T
-0.05 (zero is used. When an) 72 128.02 P
-0.05 (y reference to this stack v) 177.25 128.02 P
-0.05 (ariable is included within a probe e) 299.65 128.02 P
-0.05 (xpression, the dae-) 467.79 128.02 P
(mon will assign a location on the stack at the time the e) 72 114.02 T
(xpression is installed, and space will be allo-) 337.8 114.02 T
(cated at the time the e) 72 100.02 T
(xpression is e) 176.8 100.02 T
(x) 241.94 100.02 T
(ecuted.) 247.76 100.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 37
%%Page: "32" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(32) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
96 676.82 72 676.82 2 L
0 X
V
0.6 H
0 Z
N
0 12 Q
(2.6.3) 72 678.02 T
111.66 676.82 96 676.82 2 L
V
N
( Pr) 96 678.02 T
168.11 676.82 111.44 676.82 2 L
V
N
(obe Data T) 111.44 678.02 T
189.89 676.82 167.22 676.82 2 L
V
N
(ypes) 167.22 678.02 T
1 F
(T) 72 663.02 T
(o be pro) 78.37 663.02 T
(vided in a later release.) 117.52 663.02 T
6 10 Q
(2.6.3.1) 72 638.35 T
( Creating Data from Built-in Probe Data T) 99.5 638.35 T
(ypes) 275.54 638.35 T
89.5 603.28 72 603.28 2 L
V
0.7 H
N
89.5 615.9 72 615.9 2 L
V
N
0 14 Q
(2.7) 72 604.68 T
101.55 603.28 89.5 603.28 2 L
V
N
101.55 615.9 89.5 615.9 2 L
V
N
( P) 89.5 604.68 T
211.85 603.28 101.41 603.28 2 L
V
N
211.85 615.9 101.41 615.9 2 L
V
N
(assing Messages fr) 101.41 604.68 T
248.53 603.28 211.59 603.28 2 L
V
N
248.53 615.9 211.59 615.9 2 L
V
N
(om Pr) 211.59 604.68 T
302.72 603.28 248.27 603.28 2 L
V
N
302.72 615.9 248.27 615.9 2 L
V
N
(obes to T) 248.27 604.68 T
324.77 603.28 301.43 603.28 2 L
V
N
324.77 615.9 301.43 615.9 2 L
V
N
(ools) 301.43 604.68 T
1 12 Q
(Once the probe e) 72 586.02 T
(xpression is installed and e) 153.46 586.02 T
(x) 282.6 586.02 T
(ecuted, to be useful it needs to be able to communicate) 288.42 586.02 T
-0.21 (data back to the client. DPCL pro) 72 572.02 P
-0.21 (vides a \322send\323 function for this purpose. The send function needs
to) 231.55 572.02 P
(kno) 72 558.02 T
(w what data to send, ho) 89.7 558.02 T
(w lar) 202.72 558.02 T
(ge the data is, and to whom it is to be sent. The data to be sent tak) 226.82
558.02 T
(es) 542.34 558.02 T
-0.22 (the form of a character pointer) 72 544.02 P
-0.22 (, the size is an inte) 216.71 544.02 P
-0.22 (ger v) 304.09 544.02 P
-0.22 (alue that re\337ects the number of bytes to be sent,) 327.89 544.02 P
(and the addressee is a special probe message handle that identi\336es the
client and callback that are to) 72 530.02 T
(recei) 72 516.02 T
(v) 95.02 516.02 T
(e the message.) 100.84 516.02 T
96 488.82 72 488.82 2 L
V
0.6 H
N
0 F
(2.7.1) 72 490.02 T
111.66 488.82 96 488.82 2 L
V
N
( Pr) 96 490.02 T
253.12 488.82 111.44 488.82 2 L
V
N
(obe Message Send Function) 111.44 490.02 T
1 F
-0.03 (In order to send a message from a probe e) 72 475.02 P
-0.03 (xpression to a client callback one must include a call to the) 272.45
475.02 P
(function) 72 461.02 T
4 F
(Ais_send) 115 461.02 T
1 F
( as part of the e) 172.6 461.02 T
(xpression. This may be done as follo) 246.06 461.02 T
(ws.) 422.08 461.02 T
4 F
(ProbeExp args[3];) 108 440.02 T
(args[0] = Ais_msg_handle;) 108 420.02 T
(args[1] = msg;) 108 400.02 T
(args[2] = int32\050msg_size\051;) 108 380.02 T
(ProbeExp pe = Ais_send.call\0503, args\051;) 108 360.02 T
1 F
-0.34 (This e) 72 339.02 P
-0.34 (xample sends a message whose reference is stored in the probe e) 101.14
339.02 P
-0.34 (xpression) 407.46 339.02 P
4 F
-0.82 (msg) 456.11 339.02 P
1 F
-0.34 (, and whose size) 477.71 339.02 P
-0.15 (is stored in the end-user) 72 325.02 P
-0.15 (-tool v) 185.81 325.02 P
-0.15 (ariable) 217.03 325.02 P
4 F
-0.36 (msg_size) 252.53 325.02 P
1 F
-0.15 (. The e) 310.13 325.02 P
-0.15 (xpression) 342.64 325.02 P
4 F
-0.36 (pe) 391.48 325.02 P
1 F
-0.15 ( must be included as part of the) 405.89 325.02 P
(probe e) 72 311.02 T
(xpression when it is installed into the application or process.) 107.47 311.02
T
96 283.82 72 283.82 2 L
V
N
0 F
(2.7.2) 72 285.02 T
111.66 283.82 96 283.82 2 L
V
N
( Pr) 96 285.02 T
220.78 283.82 111.44 283.82 2 L
V
N
(obe Message Handles) 111.44 285.02 T
1 F
(Probe message handles are data structures that contain the \322address\323 of
the message recipient. In) 72 270.02 T
(DPCL it is possible to ha) 72 256.02 T
(v) 192.11 256.02 T
(e man) 197.93 256.02 T
(y end-user) 226.74 256.02 T
(-tools connected to man) 276.82 256.02 T
(y daemons. The signi\336cant aspect) 391.62 256.02 T
-0.2 (of this is that one daemon manages connections to potentially man) 72
242.02 P
-0.2 (y clients, and each client may ha) 389.17 242.02 P
-0.2 (v) 544.05 242.02 P
-0.2 (e) 549.87 242.02 P
(multiple callbacks that recei) 72 228.02 T
(v) 206.68 228.02 T
(e data. Each time a probe e) 212.5 228.02 T
(xpression is installed within a process a ne) 341.94 228.02 T
(w) 545.95 228.02 T
(probe handle is created with all the information necessary to route messages
from the probe to the) 72 214.02 T
(correct client and callback function.) 72 200.02 T
(In order to include references to message handles in probe e) 72 179.02 T
(xpressions there is a symbol of type) 359.74 179.02 T
4 F
(ProbeExp) 72 165.02 T
1 F
(,) 129.6 165.02 T
4 F
(Ais_msg_handle) 135.6 165.02 T
1 F
(, that represents a reference to the message handle for that particu-) 236.4
165.02 T
(lar probe e) 72 151.02 T
(xpression. Although the reference is the same for all probe e) 123.13 151.02 T
(xpressions within the end-) 412.55 151.02 T
(user) 72 137.02 T
(-tool, when the daemon installs the probe e) 91.75 137.02 T
(xpression it recognizes and changes the reference to) 298.21 137.02 T
(the correct v) 72 123.02 T
(alue for the ne) 131.68 123.02 T
(w probe e) 200.35 123.02 T
(xpression.) 247.49 123.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 38
%%Page: "33" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(33) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
89.5 675.28 72 675.28 2 L
0 X
V
0.7 H
0 Z
N
89.5 687.9 72 687.9 2 L
V
N
0 14 Q
(2.8) 72 676.68 T
107.77 675.28 89.5 675.28 2 L
V
N
107.77 687.9 89.5 687.9 2 L
V
N
( Pr) 89.5 676.68 T
183.36 675.28 107.52 675.28 2 L
V
N
183.36 687.9 107.52 687.9 2 L
V
N
(obe Modules) 107.52 676.68 T
1 12 Q
(T) 72 658.02 T
(o be pro) 78.37 658.02 T
(vided in a later release.) 117.52 658.02 T
96 630.82 72 630.82 2 L
V
0.6 H
N
0 F
(2.8.1) 72 632.02 T
197.02 630.82 96 630.82 2 L
V
N
( Loading and Remo) 96 632.02 T
234.56 630.82 196.9 630.82 2 L
V
N
(ving Pr) 196.9 632.02 T
299.35 630.82 234.35 630.82 2 L
V
N
(obe Modules) 234.35 632.02 T
96 603.82 72 603.82 2 L
V
N
(2.8.2) 72 605.02 T
111.66 603.82 96 603.82 2 L
V
N
( Pr) 96 605.02 T
225.46 603.82 111.44 603.82 2 L
V
N
(obe Module Functions) 111.44 605.02 T
96 576.82 72 576.82 2 L
V
N
(2.8.3) 72 578.02 T
111.66 576.82 96 576.82 2 L
V
N
( Pr) 96 578.02 T
199.44 576.82 111.44 576.82 2 L
V
N
(obe Module Data) 111.44 578.02 T
96 549.82 72 549.82 2 L
V
N
(2.8.4) 72 551.02 T
111.66 549.82 96 549.82 2 L
V
N
( Pr) 96 551.02 T
210.44 549.82 111.44 549.82 2 L
V
N
(obe Module Data T) 111.44 551.02 T
232.22 549.82 209.56 549.82 2 L
V
N
(ypes) 209.56 551.02 T
6 10 Q
(2.8.4.1) 72 525.35 T
( Creating Data from User-De\336ned Probe Data T) 99.5 525.35 T
(ypes) 298.29 525.35 T
96 497.82 72 497.82 2 L
V
N
0 12 Q
(2.8.5) 72 499.02 T
290.34 497.82 96 497.82 2 L
V
N
( Selecting Functions, Data and Data T) 96 499.02 T
376.46 497.82 289.45 497.82 2 L
V
N
(ypes in a Module) 289.45 499.02 T
89.5 463.28 72 463.28 2 L
V
0.7 H
N
89.5 475.9 72 475.9 2 L
V
N
0 14 Q
(2.9) 72 464.68 T
101.55 463.28 89.5 463.28 2 L
V
N
101.55 475.9 89.5 475.9 2 L
V
N
( P) 89.5 464.68 T
192.65 463.28 101.27 463.28 2 L
V
N
192.65 475.9 101.27 475.9 2 L
V
N
(eriodically Acti) 101.27 464.68 T
199.51 463.28 192.51 463.28 2 L
V
N
199.51 475.9 192.51 475.9 2 L
V
N
(v) 192.51 464.68 T
379.8 463.28 199.37 463.28 2 L
V
N
379.8 475.9 199.37 475.9 2 L
V
N
(ated Instrumentation \050Phases\051) 199.37 464.68 T
1 12 Q
(T) 72 446.02 T
(o be pro) 78.37 446.02 T
(vided in a later release.) 117.52 446.02 T
96 418.82 72 418.82 2 L
V
0.6 H
N
0 F
(2.9.1) 72 420.02 T
182.68 418.82 96 418.82 2 L
V
N
( Phase Functions) 96 420.02 T
96 391.82 72 391.82 2 L
V
N
(2.9.2) 72 393.02 T
156.66 391.82 96 391.82 2 L
V
N
( Phase Data) 96 393.02 T
96 364.82 72 364.82 2 L
V
N
(2.9.3) 72 366.02 T
107.66 364.82 96 364.82 2 L
V
N
( A) 96 366.02 T
244.07 364.82 107.36 364.82 2 L
V
N
(pplication Signal Handlers) 107.36 366.02 T
96.5 330.28 72 330.28 2 L
V
0.7 H
N
96.5 342.9 72 342.9 2 L
V
N
0 14 Q
(2.10) 72 331.68 T
353.95 330.28 96.5 330.28 2 L
V
N
353.95 342.9 96.5 342.9 2 L
V
N
( Single Execution Instrumentation \050IRPCs\051) 96.5 331.68 T
96.5 296.28 72 296.28 2 L
V
N
96.5 308.9 72 308.9 2 L
V
N
(2.11) 72 297.68 T
149.77 296.28 96.5 296.28 2 L
V
N
149.77 308.9 96.5 308.9 2 L
V
N
( Security) 96.5 297.68 T
102 269.82 72 269.82 2 L
V
0.6 H
N
0 12 Q
(2.11.1) 72 271.02 T
147.66 269.82 102 269.82 2 L
V
N
( Unsecur) 102 271.02 T
164.44 269.82 147.44 269.82 2 L
V
N
(e A) 147.44 271.02 T
231.84 269.82 163.84 269.82 2 L
V
N
(uthentication) 163.84 271.02 T
102 242.82 72 242.82 2 L
V
N
(2.11.2) 72 244.02 T
142 242.82 102 242.82 2 L
V
N
( DCE A) 102 244.02 T
209.4 242.82 141.4 242.82 2 L
V
N
(uthentication) 141.4 244.02 T
1 F
(T) 72 229.02 T
(o be pro) 78.37 229.02 T
(vided in a later release.) 117.52 229.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 39
%%Page: "34" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Intr) 81 733.01 T
(oduction to DPCL Concepts) 95.32 733.01 T
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(chapter2.chp) 361.99 45.99 T
(34) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 40
%%Page: "69" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
( glossary.chp) 360.99 45.99 T
(69) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
0 18 Q
0 X
(Glossary) 272 674.02 T
0 12 Q
(a.out.) 72 642.02 T
(Abstract syntax tr) 72 621.02 T
(ee.) 165.1 621.02 T
(Ackno) 72 600.02 T
(wledgement.) 105.22 600.02 T
(Acti) 72 579.02 T
(v) 93.2 579.02 T
(ating a pr) 99.08 579.02 T
(obe.) 148.87 579.02 T
(A) 72 558.02 T
(pplication.) 80.36 558.02 T
(A) 72 537.02 T
(pplication pr) 80.36 537.02 T
(ocess.) 146.5 537.02 T
(Ar) 72 516.02 T
(gument.) 85.87 516.02 T
1 F
( See) 127.54 516.02 T
5 F
(function ar) 150.86 516.02 T
(gument.) 203.42 516.02 T
0 F
(Asynchr) 72 495.02 T
(onous.) 115.12 495.02 T
(AST) 72 474.02 T
(.) 94.26 474.02 T
1 F
(See) 100.26 474.02 T
5 F
(abstr) 120.59 474.02 T
(act syntax tr) 145.08 474.02 T
(ee) 203.96 474.02 T
1 F
(.) 214.62 474.02 T
0 F
(A) 72 453.02 T
(uthentication.) 80.06 453.02 T
(Begin-phase function.) 72 432.02 T
1 F
( See) 183.35 432.02 T
5 F
(phase be) 206.68 432.02 T
(gin function) 248.52 432.02 T
1 F
(.) 306.19 432.02 T
0 F
(Blocking functions.) 72 411.02 T
1 F
(See) 173.69 411.02 T
5 F
(bloc) 194.02 411.02 T
(king service r) 214.44 411.02 T
(equests.) 279.31 411.02 T
0 F
(Blocking ser) 72 390.02 T
(vice r) 135.55 390.02 T
(equests.) 163.66 390.02 T
(Callback.) 72 369.02 T
(Callback function.) 72 348.02 T
1 F
(See) 169.68 348.02 T
5 F
(callbac) 190.01 348.02 T
(k) 225.1 348.02 T
1 F
(.) 230.42 348.02 T
0 F
(Class member function.) 72 327.02 T
1 F
( See) 193.66 327.02 T
5 F
(member function.) 216.98 327.02 T
0 F
(Class method.) 72 306.02 T
1 F
(See) 147 306.02 T
5 F
(member function.) 167.33 306.02 T
0 F
(Client.) 72 285.02 T
1 F
( The AIX process which e) 106.33 285.02 T
(x) 231.78 285.02 T
(ecutes the end-user) 237.6 285.02 T
(-tool b) 329.33 285.02 T
(uilt upon the API.) 360.76 285.02 T
0 F
(Client machine.) 72 264.02 T
1 F
(The machine that e) 155.66 264.02 T
(x) 247.13 264.02 T
(ecutes the client.) 252.95 264.02 T
0 F
(Client pr) 72 243.02 T
(ocess.) 118.12 243.02 T
1 F
( Same as) 147.11 243.02 T
5 F
(client) 192.77 243.02 T
1 F
(.) 219.43 243.02 T
0 F
(Conditional contr) 72 222.02 T
(ol \337o) 162.79 222.02 T
(w) 187.68 222.02 T
(.) 195.5 222.02 T
(Contr) 72 201.02 T
(ol \337o) 102.44 201.02 T
(w) 127.33 201.02 T
(.) 135.16 201.02 T
(Daemon.) 72 180.02 T
(Data polymor) 72 159.02 T
(phism.) 142.87 159.02 T
(Deaciti) 72 138.02 T
(v) 107.87 138.02 T
(ating a pr) 113.75 138.02 T
(obe.) 163.54 138.02 T
(Distrib) 72 117.02 T
(uted name ser) 107.76 117.02 T
(v) 179.63 117.02 T
(er) 185.51 117.02 T
(.) 194.96 117.02 T
(DNS.) 72 96.02 T
1 F
( See distrib) 99 96.02 T
(uted name serv) 152.76 96.02 T
(er) 225.23 96.02 T
(.) 233.89 96.02 T
FMENDPAGE
%%EndPage: "69" 41
%%Page: "70" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(glossary.chp) 362.24 45.99 T
(70) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
0 12 Q
0 X
(Encryption.) 72 678.02 T
(End user tool.) 72 657.02 T
(Executable image.) 72 636.02 T
(Function ar) 72 615.02 T
(gument.) 132.22 615.02 T
(Function parameter) 72 594.02 T
(.) 173.78 594.02 T
(Inferior r) 72 573.02 T
(emote pr) 120.77 573.02 T
(ocedur) 166.2 573.02 T
(e call \050IRPC\051.) 201.31 573.02 T
(Instruction str) 72 552.02 T
(eam.) 146.11 552.02 T
(Instrumentation.) 72 531.02 T
(Instrumentation point.) 72 510.02 T
(Intrusi) 72 489.02 T
(v) 107.22 489.02 T
(eness.) 113.1 489.02 T
(IRPC.) 72 468.02 T
1 F
(See) 107.33 468.02 T
5 F
(inferior r) 127.66 468.02 T
(emote pr) 171.55 468.02 T
(ocedur) 213.34 468.02 T
(e call) 246.22 468.02 T
1 F
(.) 272.54 468.02 T
0 F
(Light-weight inferior r) 72 447.02 T
(emote pr) 188.44 447.02 T
(ocedur) 233.87 447.02 T
(e call.) 268.98 447.02 T
(Member function.) 72 426.02 T
(Message handle.) 72 405.02 T
(Negati) 72 384.02 T
(v) 105.2 384.02 T
(e ackno) 111.08 384.02 T
(wledgement.) 149.96 384.02 T
(Non-blocking functions.) 72 363.02 T
(Non-blocking ser) 72 342.02 T
(vice r) 159.55 342.02 T
(equests.) 187.66 342.02 T
(One-shot instrumentation.) 72 321.02 T
1 F
( See) 207.34 321.02 T
5 F
(inferior r) 230.66 321.02 T
(emote pr) 274.56 321.02 T
(ocedur) 316.34 321.02 T
(e call) 349.22 321.02 T
1 F
(.) 375.55 321.02 T
0 F
(P) 72 300.02 T
(arallel application.) 79.21 300.02 T
(P) 72 279.02 T
(ersistent data.) 79.09 279.02 T
(Phase.) 72 258.02 T
(Phase begin function.) 72 237.02 T
(Phase end function.) 72 216.02 T
(Phase iteration function.) 72 195.02 T
(P) 72 174.02 T
(olymor) 79.09 174.02 T
(phism.) 115.63 174.02 T
(P) 72 153.02 T
(ositi) 79.09 153.02 T
(v) 100.31 153.02 T
(e ackno) 106.19 153.02 T
(wledgement.) 145.07 153.02 T
(Pr) 72 132.02 T
(obe.) 84.44 132.02 T
(Pr) 72 111.02 T
(obe acti) 84.44 111.02 T
(v) 123.98 111.02 T
(ation.) 129.86 111.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 42
%%Page: "71" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.02 558 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Draft) 447 733.01 T
72 726.98 558 726.98 2 L
7 X
V
0.25 H
0 X
N
72 74.02 558 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
( glossary.chp) 360.99 45.99 T
(71) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
0 12 Q
0 X
(Pr) 72 678.02 T
(obe data.) 84.44 678.02 T
(Pr) 72 657.02 T
(obe data type.) 84.44 657.02 T
(Pr) 72 636.02 T
(obe deacti) 84.44 636.02 T
(v) 135.98 636.02 T
(ation.) 141.86 636.02 T
(Pr) 72 615.02 T
(obe expr) 84.44 615.02 T
(ession.) 128.56 615.02 T
(Pr) 72 594.02 T
(obe function.) 84.44 594.02 T
(Pr) 72 573.02 T
(obe module.) 84.44 573.02 T
(Pr) 72 552.02 T
(obe type.) 84.44 552.02 T
(Pr) 72 531.02 T
(ocess.) 84.44 531.02 T
(Pr) 72 510.02 T
(ocess ID) 84.44 510.02 T
(.) 126.53 510.02 T
(Pr) 72 489.02 T
(ocess identi\336er) 84.44 489.02 T
(.) 158.9 489.02 T
(Pr) 72 468.02 T
(ogram sour) 84.44 468.02 T
(ce object.) 143.22 468.02 T
(Pseudo-synchr) 72 447.02 T
(onous.) 147.12 447.02 T
(Root sour) 72 426.02 T
(ce object.) 122.11 426.02 T
1 F
( See) 170.09 426.02 T
5 F
(pr) 193.42 426.02 T
(o) 203.54 426.02 T
(gr) 209.42 426.02 T
(am sour) 219.91 426.02 T
(ce object) 258.47 426.02 T
1 F
(.) 301.45 426.02 T
0 F
(Serial application.) 72 405.02 T
(Ser) 72 384.02 T
(v) 89.21 384.02 T
(er) 95.09 384.02 T
(.) 104.54 384.02 T
1 F
( One of the daemon processes.) 107.54 384.02 T
0 F
(Ser) 72 363.02 T
(v) 89.21 363.02 T
(er machine.) 95.09 363.02 T
1 F
( An) 155.08 363.02 T
(y machine that e) 172.56 363.02 T
(x) 251.36 363.02 T
(ecutes daemon processes.) 257.18 363.02 T
0 F
(Ser) 72 342.02 T
(v) 89.21 342.02 T
(er pr) 95.09 342.02 T
(ocess.) 120.53 342.02 T
1 F
( Same as) 149.52 342.02 T
5 F
(server) 195.18 342.02 T
1 F
(.) 224.51 342.02 T
0 F
(Shar) 72 321.02 T
(ed memory) 96.46 321.02 T
(.) 153.26 321.02 T
(Signal.) 72 300.02 T
(Signal handler) 72 279.02 T
(.) 145.82 279.02 T
(Single pr) 72 258.02 T
(ogram, multiple data.) 118.13 258.02 T
(Snippet.) 72 237.02 T
(Sour) 72 216.02 T
(ce object.) 96.46 216.02 T
(SPMD) 72 195.02 T
(.) 105.76 195.02 T
1 F
( See) 108.76 195.02 T
5 F
(single pr) 132.08 195.02 T
(o) 173.88 195.02 T
(gr) 179.76 195.02 T
(am, multiple data.) 190.25 195.02 T
0 F
(Stack data.) 72 174.02 T
(Super daemon.) 72 153.02 T
(T) 72 132.02 T
(ask ID) 78.9 132.02 T
(.) 112.33 132.02 T
(T) 72 111.02 T
(ask identi\336er) 78.9 111.02 T
(.) 144.71 111.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 43
%%Page: "72" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 750.02 54 750.02 2 L
7 X
0 0 0 1 0 0 0 K
V
2 H
0 Z
0 X
N
54 726.98 558 739.01 R
7 X
V
2 9 Q
0 X
(Draft) 447 733.01 T
540 726.98 54 726.98 2 L
7 X
V
0.25 H
0 X
N
540 74.02 54 74.02 2 L
7 X
V
2 Z
0 X
N
54 40.04 558 51.99 R
7 X
V
0 X
(6/30/98) 54 45.99 T
(Copyright 1998 by IBM Corp.) 141.82 45.99 T
(glossary.chp) 362.24 45.99 T
(72) 547.99 45.99 T
54 87.98 558 686.02 R
7 X
V
0 12 Q
0 X
(T) 72 678.02 T
(rampoline.) 79.12 678.02 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 44
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 44
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Helvetica-Bold
%%+ Symbol
%%+ Courier
%%+ Times-Italic
%%+ Times-BoldItalic
%%EOF
