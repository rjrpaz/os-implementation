<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./Assign3_files/filelist.xml">
<link rel=Edit-Time-Data href="./Assign3_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>The summary of the situation is:</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>hawkey</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>hawkey</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>134</o:TotalTime>
  <o:LastPrinted>2003-06-09T15:19:00Z</o:LastPrinted>
  <o:Created>2003-06-09T16:03:00Z</o:Created>
  <o:LastSaved>2003-06-09T16:03:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>424</o:Words>
  <o:Characters>2421</o:Characters>
  <o:Company>Dalhousie University</o:Company>
  <o:Lines>20</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2973</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:11.0in 8.5in;
	mso-page-orientation:landscape;
	margin:.75in .75in .75in .75in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:655184848;
	mso-list-type:hybrid;
	mso-list-template-ids:1015830964 948453168 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-hansi-font-family:"Courier New";}
@list l1
	{mso-list-id:1788965501;
	mso-list-type:hybrid;
	mso-list-template-ids:-2102468718 522765690 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l1:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal>Assignment 3 - CS3120, Summer 2003</p>

<p class=MsoNormal>Due date: Wednesday, June 18, 2003</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This assignment can be done in pairs, but pairs must be
decided and the pairing submitted prior to the beginning of class, Friday, June
13th. </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>For the following situation, devise a synchronization scheme
between the loading process and the main process that will meet the main
requirement of CPU efficiency and guard the critical sections for the
queues.<span style="mso-spacerun: yes">  </span>Your submission should include
the detailed pseudo code necessary to implement the scheme, including
initialization of shared data .<span style="mso-spacerun: yes">  </span>A
diagram showing the interaction of the processes will aide in the understanding
of your solution.<span style="mso-spacerun: yes">  </span>There should also be
a discussion section that explains why you chose the concurrency mechanisms you
did, and an argument about how your solution is correct in terms of mutual
exclusion, progress and bounded waiting both for the critical sections and the
synchronization of the loading process. </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This is a real-life scenario from a game engine currently
being designed.<span style="mso-spacerun: yes">  </span>The summary of the
situation is:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='mso-hansi-font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Need asynchronous file i/o with callbacks when
operations complete so that the game can do things like start loading data, and
then when some of the data is loaded it can start doing the work it needs to do
on the data while other data is loading in the background.<span
style="mso-spacerun: yes">  </span>The problem with games is that load times
really hurt a game's popularity, so you really have to optimize your loading.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='mso-hansi-font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>One way to do that is make it so you are never waiting
on hardware to finish loading something.<span style="mso-spacerun: yes"> 
</span>You load a little at a time, and then process the data while the rest of
the data is being loaded.<span style="mso-spacerun: yes">  </span>For example
you could start loading a texture, then update your screen to do some fancy
loading display that entertains the player while loading is going on, then when
your texture is loaded you can start loading the next file you need and then go
onto decompressing your texture and storing it in video memory.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='mso-hansi-font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>There is a loading process and a file wrapper class
called Cfile.<span style="mso-spacerun: yes">  </span>The user issues a read
request with CFIle, and then that request is queued on a queue of pending file
i/o requests (each one being either read, write or seek).</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='mso-hansi-font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>The loading process checks the queue of pending
requests, gets the oldest one, and acts on the request.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='mso-hansi-font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>When the request is finished the loading process stores
the results on the completed i/o requests queue.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='mso-hansi-font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>In the game's main loop a static method of Cfile is
called every frame to &quot;service&quot; the file i/o system, and any
completed requests on the second queue are dealt with.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='mso-hansi-font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>A separate process is needed so that loading can be
asynchronous.<span style="mso-spacerun: yes">  </span>Critical sections are
needed so that two processes can't operate on the queues at the same time.<span
style="mso-spacerun: yes">  </span>There needs to be a synchronization
mechanism to activate the loading process because the loading thread should not
be taking up CPU resources when there is nothing that needs to be loaded.<span
style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:683.25pt;
 height:387pt'>
 <v:imagedata src="./Assign3_files/image001.png" o:title="asyncfileio1"/>
</v:shape><![endif]--><![if !vml]><img width=911 height=516
src="./Assign3_files/image002.jpg" v:shapes="_x0000_i1025"><![endif]></p>

</div>

</body>

</html>
